(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module array-iterate
 * @fileoverview `forEach` with the possibility to change the
 *   next position.
 */

'use strict';

/* Dependencies. */
var has = require('has');

/* Expose. */
module.exports = iterate;

/**
 * `Array#forEach()` with the possibility to change
 * the next position.
 *
 * @param {{length: number}} values - Values.
 * @param {arrayIterate~callback} callback - Callback given to `iterate`.
 * @param {*?} [context] - Context object to use when invoking `callback`.
 */
function iterate(values, callback, context) {
  var index = -1;
  var result;

  if (!values) {
    throw new Error('Iterate requires that |this| not be ' + values);
  }

  if (!has(values, 'length')) {
    throw new Error('Iterate requires that |this| has a `length`');
  }

  if (typeof callback !== 'function') {
    throw new Error('`callback` must be a function');
  }

  /* The length might change, so we do not cache it. */
  while (++index < values.length) {
    /* Skip missing values. */
    if (!(index in values)) {
      continue;
    }

    result = callback.call(context, values[index], index, values);

    /*
     * If `callback` returns a `number`, move `index` over to
     * `number`.
     */

    if (typeof result === 'number') {
      /* Make sure that negative numbers do not break the loop. */
      if (result < 0) {
        index = 0;
      }

      index = result - 1;
    }
  }
}

},{"has":167}],2:[function(require,module,exports){
// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// when used in node, this will actually load the util module we depend on
// versus loading the builtin util module as happens otherwise
// this is a bug in node module loading as far as I am concerned
var util = require('util/');

var pSlice = Array.prototype.slice;
var hasOwn = Object.prototype.hasOwnProperty;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  }
  else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = stackStartFunction.name;
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && !isFinite(value)) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
         self.operator + ' ' +
         truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b)) {
    return a === b;
  }
  var aIsArgs = isArguments(a),
      bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  var ka = objectKeys(a),
      kb = objectKeys(b),
      key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

},{"util/":355}],3:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/array/from"), __esModule: true };
},{"core-js/library/fn/array/from":45}],4:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/get-iterator"), __esModule: true };
},{"core-js/library/fn/get-iterator":46}],5:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/is-iterable"), __esModule: true };
},{"core-js/library/fn/is-iterable":47}],6:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/json/stringify"), __esModule: true };
},{"core-js/library/fn/json/stringify":48}],7:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":49}],8:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
},{"core-js/library/fn/object/create":50}],9:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":51}],10:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/entries"), __esModule: true };
},{"core-js/library/fn/object/entries":52}],11:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-own-property-descriptor"), __esModule: true };
},{"core-js/library/fn/object/get-own-property-descriptor":53}],12:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/get-prototype-of":54}],13:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/keys"), __esModule: true };
},{"core-js/library/fn/object/keys":55}],14:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/set-prototype-of":56}],15:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/values"), __esModule: true };
},{"core-js/library/fn/object/values":57}],16:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/promise"), __esModule: true };
},{"core-js/library/fn/promise":58}],17:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };
},{"core-js/library/fn/symbol":59}],18:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };
},{"core-js/library/fn/symbol/iterator":60}],19:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _promise = require("../core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new _promise2.default(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return _promise2.default.resolve(value).then(function (value) {
            return step("next", value);
          }, function (err) {
            return step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};
},{"../core-js/promise":16}],20:[function(require,module,exports){
"use strict";

exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
},{}],21:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _defineProperty = require("../core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
},{"../core-js/object/define-property":9}],22:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _defineProperty = require("../core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (obj, key, value) {
  if (key in obj) {
    (0, _defineProperty2.default)(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};
},{"../core-js/object/define-property":9}],23:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _assign = require("../core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _assign2.default || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};
},{"../core-js/object/assign":7}],24:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _setPrototypeOf = require("../core-js/object/set-prototype-of");

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = require("../core-js/object/create");

var _create2 = _interopRequireDefault(_create);

var _typeof2 = require("../helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};
},{"../core-js/object/create":8,"../core-js/object/set-prototype-of":14,"../helpers/typeof":29}],25:[function(require,module,exports){
"use strict";

exports.__esModule = true;

exports.default = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};
},{}],26:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _typeof2 = require("../helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};
},{"../helpers/typeof":29}],27:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _isIterable2 = require("../core-js/is-iterable");

var _isIterable3 = _interopRequireDefault(_isIterable2);

var _getIterator2 = require("../core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((0, _isIterable3.default)(Object(arr))) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();
},{"../core-js/get-iterator":4,"../core-js/is-iterable":5}],28:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _from = require("../core-js/array/from");

var _from2 = _interopRequireDefault(_from);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return (0, _from2.default)(arr);
  }
};
},{"../core-js/array/from":3}],29:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _iterator = require("../core-js/symbol/iterator");

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = require("../core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};
},{"../core-js/symbol":17,"../core-js/symbol/iterator":18}],30:[function(require,module,exports){
module.exports = require("regenerator-runtime");

},{"regenerator-runtime":"regenerator-runtime"}],31:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module bail
 * @fileoverview Throw a given error.
 */

'use strict';

/* Expose. */
module.exports = bail;

/**
 * Throw a given error.
 *
 * @example
 *   bail();
 *
 * @example
 *   bail(new Error('failure'));
 *   // Error: failure
 *   //     at repl:1:6
 *   //     at REPLServer.defaultEval (repl.js:154:27)
 *   //     ...
 *
 * @param {Error?} [err] - Optional error.
 * @throws {Error} - `err`, when given.
 */
function bail(err) {
  if (err) {
    throw err;
  }
}

},{}],32:[function(require,module,exports){
/*!
 * Cross-Browser Split 1.1.1
 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>
 * Available under the MIT License
 * ECMAScript compliant, uniform cross-browser split method
 */

/**
 * Splits a string into an array of strings using a regex or string separator. Matches of the
 * separator are not included in the result array. However, if `separator` is a regex that contains
 * capturing groups, backreferences are spliced into the result each time `separator` is matched.
 * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
 * cross-browser.
 * @param {String} str String to split.
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {Array} Array of substrings.
 * @example
 *
 * // Basic use
 * split('a b c d', ' ');
 * // -> ['a', 'b', 'c', 'd']
 *
 * // With limit
 * split('a b c d', ' ', 2);
 * // -> ['a', 'b']
 *
 * // Backreferences in result array
 * split('..word1 word2..', /([a-z]+)(\d+)/i);
 * // -> ['..', 'word', '1', ' ', 'word', '2', '..']
 */
module.exports = (function split(undef) {

  var nativeSplit = String.prototype.split,
    compliantExecNpcg = /()??/.exec("")[1] === undef,
    // NPCG: nonparticipating capturing group
    self;

  self = function(str, separator, limit) {
    // If `separator` is not a regex, use `nativeSplit`
    if (Object.prototype.toString.call(separator) !== "[object RegExp]") {
      return nativeSplit.call(str, separator, limit);
    }
    var output = [],
      flags = (separator.ignoreCase ? "i" : "") + (separator.multiline ? "m" : "") + (separator.extended ? "x" : "") + // Proposed for ES6
      (separator.sticky ? "y" : ""),
      // Firefox 3+
      lastLastIndex = 0,
      // Make `global` and avoid `lastIndex` issues by working with a copy
      separator = new RegExp(separator.source, flags + "g"),
      separator2, match, lastIndex, lastLength;
    str += ""; // Type-convert
    if (!compliantExecNpcg) {
      // Doesn't need flags gy, but they don't hurt
      separator2 = new RegExp("^" + separator.source + "$(?!\\s)", flags);
    }
    /* Values for `limit`, per the spec:
     * If undefined: 4294967295 // Math.pow(2, 32) - 1
     * If 0, Infinity, or NaN: 0
     * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
     * If negative number: 4294967296 - Math.floor(Math.abs(limit))
     * If other: Type-convert, then use the above rules
     */
    limit = limit === undef ? -1 >>> 0 : // Math.pow(2, 32) - 1
    limit >>> 0; // ToUint32(limit)
    while (match = separator.exec(str)) {
      // `separator.lastIndex` is not reliable cross-browser
      lastIndex = match.index + match[0].length;
      if (lastIndex > lastLastIndex) {
        output.push(str.slice(lastLastIndex, match.index));
        // Fix browsers whose `exec` methods don't consistently return `undefined` for
        // nonparticipating capturing groups
        if (!compliantExecNpcg && match.length > 1) {
          match[0].replace(separator2, function() {
            for (var i = 1; i < arguments.length - 2; i++) {
              if (arguments[i] === undef) {
                match[i] = undef;
              }
            }
          });
        }
        if (match.length > 1 && match.index < str.length) {
          Array.prototype.push.apply(output, match.slice(1));
        }
        lastLength = match[0].length;
        lastLastIndex = lastIndex;
        if (output.length >= limit) {
          break;
        }
      }
      if (separator.lastIndex === match.index) {
        separator.lastIndex++; // Avoid an infinite loop
      }
    }
    if (lastLastIndex === str.length) {
      if (lastLength || !separator.test("")) {
        output.push("");
      }
    } else {
      output.push(str.slice(lastLastIndex));
    }
    return output.length > limit ? output.slice(0, limit) : output;
  };

  return self;
})();

},{}],33:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],34:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module ccount
 * @fileoverview Count characters.
 */

'use strict';

/* Expose. */
module.exports = ccount;

/**
 * Count how many characters `character` occur in `value`.
 *
 * @example
 *   ccount('foo(bar(baz)', '(') // 2
 *   ccount('foo(bar(baz)', ')') // 1
 *
 * @param {string} value - Content, coerced to string.
 * @param {string} character - Single character to look
 *   for.
 * @return {number} - Count.
 * @throws {Error} - when `character` is not a single
 *   character.
 */
function ccount(value, character) {
  var count = 0;
  var index;

  value = String(value);

  if (typeof character !== 'string' || character.length !== 1) {
    throw new Error('Expected character');
  }

  index = value.indexOf(character);

  while (index !== -1) {
    count++;
    index = value.indexOf(character, index + 1);
  }

  return count;
}

},{}],35:[function(require,module,exports){
module.exports={
  "nbsp": " ",
  "iexcl": "¡",
  "cent": "¢",
  "pound": "£",
  "curren": "¤",
  "yen": "¥",
  "brvbar": "¦",
  "sect": "§",
  "uml": "¨",
  "copy": "©",
  "ordf": "ª",
  "laquo": "«",
  "not": "¬",
  "shy": "­",
  "reg": "®",
  "macr": "¯",
  "deg": "°",
  "plusmn": "±",
  "sup2": "²",
  "sup3": "³",
  "acute": "´",
  "micro": "µ",
  "para": "¶",
  "middot": "·",
  "cedil": "¸",
  "sup1": "¹",
  "ordm": "º",
  "raquo": "»",
  "frac14": "¼",
  "frac12": "½",
  "frac34": "¾",
  "iquest": "¿",
  "Agrave": "À",
  "Aacute": "Á",
  "Acirc": "Â",
  "Atilde": "Ã",
  "Auml": "Ä",
  "Aring": "Å",
  "AElig": "Æ",
  "Ccedil": "Ç",
  "Egrave": "È",
  "Eacute": "É",
  "Ecirc": "Ê",
  "Euml": "Ë",
  "Igrave": "Ì",
  "Iacute": "Í",
  "Icirc": "Î",
  "Iuml": "Ï",
  "ETH": "Ð",
  "Ntilde": "Ñ",
  "Ograve": "Ò",
  "Oacute": "Ó",
  "Ocirc": "Ô",
  "Otilde": "Õ",
  "Ouml": "Ö",
  "times": "×",
  "Oslash": "Ø",
  "Ugrave": "Ù",
  "Uacute": "Ú",
  "Ucirc": "Û",
  "Uuml": "Ü",
  "Yacute": "Ý",
  "THORN": "Þ",
  "szlig": "ß",
  "agrave": "à",
  "aacute": "á",
  "acirc": "â",
  "atilde": "ã",
  "auml": "ä",
  "aring": "å",
  "aelig": "æ",
  "ccedil": "ç",
  "egrave": "è",
  "eacute": "é",
  "ecirc": "ê",
  "euml": "ë",
  "igrave": "ì",
  "iacute": "í",
  "icirc": "î",
  "iuml": "ï",
  "eth": "ð",
  "ntilde": "ñ",
  "ograve": "ò",
  "oacute": "ó",
  "ocirc": "ô",
  "otilde": "õ",
  "ouml": "ö",
  "divide": "÷",
  "oslash": "ø",
  "ugrave": "ù",
  "uacute": "ú",
  "ucirc": "û",
  "uuml": "ü",
  "yacute": "ý",
  "thorn": "þ",
  "yuml": "ÿ",
  "fnof": "ƒ",
  "Alpha": "Α",
  "Beta": "Β",
  "Gamma": "Γ",
  "Delta": "Δ",
  "Epsilon": "Ε",
  "Zeta": "Ζ",
  "Eta": "Η",
  "Theta": "Θ",
  "Iota": "Ι",
  "Kappa": "Κ",
  "Lambda": "Λ",
  "Mu": "Μ",
  "Nu": "Ν",
  "Xi": "Ξ",
  "Omicron": "Ο",
  "Pi": "Π",
  "Rho": "Ρ",
  "Sigma": "Σ",
  "Tau": "Τ",
  "Upsilon": "Υ",
  "Phi": "Φ",
  "Chi": "Χ",
  "Psi": "Ψ",
  "Omega": "Ω",
  "alpha": "α",
  "beta": "β",
  "gamma": "γ",
  "delta": "δ",
  "epsilon": "ε",
  "zeta": "ζ",
  "eta": "η",
  "theta": "θ",
  "iota": "ι",
  "kappa": "κ",
  "lambda": "λ",
  "mu": "μ",
  "nu": "ν",
  "xi": "ξ",
  "omicron": "ο",
  "pi": "π",
  "rho": "ρ",
  "sigmaf": "ς",
  "sigma": "σ",
  "tau": "τ",
  "upsilon": "υ",
  "phi": "φ",
  "chi": "χ",
  "psi": "ψ",
  "omega": "ω",
  "thetasym": "ϑ",
  "upsih": "ϒ",
  "piv": "ϖ",
  "bull": "•",
  "hellip": "…",
  "prime": "′",
  "Prime": "″",
  "oline": "‾",
  "frasl": "⁄",
  "weierp": "℘",
  "image": "ℑ",
  "real": "ℜ",
  "trade": "™",
  "alefsym": "ℵ",
  "larr": "←",
  "uarr": "↑",
  "rarr": "→",
  "darr": "↓",
  "harr": "↔",
  "crarr": "↵",
  "lArr": "⇐",
  "uArr": "⇑",
  "rArr": "⇒",
  "dArr": "⇓",
  "hArr": "⇔",
  "forall": "∀",
  "part": "∂",
  "exist": "∃",
  "empty": "∅",
  "nabla": "∇",
  "isin": "∈",
  "notin": "∉",
  "ni": "∋",
  "prod": "∏",
  "sum": "∑",
  "minus": "−",
  "lowast": "∗",
  "radic": "√",
  "prop": "∝",
  "infin": "∞",
  "ang": "∠",
  "and": "∧",
  "or": "∨",
  "cap": "∩",
  "cup": "∪",
  "int": "∫",
  "there4": "∴",
  "sim": "∼",
  "cong": "≅",
  "asymp": "≈",
  "ne": "≠",
  "equiv": "≡",
  "le": "≤",
  "ge": "≥",
  "sub": "⊂",
  "sup": "⊃",
  "nsub": "⊄",
  "sube": "⊆",
  "supe": "⊇",
  "oplus": "⊕",
  "otimes": "⊗",
  "perp": "⊥",
  "sdot": "⋅",
  "lceil": "⌈",
  "rceil": "⌉",
  "lfloor": "⌊",
  "rfloor": "⌋",
  "lang": "〈",
  "rang": "〉",
  "loz": "◊",
  "spades": "♠",
  "clubs": "♣",
  "hearts": "♥",
  "diams": "♦",
  "quot": "\"",
  "amp": "&",
  "lt": "<",
  "gt": ">",
  "OElig": "Œ",
  "oelig": "œ",
  "Scaron": "Š",
  "scaron": "š",
  "Yuml": "Ÿ",
  "circ": "ˆ",
  "tilde": "˜",
  "ensp": " ",
  "emsp": " ",
  "thinsp": " ",
  "zwnj": "‌",
  "zwj": "‍",
  "lrm": "‎",
  "rlm": "‏",
  "ndash": "–",
  "mdash": "—",
  "lsquo": "‘",
  "rsquo": "’",
  "sbquo": "‚",
  "ldquo": "“",
  "rdquo": "”",
  "bdquo": "„",
  "dagger": "†",
  "Dagger": "‡",
  "permil": "‰",
  "lsaquo": "‹",
  "rsaquo": "›",
  "euro": "€"
}

},{}],36:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module character-entities-html4
 * @fileoverview HTML4 character entity information.
 */

'use strict';

/* Expose. */
module.exports = require('./index.json');

},{"./index.json":35}],37:[function(require,module,exports){
module.exports={
  "AElig": "Æ",
  "AMP": "&",
  "Aacute": "Á",
  "Acirc": "Â",
  "Agrave": "À",
  "Aring": "Å",
  "Atilde": "Ã",
  "Auml": "Ä",
  "COPY": "©",
  "Ccedil": "Ç",
  "ETH": "Ð",
  "Eacute": "É",
  "Ecirc": "Ê",
  "Egrave": "È",
  "Euml": "Ë",
  "GT": ">",
  "Iacute": "Í",
  "Icirc": "Î",
  "Igrave": "Ì",
  "Iuml": "Ï",
  "LT": "<",
  "Ntilde": "Ñ",
  "Oacute": "Ó",
  "Ocirc": "Ô",
  "Ograve": "Ò",
  "Oslash": "Ø",
  "Otilde": "Õ",
  "Ouml": "Ö",
  "QUOT": "\"",
  "REG": "®",
  "THORN": "Þ",
  "Uacute": "Ú",
  "Ucirc": "Û",
  "Ugrave": "Ù",
  "Uuml": "Ü",
  "Yacute": "Ý",
  "aacute": "á",
  "acirc": "â",
  "acute": "´",
  "aelig": "æ",
  "agrave": "à",
  "amp": "&",
  "aring": "å",
  "atilde": "ã",
  "auml": "ä",
  "brvbar": "¦",
  "ccedil": "ç",
  "cedil": "¸",
  "cent": "¢",
  "copy": "©",
  "curren": "¤",
  "deg": "°",
  "divide": "÷",
  "eacute": "é",
  "ecirc": "ê",
  "egrave": "è",
  "eth": "ð",
  "euml": "ë",
  "frac12": "½",
  "frac14": "¼",
  "frac34": "¾",
  "gt": ">",
  "iacute": "í",
  "icirc": "î",
  "iexcl": "¡",
  "igrave": "ì",
  "iquest": "¿",
  "iuml": "ï",
  "laquo": "«",
  "lt": "<",
  "macr": "¯",
  "micro": "µ",
  "middot": "·",
  "nbsp": " ",
  "not": "¬",
  "ntilde": "ñ",
  "oacute": "ó",
  "ocirc": "ô",
  "ograve": "ò",
  "ordf": "ª",
  "ordm": "º",
  "oslash": "ø",
  "otilde": "õ",
  "ouml": "ö",
  "para": "¶",
  "plusmn": "±",
  "pound": "£",
  "quot": "\"",
  "raquo": "»",
  "reg": "®",
  "sect": "§",
  "shy": "­",
  "sup1": "¹",
  "sup2": "²",
  "sup3": "³",
  "szlig": "ß",
  "thorn": "þ",
  "times": "×",
  "uacute": "ú",
  "ucirc": "û",
  "ugrave": "ù",
  "uml": "¨",
  "uuml": "ü",
  "yacute": "ý",
  "yen": "¥",
  "yuml": "ÿ"
}

},{}],38:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module character-entities-legacy
 * @fileoverview HTML legacy character entity information.
 */

'use strict';

/* Expose. */
module.exports = require('./index.json');

},{"./index.json":37}],39:[function(require,module,exports){
module.exports={
  "AEli": "Æ",
  "AElig": "Æ",
  "AM": "&",
  "AMP": "&",
  "Aacut": "Á",
  "Aacute": "Á",
  "Abreve": "Ă",
  "Acir": "Â",
  "Acirc": "Â",
  "Acy": "А",
  "Afr": "𝔄",
  "Agrav": "À",
  "Agrave": "À",
  "Alpha": "Α",
  "Amacr": "Ā",
  "And": "⩓",
  "Aogon": "Ą",
  "Aopf": "𝔸",
  "ApplyFunction": "⁡",
  "Arin": "Å",
  "Aring": "Å",
  "Ascr": "𝒜",
  "Assign": "≔",
  "Atild": "Ã",
  "Atilde": "Ã",
  "Aum": "Ä",
  "Auml": "Ä",
  "Backslash": "∖",
  "Barv": "⫧",
  "Barwed": "⌆",
  "Bcy": "Б",
  "Because": "∵",
  "Bernoullis": "ℬ",
  "Beta": "Β",
  "Bfr": "𝔅",
  "Bopf": "𝔹",
  "Breve": "˘",
  "Bscr": "ℬ",
  "Bumpeq": "≎",
  "CHcy": "Ч",
  "COP": "©",
  "COPY": "©",
  "Cacute": "Ć",
  "Cap": "⋒",
  "CapitalDifferentialD": "ⅅ",
  "Cayleys": "ℭ",
  "Ccaron": "Č",
  "Ccedi": "Ç",
  "Ccedil": "Ç",
  "Ccirc": "Ĉ",
  "Cconint": "∰",
  "Cdot": "Ċ",
  "Cedilla": "¸",
  "CenterDot": "·",
  "Cfr": "ℭ",
  "Chi": "Χ",
  "CircleDot": "⊙",
  "CircleMinus": "⊖",
  "CirclePlus": "⊕",
  "CircleTimes": "⊗",
  "ClockwiseContourIntegral": "∲",
  "CloseCurlyDoubleQuote": "”",
  "CloseCurlyQuote": "’",
  "Colon": "∷",
  "Colone": "⩴",
  "Congruent": "≡",
  "Conint": "∯",
  "ContourIntegral": "∮",
  "Copf": "ℂ",
  "Coproduct": "∐",
  "CounterClockwiseContourIntegral": "∳",
  "Cross": "⨯",
  "Cscr": "𝒞",
  "Cup": "⋓",
  "CupCap": "≍",
  "DD": "ⅅ",
  "DDotrahd": "⤑",
  "DJcy": "Ђ",
  "DScy": "Ѕ",
  "DZcy": "Џ",
  "Dagger": "‡",
  "Darr": "↡",
  "Dashv": "⫤",
  "Dcaron": "Ď",
  "Dcy": "Д",
  "Del": "∇",
  "Delta": "Δ",
  "Dfr": "𝔇",
  "DiacriticalAcute": "´",
  "DiacriticalDot": "˙",
  "DiacriticalDoubleAcute": "˝",
  "DiacriticalGrave": "`",
  "DiacriticalTilde": "˜",
  "Diamond": "⋄",
  "DifferentialD": "ⅆ",
  "Dopf": "𝔻",
  "Dot": "¨",
  "DotDot": "⃜",
  "DotEqual": "≐",
  "DoubleContourIntegral": "∯",
  "DoubleDot": "¨",
  "DoubleDownArrow": "⇓",
  "DoubleLeftArrow": "⇐",
  "DoubleLeftRightArrow": "⇔",
  "DoubleLeftTee": "⫤",
  "DoubleLongLeftArrow": "⟸",
  "DoubleLongLeftRightArrow": "⟺",
  "DoubleLongRightArrow": "⟹",
  "DoubleRightArrow": "⇒",
  "DoubleRightTee": "⊨",
  "DoubleUpArrow": "⇑",
  "DoubleUpDownArrow": "⇕",
  "DoubleVerticalBar": "∥",
  "DownArrow": "↓",
  "DownArrowBar": "⤓",
  "DownArrowUpArrow": "⇵",
  "DownBreve": "̑",
  "DownLeftRightVector": "⥐",
  "DownLeftTeeVector": "⥞",
  "DownLeftVector": "↽",
  "DownLeftVectorBar": "⥖",
  "DownRightTeeVector": "⥟",
  "DownRightVector": "⇁",
  "DownRightVectorBar": "⥗",
  "DownTee": "⊤",
  "DownTeeArrow": "↧",
  "Downarrow": "⇓",
  "Dscr": "𝒟",
  "Dstrok": "Đ",
  "ENG": "Ŋ",
  "ET": "Ð",
  "ETH": "Ð",
  "Eacut": "É",
  "Eacute": "É",
  "Ecaron": "Ě",
  "Ecir": "Ê",
  "Ecirc": "Ê",
  "Ecy": "Э",
  "Edot": "Ė",
  "Efr": "𝔈",
  "Egrav": "È",
  "Egrave": "È",
  "Element": "∈",
  "Emacr": "Ē",
  "EmptySmallSquare": "◻",
  "EmptyVerySmallSquare": "▫",
  "Eogon": "Ę",
  "Eopf": "𝔼",
  "Epsilon": "Ε",
  "Equal": "⩵",
  "EqualTilde": "≂",
  "Equilibrium": "⇌",
  "Escr": "ℰ",
  "Esim": "⩳",
  "Eta": "Η",
  "Eum": "Ë",
  "Euml": "Ë",
  "Exists": "∃",
  "ExponentialE": "ⅇ",
  "Fcy": "Ф",
  "Ffr": "𝔉",
  "FilledSmallSquare": "◼",
  "FilledVerySmallSquare": "▪",
  "Fopf": "𝔽",
  "ForAll": "∀",
  "Fouriertrf": "ℱ",
  "Fscr": "ℱ",
  "GJcy": "Ѓ",
  "G": ">",
  "GT": ">",
  "Gamma": "Γ",
  "Gammad": "Ϝ",
  "Gbreve": "Ğ",
  "Gcedil": "Ģ",
  "Gcirc": "Ĝ",
  "Gcy": "Г",
  "Gdot": "Ġ",
  "Gfr": "𝔊",
  "Gg": "⋙",
  "Gopf": "𝔾",
  "GreaterEqual": "≥",
  "GreaterEqualLess": "⋛",
  "GreaterFullEqual": "≧",
  "GreaterGreater": "⪢",
  "GreaterLess": "≷",
  "GreaterSlantEqual": "⩾",
  "GreaterTilde": "≳",
  "Gscr": "𝒢",
  "Gt": "≫",
  "HARDcy": "Ъ",
  "Hacek": "ˇ",
  "Hat": "^",
  "Hcirc": "Ĥ",
  "Hfr": "ℌ",
  "HilbertSpace": "ℋ",
  "Hopf": "ℍ",
  "HorizontalLine": "─",
  "Hscr": "ℋ",
  "Hstrok": "Ħ",
  "HumpDownHump": "≎",
  "HumpEqual": "≏",
  "IEcy": "Е",
  "IJlig": "Ĳ",
  "IOcy": "Ё",
  "Iacut": "Í",
  "Iacute": "Í",
  "Icir": "Î",
  "Icirc": "Î",
  "Icy": "И",
  "Idot": "İ",
  "Ifr": "ℑ",
  "Igrav": "Ì",
  "Igrave": "Ì",
  "Im": "ℑ",
  "Imacr": "Ī",
  "ImaginaryI": "ⅈ",
  "Implies": "⇒",
  "Int": "∬",
  "Integral": "∫",
  "Intersection": "⋂",
  "InvisibleComma": "⁣",
  "InvisibleTimes": "⁢",
  "Iogon": "Į",
  "Iopf": "𝕀",
  "Iota": "Ι",
  "Iscr": "ℐ",
  "Itilde": "Ĩ",
  "Iukcy": "І",
  "Ium": "Ï",
  "Iuml": "Ï",
  "Jcirc": "Ĵ",
  "Jcy": "Й",
  "Jfr": "𝔍",
  "Jopf": "𝕁",
  "Jscr": "𝒥",
  "Jsercy": "Ј",
  "Jukcy": "Є",
  "KHcy": "Х",
  "KJcy": "Ќ",
  "Kappa": "Κ",
  "Kcedil": "Ķ",
  "Kcy": "К",
  "Kfr": "𝔎",
  "Kopf": "𝕂",
  "Kscr": "𝒦",
  "LJcy": "Љ",
  "L": "<",
  "LT": "<",
  "Lacute": "Ĺ",
  "Lambda": "Λ",
  "Lang": "⟪",
  "Laplacetrf": "ℒ",
  "Larr": "↞",
  "Lcaron": "Ľ",
  "Lcedil": "Ļ",
  "Lcy": "Л",
  "LeftAngleBracket": "⟨",
  "LeftArrow": "←",
  "LeftArrowBar": "⇤",
  "LeftArrowRightArrow": "⇆",
  "LeftCeiling": "⌈",
  "LeftDoubleBracket": "⟦",
  "LeftDownTeeVector": "⥡",
  "LeftDownVector": "⇃",
  "LeftDownVectorBar": "⥙",
  "LeftFloor": "⌊",
  "LeftRightArrow": "↔",
  "LeftRightVector": "⥎",
  "LeftTee": "⊣",
  "LeftTeeArrow": "↤",
  "LeftTeeVector": "⥚",
  "LeftTriangle": "⊲",
  "LeftTriangleBar": "⧏",
  "LeftTriangleEqual": "⊴",
  "LeftUpDownVector": "⥑",
  "LeftUpTeeVector": "⥠",
  "LeftUpVector": "↿",
  "LeftUpVectorBar": "⥘",
  "LeftVector": "↼",
  "LeftVectorBar": "⥒",
  "Leftarrow": "⇐",
  "Leftrightarrow": "⇔",
  "LessEqualGreater": "⋚",
  "LessFullEqual": "≦",
  "LessGreater": "≶",
  "LessLess": "⪡",
  "LessSlantEqual": "⩽",
  "LessTilde": "≲",
  "Lfr": "𝔏",
  "Ll": "⋘",
  "Lleftarrow": "⇚",
  "Lmidot": "Ŀ",
  "LongLeftArrow": "⟵",
  "LongLeftRightArrow": "⟷",
  "LongRightArrow": "⟶",
  "Longleftarrow": "⟸",
  "Longleftrightarrow": "⟺",
  "Longrightarrow": "⟹",
  "Lopf": "𝕃",
  "LowerLeftArrow": "↙",
  "LowerRightArrow": "↘",
  "Lscr": "ℒ",
  "Lsh": "↰",
  "Lstrok": "Ł",
  "Lt": "≪",
  "Map": "⤅",
  "Mcy": "М",
  "MediumSpace": " ",
  "Mellintrf": "ℳ",
  "Mfr": "𝔐",
  "MinusPlus": "∓",
  "Mopf": "𝕄",
  "Mscr": "ℳ",
  "Mu": "Μ",
  "NJcy": "Њ",
  "Nacute": "Ń",
  "Ncaron": "Ň",
  "Ncedil": "Ņ",
  "Ncy": "Н",
  "NegativeMediumSpace": "​",
  "NegativeThickSpace": "​",
  "NegativeThinSpace": "​",
  "NegativeVeryThinSpace": "​",
  "NestedGreaterGreater": "≫",
  "NestedLessLess": "≪",
  "NewLine": "\n",
  "Nfr": "𝔑",
  "NoBreak": "⁠",
  "NonBreakingSpace": " ",
  "Nopf": "ℕ",
  "Not": "⫬",
  "NotCongruent": "≢",
  "NotCupCap": "≭",
  "NotDoubleVerticalBar": "∦",
  "NotElement": "∉",
  "NotEqual": "≠",
  "NotEqualTilde": "≂̸",
  "NotExists": "∄",
  "NotGreater": "≯",
  "NotGreaterEqual": "≱",
  "NotGreaterFullEqual": "≧̸",
  "NotGreaterGreater": "≫̸",
  "NotGreaterLess": "≹",
  "NotGreaterSlantEqual": "⩾̸",
  "NotGreaterTilde": "≵",
  "NotHumpDownHump": "≎̸",
  "NotHumpEqual": "≏̸",
  "NotLeftTriangle": "⋪",
  "NotLeftTriangleBar": "⧏̸",
  "NotLeftTriangleEqual": "⋬",
  "NotLess": "≮",
  "NotLessEqual": "≰",
  "NotLessGreater": "≸",
  "NotLessLess": "≪̸",
  "NotLessSlantEqual": "⩽̸",
  "NotLessTilde": "≴",
  "NotNestedGreaterGreater": "⪢̸",
  "NotNestedLessLess": "⪡̸",
  "NotPrecedes": "⊀",
  "NotPrecedesEqual": "⪯̸",
  "NotPrecedesSlantEqual": "⋠",
  "NotReverseElement": "∌",
  "NotRightTriangle": "⋫",
  "NotRightTriangleBar": "⧐̸",
  "NotRightTriangleEqual": "⋭",
  "NotSquareSubset": "⊏̸",
  "NotSquareSubsetEqual": "⋢",
  "NotSquareSuperset": "⊐̸",
  "NotSquareSupersetEqual": "⋣",
  "NotSubset": "⊂⃒",
  "NotSubsetEqual": "⊈",
  "NotSucceeds": "⊁",
  "NotSucceedsEqual": "⪰̸",
  "NotSucceedsSlantEqual": "⋡",
  "NotSucceedsTilde": "≿̸",
  "NotSuperset": "⊃⃒",
  "NotSupersetEqual": "⊉",
  "NotTilde": "≁",
  "NotTildeEqual": "≄",
  "NotTildeFullEqual": "≇",
  "NotTildeTilde": "≉",
  "NotVerticalBar": "∤",
  "Nscr": "𝒩",
  "Ntild": "Ñ",
  "Ntilde": "Ñ",
  "Nu": "Ν",
  "OElig": "Œ",
  "Oacut": "Ó",
  "Oacute": "Ó",
  "Ocir": "Ô",
  "Ocirc": "Ô",
  "Ocy": "О",
  "Odblac": "Ő",
  "Ofr": "𝔒",
  "Ograv": "Ò",
  "Ograve": "Ò",
  "Omacr": "Ō",
  "Omega": "Ω",
  "Omicron": "Ο",
  "Oopf": "𝕆",
  "OpenCurlyDoubleQuote": "“",
  "OpenCurlyQuote": "‘",
  "Or": "⩔",
  "Oscr": "𝒪",
  "Oslas": "Ø",
  "Oslash": "Ø",
  "Otild": "Õ",
  "Otilde": "Õ",
  "Otimes": "⨷",
  "Oum": "Ö",
  "Ouml": "Ö",
  "OverBar": "‾",
  "OverBrace": "⏞",
  "OverBracket": "⎴",
  "OverParenthesis": "⏜",
  "PartialD": "∂",
  "Pcy": "П",
  "Pfr": "𝔓",
  "Phi": "Φ",
  "Pi": "Π",
  "PlusMinus": "±",
  "Poincareplane": "ℌ",
  "Popf": "ℙ",
  "Pr": "⪻",
  "Precedes": "≺",
  "PrecedesEqual": "⪯",
  "PrecedesSlantEqual": "≼",
  "PrecedesTilde": "≾",
  "Prime": "″",
  "Product": "∏",
  "Proportion": "∷",
  "Proportional": "∝",
  "Pscr": "𝒫",
  "Psi": "Ψ",
  "QUO": "\"",
  "QUOT": "\"",
  "Qfr": "𝔔",
  "Qopf": "ℚ",
  "Qscr": "𝒬",
  "RBarr": "⤐",
  "RE": "®",
  "REG": "®",
  "Racute": "Ŕ",
  "Rang": "⟫",
  "Rarr": "↠",
  "Rarrtl": "⤖",
  "Rcaron": "Ř",
  "Rcedil": "Ŗ",
  "Rcy": "Р",
  "Re": "ℜ",
  "ReverseElement": "∋",
  "ReverseEquilibrium": "⇋",
  "ReverseUpEquilibrium": "⥯",
  "Rfr": "ℜ",
  "Rho": "Ρ",
  "RightAngleBracket": "⟩",
  "RightArrow": "→",
  "RightArrowBar": "⇥",
  "RightArrowLeftArrow": "⇄",
  "RightCeiling": "⌉",
  "RightDoubleBracket": "⟧",
  "RightDownTeeVector": "⥝",
  "RightDownVector": "⇂",
  "RightDownVectorBar": "⥕",
  "RightFloor": "⌋",
  "RightTee": "⊢",
  "RightTeeArrow": "↦",
  "RightTeeVector": "⥛",
  "RightTriangle": "⊳",
  "RightTriangleBar": "⧐",
  "RightTriangleEqual": "⊵",
  "RightUpDownVector": "⥏",
  "RightUpTeeVector": "⥜",
  "RightUpVector": "↾",
  "RightUpVectorBar": "⥔",
  "RightVector": "⇀",
  "RightVectorBar": "⥓",
  "Rightarrow": "⇒",
  "Ropf": "ℝ",
  "RoundImplies": "⥰",
  "Rrightarrow": "⇛",
  "Rscr": "ℛ",
  "Rsh": "↱",
  "RuleDelayed": "⧴",
  "SHCHcy": "Щ",
  "SHcy": "Ш",
  "SOFTcy": "Ь",
  "Sacute": "Ś",
  "Sc": "⪼",
  "Scaron": "Š",
  "Scedil": "Ş",
  "Scirc": "Ŝ",
  "Scy": "С",
  "Sfr": "𝔖",
  "ShortDownArrow": "↓",
  "ShortLeftArrow": "←",
  "ShortRightArrow": "→",
  "ShortUpArrow": "↑",
  "Sigma": "Σ",
  "SmallCircle": "∘",
  "Sopf": "𝕊",
  "Sqrt": "√",
  "Square": "□",
  "SquareIntersection": "⊓",
  "SquareSubset": "⊏",
  "SquareSubsetEqual": "⊑",
  "SquareSuperset": "⊐",
  "SquareSupersetEqual": "⊒",
  "SquareUnion": "⊔",
  "Sscr": "𝒮",
  "Star": "⋆",
  "Sub": "⋐",
  "Subset": "⋐",
  "SubsetEqual": "⊆",
  "Succeeds": "≻",
  "SucceedsEqual": "⪰",
  "SucceedsSlantEqual": "≽",
  "SucceedsTilde": "≿",
  "SuchThat": "∋",
  "Sum": "∑",
  "Sup": "⋑",
  "Superset": "⊃",
  "SupersetEqual": "⊇",
  "Supset": "⋑",
  "THOR": "Þ",
  "THORN": "Þ",
  "TRADE": "™",
  "TSHcy": "Ћ",
  "TScy": "Ц",
  "Tab": "\t",
  "Tau": "Τ",
  "Tcaron": "Ť",
  "Tcedil": "Ţ",
  "Tcy": "Т",
  "Tfr": "𝔗",
  "Therefore": "∴",
  "Theta": "Θ",
  "ThickSpace": "  ",
  "ThinSpace": " ",
  "Tilde": "∼",
  "TildeEqual": "≃",
  "TildeFullEqual": "≅",
  "TildeTilde": "≈",
  "Topf": "𝕋",
  "TripleDot": "⃛",
  "Tscr": "𝒯",
  "Tstrok": "Ŧ",
  "Uacut": "Ú",
  "Uacute": "Ú",
  "Uarr": "↟",
  "Uarrocir": "⥉",
  "Ubrcy": "Ў",
  "Ubreve": "Ŭ",
  "Ucir": "Û",
  "Ucirc": "Û",
  "Ucy": "У",
  "Udblac": "Ű",
  "Ufr": "𝔘",
  "Ugrav": "Ù",
  "Ugrave": "Ù",
  "Umacr": "Ū",
  "UnderBar": "_",
  "UnderBrace": "⏟",
  "UnderBracket": "⎵",
  "UnderParenthesis": "⏝",
  "Union": "⋃",
  "UnionPlus": "⊎",
  "Uogon": "Ų",
  "Uopf": "𝕌",
  "UpArrow": "↑",
  "UpArrowBar": "⤒",
  "UpArrowDownArrow": "⇅",
  "UpDownArrow": "↕",
  "UpEquilibrium": "⥮",
  "UpTee": "⊥",
  "UpTeeArrow": "↥",
  "Uparrow": "⇑",
  "Updownarrow": "⇕",
  "UpperLeftArrow": "↖",
  "UpperRightArrow": "↗",
  "Upsi": "ϒ",
  "Upsilon": "Υ",
  "Uring": "Ů",
  "Uscr": "𝒰",
  "Utilde": "Ũ",
  "Uum": "Ü",
  "Uuml": "Ü",
  "VDash": "⊫",
  "Vbar": "⫫",
  "Vcy": "В",
  "Vdash": "⊩",
  "Vdashl": "⫦",
  "Vee": "⋁",
  "Verbar": "‖",
  "Vert": "‖",
  "VerticalBar": "∣",
  "VerticalLine": "|",
  "VerticalSeparator": "❘",
  "VerticalTilde": "≀",
  "VeryThinSpace": " ",
  "Vfr": "𝔙",
  "Vopf": "𝕍",
  "Vscr": "𝒱",
  "Vvdash": "⊪",
  "Wcirc": "Ŵ",
  "Wedge": "⋀",
  "Wfr": "𝔚",
  "Wopf": "𝕎",
  "Wscr": "𝒲",
  "Xfr": "𝔛",
  "Xi": "Ξ",
  "Xopf": "𝕏",
  "Xscr": "𝒳",
  "YAcy": "Я",
  "YIcy": "Ї",
  "YUcy": "Ю",
  "Yacut": "Ý",
  "Yacute": "Ý",
  "Ycirc": "Ŷ",
  "Ycy": "Ы",
  "Yfr": "𝔜",
  "Yopf": "𝕐",
  "Yscr": "𝒴",
  "Yuml": "Ÿ",
  "ZHcy": "Ж",
  "Zacute": "Ź",
  "Zcaron": "Ž",
  "Zcy": "З",
  "Zdot": "Ż",
  "ZeroWidthSpace": "​",
  "Zeta": "Ζ",
  "Zfr": "ℨ",
  "Zopf": "ℤ",
  "Zscr": "𝒵",
  "aacut": "á",
  "aacute": "á",
  "abreve": "ă",
  "ac": "∾",
  "acE": "∾̳",
  "acd": "∿",
  "acir": "â",
  "acirc": "â",
  "acut": "´",
  "acute": "´",
  "acy": "а",
  "aeli": "æ",
  "aelig": "æ",
  "af": "⁡",
  "afr": "𝔞",
  "agrav": "à",
  "agrave": "à",
  "alefsym": "ℵ",
  "aleph": "ℵ",
  "alpha": "α",
  "amacr": "ā",
  "amalg": "⨿",
  "am": "&",
  "amp": "&",
  "and": "∧",
  "andand": "⩕",
  "andd": "⩜",
  "andslope": "⩘",
  "andv": "⩚",
  "ang": "∠",
  "ange": "⦤",
  "angle": "∠",
  "angmsd": "∡",
  "angmsdaa": "⦨",
  "angmsdab": "⦩",
  "angmsdac": "⦪",
  "angmsdad": "⦫",
  "angmsdae": "⦬",
  "angmsdaf": "⦭",
  "angmsdag": "⦮",
  "angmsdah": "⦯",
  "angrt": "∟",
  "angrtvb": "⊾",
  "angrtvbd": "⦝",
  "angsph": "∢",
  "angst": "Å",
  "angzarr": "⍼",
  "aogon": "ą",
  "aopf": "𝕒",
  "ap": "≈",
  "apE": "⩰",
  "apacir": "⩯",
  "ape": "≊",
  "apid": "≋",
  "apos": "'",
  "approx": "≈",
  "approxeq": "≊",
  "arin": "å",
  "aring": "å",
  "ascr": "𝒶",
  "ast": "*",
  "asymp": "≈",
  "asympeq": "≍",
  "atild": "ã",
  "atilde": "ã",
  "aum": "ä",
  "auml": "ä",
  "awconint": "∳",
  "awint": "⨑",
  "bNot": "⫭",
  "backcong": "≌",
  "backepsilon": "϶",
  "backprime": "‵",
  "backsim": "∽",
  "backsimeq": "⋍",
  "barvee": "⊽",
  "barwed": "⌅",
  "barwedge": "⌅",
  "bbrk": "⎵",
  "bbrktbrk": "⎶",
  "bcong": "≌",
  "bcy": "б",
  "bdquo": "„",
  "becaus": "∵",
  "because": "∵",
  "bemptyv": "⦰",
  "bepsi": "϶",
  "bernou": "ℬ",
  "beta": "β",
  "beth": "ℶ",
  "between": "≬",
  "bfr": "𝔟",
  "bigcap": "⋂",
  "bigcirc": "◯",
  "bigcup": "⋃",
  "bigodot": "⨀",
  "bigoplus": "⨁",
  "bigotimes": "⨂",
  "bigsqcup": "⨆",
  "bigstar": "★",
  "bigtriangledown": "▽",
  "bigtriangleup": "△",
  "biguplus": "⨄",
  "bigvee": "⋁",
  "bigwedge": "⋀",
  "bkarow": "⤍",
  "blacklozenge": "⧫",
  "blacksquare": "▪",
  "blacktriangle": "▴",
  "blacktriangledown": "▾",
  "blacktriangleleft": "◂",
  "blacktriangleright": "▸",
  "blank": "␣",
  "blk12": "▒",
  "blk14": "░",
  "blk34": "▓",
  "block": "█",
  "bne": "=⃥",
  "bnequiv": "≡⃥",
  "bnot": "⌐",
  "bopf": "𝕓",
  "bot": "⊥",
  "bottom": "⊥",
  "bowtie": "⋈",
  "boxDL": "╗",
  "boxDR": "╔",
  "boxDl": "╖",
  "boxDr": "╓",
  "boxH": "═",
  "boxHD": "╦",
  "boxHU": "╩",
  "boxHd": "╤",
  "boxHu": "╧",
  "boxUL": "╝",
  "boxUR": "╚",
  "boxUl": "╜",
  "boxUr": "╙",
  "boxV": "║",
  "boxVH": "╬",
  "boxVL": "╣",
  "boxVR": "╠",
  "boxVh": "╫",
  "boxVl": "╢",
  "boxVr": "╟",
  "boxbox": "⧉",
  "boxdL": "╕",
  "boxdR": "╒",
  "boxdl": "┐",
  "boxdr": "┌",
  "boxh": "─",
  "boxhD": "╥",
  "boxhU": "╨",
  "boxhd": "┬",
  "boxhu": "┴",
  "boxminus": "⊟",
  "boxplus": "⊞",
  "boxtimes": "⊠",
  "boxuL": "╛",
  "boxuR": "╘",
  "boxul": "┘",
  "boxur": "└",
  "boxv": "│",
  "boxvH": "╪",
  "boxvL": "╡",
  "boxvR": "╞",
  "boxvh": "┼",
  "boxvl": "┤",
  "boxvr": "├",
  "bprime": "‵",
  "breve": "˘",
  "brvba": "¦",
  "brvbar": "¦",
  "bscr": "𝒷",
  "bsemi": "⁏",
  "bsim": "∽",
  "bsime": "⋍",
  "bsol": "\\",
  "bsolb": "⧅",
  "bsolhsub": "⟈",
  "bull": "•",
  "bullet": "•",
  "bump": "≎",
  "bumpE": "⪮",
  "bumpe": "≏",
  "bumpeq": "≏",
  "cacute": "ć",
  "cap": "∩",
  "capand": "⩄",
  "capbrcup": "⩉",
  "capcap": "⩋",
  "capcup": "⩇",
  "capdot": "⩀",
  "caps": "∩︀",
  "caret": "⁁",
  "caron": "ˇ",
  "ccaps": "⩍",
  "ccaron": "č",
  "ccedi": "ç",
  "ccedil": "ç",
  "ccirc": "ĉ",
  "ccups": "⩌",
  "ccupssm": "⩐",
  "cdot": "ċ",
  "cedi": "¸",
  "cedil": "¸",
  "cemptyv": "⦲",
  "cen": "¢",
  "cent": "¢",
  "centerdot": "·",
  "cfr": "𝔠",
  "chcy": "ч",
  "check": "✓",
  "checkmark": "✓",
  "chi": "χ",
  "cir": "○",
  "cirE": "⧃",
  "circ": "ˆ",
  "circeq": "≗",
  "circlearrowleft": "↺",
  "circlearrowright": "↻",
  "circledR": "®",
  "circledS": "Ⓢ",
  "circledast": "⊛",
  "circledcirc": "⊚",
  "circleddash": "⊝",
  "cire": "≗",
  "cirfnint": "⨐",
  "cirmid": "⫯",
  "cirscir": "⧂",
  "clubs": "♣",
  "clubsuit": "♣",
  "colon": ":",
  "colone": "≔",
  "coloneq": "≔",
  "comma": ",",
  "commat": "@",
  "comp": "∁",
  "compfn": "∘",
  "complement": "∁",
  "complexes": "ℂ",
  "cong": "≅",
  "congdot": "⩭",
  "conint": "∮",
  "copf": "𝕔",
  "coprod": "∐",
  "cop": "©",
  "copy": "©",
  "copysr": "℗",
  "crarr": "↵",
  "cross": "✗",
  "cscr": "𝒸",
  "csub": "⫏",
  "csube": "⫑",
  "csup": "⫐",
  "csupe": "⫒",
  "ctdot": "⋯",
  "cudarrl": "⤸",
  "cudarrr": "⤵",
  "cuepr": "⋞",
  "cuesc": "⋟",
  "cularr": "↶",
  "cularrp": "⤽",
  "cup": "∪",
  "cupbrcap": "⩈",
  "cupcap": "⩆",
  "cupcup": "⩊",
  "cupdot": "⊍",
  "cupor": "⩅",
  "cups": "∪︀",
  "curarr": "↷",
  "curarrm": "⤼",
  "curlyeqprec": "⋞",
  "curlyeqsucc": "⋟",
  "curlyvee": "⋎",
  "curlywedge": "⋏",
  "curre": "¤",
  "curren": "¤",
  "curvearrowleft": "↶",
  "curvearrowright": "↷",
  "cuvee": "⋎",
  "cuwed": "⋏",
  "cwconint": "∲",
  "cwint": "∱",
  "cylcty": "⌭",
  "dArr": "⇓",
  "dHar": "⥥",
  "dagger": "†",
  "daleth": "ℸ",
  "darr": "↓",
  "dash": "‐",
  "dashv": "⊣",
  "dbkarow": "⤏",
  "dblac": "˝",
  "dcaron": "ď",
  "dcy": "д",
  "dd": "ⅆ",
  "ddagger": "‡",
  "ddarr": "⇊",
  "ddotseq": "⩷",
  "de": "°",
  "deg": "°",
  "delta": "δ",
  "demptyv": "⦱",
  "dfisht": "⥿",
  "dfr": "𝔡",
  "dharl": "⇃",
  "dharr": "⇂",
  "diam": "⋄",
  "diamond": "⋄",
  "diamondsuit": "♦",
  "diams": "♦",
  "die": "¨",
  "digamma": "ϝ",
  "disin": "⋲",
  "div": "÷",
  "divid": "÷",
  "divide": "÷",
  "divideontimes": "⋇",
  "divonx": "⋇",
  "djcy": "ђ",
  "dlcorn": "⌞",
  "dlcrop": "⌍",
  "dollar": "$",
  "dopf": "𝕕",
  "dot": "˙",
  "doteq": "≐",
  "doteqdot": "≑",
  "dotminus": "∸",
  "dotplus": "∔",
  "dotsquare": "⊡",
  "doublebarwedge": "⌆",
  "downarrow": "↓",
  "downdownarrows": "⇊",
  "downharpoonleft": "⇃",
  "downharpoonright": "⇂",
  "drbkarow": "⤐",
  "drcorn": "⌟",
  "drcrop": "⌌",
  "dscr": "𝒹",
  "dscy": "ѕ",
  "dsol": "⧶",
  "dstrok": "đ",
  "dtdot": "⋱",
  "dtri": "▿",
  "dtrif": "▾",
  "duarr": "⇵",
  "duhar": "⥯",
  "dwangle": "⦦",
  "dzcy": "џ",
  "dzigrarr": "⟿",
  "eDDot": "⩷",
  "eDot": "≑",
  "eacut": "é",
  "eacute": "é",
  "easter": "⩮",
  "ecaron": "ě",
  "ecir": "ê",
  "ecirc": "ê",
  "ecolon": "≕",
  "ecy": "э",
  "edot": "ė",
  "ee": "ⅇ",
  "efDot": "≒",
  "efr": "𝔢",
  "eg": "⪚",
  "egrav": "è",
  "egrave": "è",
  "egs": "⪖",
  "egsdot": "⪘",
  "el": "⪙",
  "elinters": "⏧",
  "ell": "ℓ",
  "els": "⪕",
  "elsdot": "⪗",
  "emacr": "ē",
  "empty": "∅",
  "emptyset": "∅",
  "emptyv": "∅",
  "emsp13": " ",
  "emsp14": " ",
  "emsp": " ",
  "eng": "ŋ",
  "ensp": " ",
  "eogon": "ę",
  "eopf": "𝕖",
  "epar": "⋕",
  "eparsl": "⧣",
  "eplus": "⩱",
  "epsi": "ε",
  "epsilon": "ε",
  "epsiv": "ϵ",
  "eqcirc": "≖",
  "eqcolon": "≕",
  "eqsim": "≂",
  "eqslantgtr": "⪖",
  "eqslantless": "⪕",
  "equals": "=",
  "equest": "≟",
  "equiv": "≡",
  "equivDD": "⩸",
  "eqvparsl": "⧥",
  "erDot": "≓",
  "erarr": "⥱",
  "escr": "ℯ",
  "esdot": "≐",
  "esim": "≂",
  "eta": "η",
  "et": "ð",
  "eth": "ð",
  "eum": "ë",
  "euml": "ë",
  "euro": "€",
  "excl": "!",
  "exist": "∃",
  "expectation": "ℰ",
  "exponentiale": "ⅇ",
  "fallingdotseq": "≒",
  "fcy": "ф",
  "female": "♀",
  "ffilig": "ﬃ",
  "fflig": "ﬀ",
  "ffllig": "ﬄ",
  "ffr": "𝔣",
  "filig": "ﬁ",
  "fjlig": "fj",
  "flat": "♭",
  "fllig": "ﬂ",
  "fltns": "▱",
  "fnof": "ƒ",
  "fopf": "𝕗",
  "forall": "∀",
  "fork": "⋔",
  "forkv": "⫙",
  "fpartint": "⨍",
  "frac1": "¼",
  "frac12": "½",
  "frac13": "⅓",
  "frac14": "¼",
  "frac15": "⅕",
  "frac16": "⅙",
  "frac18": "⅛",
  "frac23": "⅔",
  "frac25": "⅖",
  "frac3": "¾",
  "frac34": "¾",
  "frac35": "⅗",
  "frac38": "⅜",
  "frac45": "⅘",
  "frac56": "⅚",
  "frac58": "⅝",
  "frac78": "⅞",
  "frasl": "⁄",
  "frown": "⌢",
  "fscr": "𝒻",
  "gE": "≧",
  "gEl": "⪌",
  "gacute": "ǵ",
  "gamma": "γ",
  "gammad": "ϝ",
  "gap": "⪆",
  "gbreve": "ğ",
  "gcirc": "ĝ",
  "gcy": "г",
  "gdot": "ġ",
  "ge": "≥",
  "gel": "⋛",
  "geq": "≥",
  "geqq": "≧",
  "geqslant": "⩾",
  "ges": "⩾",
  "gescc": "⪩",
  "gesdot": "⪀",
  "gesdoto": "⪂",
  "gesdotol": "⪄",
  "gesl": "⋛︀",
  "gesles": "⪔",
  "gfr": "𝔤",
  "gg": "≫",
  "ggg": "⋙",
  "gimel": "ℷ",
  "gjcy": "ѓ",
  "gl": "≷",
  "glE": "⪒",
  "gla": "⪥",
  "glj": "⪤",
  "gnE": "≩",
  "gnap": "⪊",
  "gnapprox": "⪊",
  "gne": "⪈",
  "gneq": "⪈",
  "gneqq": "≩",
  "gnsim": "⋧",
  "gopf": "𝕘",
  "grave": "`",
  "gscr": "ℊ",
  "gsim": "≳",
  "gsime": "⪎",
  "gsiml": "⪐",
  "g": ">",
  "gt": ">",
  "gtcc": "⪧",
  "gtcir": "⩺",
  "gtdot": "⋗",
  "gtlPar": "⦕",
  "gtquest": "⩼",
  "gtrapprox": "⪆",
  "gtrarr": "⥸",
  "gtrdot": "⋗",
  "gtreqless": "⋛",
  "gtreqqless": "⪌",
  "gtrless": "≷",
  "gtrsim": "≳",
  "gvertneqq": "≩︀",
  "gvnE": "≩︀",
  "hArr": "⇔",
  "hairsp": " ",
  "half": "½",
  "hamilt": "ℋ",
  "hardcy": "ъ",
  "harr": "↔",
  "harrcir": "⥈",
  "harrw": "↭",
  "hbar": "ℏ",
  "hcirc": "ĥ",
  "hearts": "♥",
  "heartsuit": "♥",
  "hellip": "…",
  "hercon": "⊹",
  "hfr": "𝔥",
  "hksearow": "⤥",
  "hkswarow": "⤦",
  "hoarr": "⇿",
  "homtht": "∻",
  "hookleftarrow": "↩",
  "hookrightarrow": "↪",
  "hopf": "𝕙",
  "horbar": "―",
  "hscr": "𝒽",
  "hslash": "ℏ",
  "hstrok": "ħ",
  "hybull": "⁃",
  "hyphen": "‐",
  "iacut": "í",
  "iacute": "í",
  "ic": "⁣",
  "icir": "î",
  "icirc": "î",
  "icy": "и",
  "iecy": "е",
  "iexc": "¡",
  "iexcl": "¡",
  "iff": "⇔",
  "ifr": "𝔦",
  "igrav": "ì",
  "igrave": "ì",
  "ii": "ⅈ",
  "iiiint": "⨌",
  "iiint": "∭",
  "iinfin": "⧜",
  "iiota": "℩",
  "ijlig": "ĳ",
  "imacr": "ī",
  "image": "ℑ",
  "imagline": "ℐ",
  "imagpart": "ℑ",
  "imath": "ı",
  "imof": "⊷",
  "imped": "Ƶ",
  "in": "∈",
  "incare": "℅",
  "infin": "∞",
  "infintie": "⧝",
  "inodot": "ı",
  "int": "∫",
  "intcal": "⊺",
  "integers": "ℤ",
  "intercal": "⊺",
  "intlarhk": "⨗",
  "intprod": "⨼",
  "iocy": "ё",
  "iogon": "į",
  "iopf": "𝕚",
  "iota": "ι",
  "iprod": "⨼",
  "iques": "¿",
  "iquest": "¿",
  "iscr": "𝒾",
  "isin": "∈",
  "isinE": "⋹",
  "isindot": "⋵",
  "isins": "⋴",
  "isinsv": "⋳",
  "isinv": "∈",
  "it": "⁢",
  "itilde": "ĩ",
  "iukcy": "і",
  "ium": "ï",
  "iuml": "ï",
  "jcirc": "ĵ",
  "jcy": "й",
  "jfr": "𝔧",
  "jmath": "ȷ",
  "jopf": "𝕛",
  "jscr": "𝒿",
  "jsercy": "ј",
  "jukcy": "є",
  "kappa": "κ",
  "kappav": "ϰ",
  "kcedil": "ķ",
  "kcy": "к",
  "kfr": "𝔨",
  "kgreen": "ĸ",
  "khcy": "х",
  "kjcy": "ќ",
  "kopf": "𝕜",
  "kscr": "𝓀",
  "lAarr": "⇚",
  "lArr": "⇐",
  "lAtail": "⤛",
  "lBarr": "⤎",
  "lE": "≦",
  "lEg": "⪋",
  "lHar": "⥢",
  "lacute": "ĺ",
  "laemptyv": "⦴",
  "lagran": "ℒ",
  "lambda": "λ",
  "lang": "⟨",
  "langd": "⦑",
  "langle": "⟨",
  "lap": "⪅",
  "laqu": "«",
  "laquo": "«",
  "larr": "←",
  "larrb": "⇤",
  "larrbfs": "⤟",
  "larrfs": "⤝",
  "larrhk": "↩",
  "larrlp": "↫",
  "larrpl": "⤹",
  "larrsim": "⥳",
  "larrtl": "↢",
  "lat": "⪫",
  "latail": "⤙",
  "late": "⪭",
  "lates": "⪭︀",
  "lbarr": "⤌",
  "lbbrk": "❲",
  "lbrace": "{",
  "lbrack": "[",
  "lbrke": "⦋",
  "lbrksld": "⦏",
  "lbrkslu": "⦍",
  "lcaron": "ľ",
  "lcedil": "ļ",
  "lceil": "⌈",
  "lcub": "{",
  "lcy": "л",
  "ldca": "⤶",
  "ldquo": "“",
  "ldquor": "„",
  "ldrdhar": "⥧",
  "ldrushar": "⥋",
  "ldsh": "↲",
  "le": "≤",
  "leftarrow": "←",
  "leftarrowtail": "↢",
  "leftharpoondown": "↽",
  "leftharpoonup": "↼",
  "leftleftarrows": "⇇",
  "leftrightarrow": "↔",
  "leftrightarrows": "⇆",
  "leftrightharpoons": "⇋",
  "leftrightsquigarrow": "↭",
  "leftthreetimes": "⋋",
  "leg": "⋚",
  "leq": "≤",
  "leqq": "≦",
  "leqslant": "⩽",
  "les": "⩽",
  "lescc": "⪨",
  "lesdot": "⩿",
  "lesdoto": "⪁",
  "lesdotor": "⪃",
  "lesg": "⋚︀",
  "lesges": "⪓",
  "lessapprox": "⪅",
  "lessdot": "⋖",
  "lesseqgtr": "⋚",
  "lesseqqgtr": "⪋",
  "lessgtr": "≶",
  "lesssim": "≲",
  "lfisht": "⥼",
  "lfloor": "⌊",
  "lfr": "𝔩",
  "lg": "≶",
  "lgE": "⪑",
  "lhard": "↽",
  "lharu": "↼",
  "lharul": "⥪",
  "lhblk": "▄",
  "ljcy": "љ",
  "ll": "≪",
  "llarr": "⇇",
  "llcorner": "⌞",
  "llhard": "⥫",
  "lltri": "◺",
  "lmidot": "ŀ",
  "lmoust": "⎰",
  "lmoustache": "⎰",
  "lnE": "≨",
  "lnap": "⪉",
  "lnapprox": "⪉",
  "lne": "⪇",
  "lneq": "⪇",
  "lneqq": "≨",
  "lnsim": "⋦",
  "loang": "⟬",
  "loarr": "⇽",
  "lobrk": "⟦",
  "longleftarrow": "⟵",
  "longleftrightarrow": "⟷",
  "longmapsto": "⟼",
  "longrightarrow": "⟶",
  "looparrowleft": "↫",
  "looparrowright": "↬",
  "lopar": "⦅",
  "lopf": "𝕝",
  "loplus": "⨭",
  "lotimes": "⨴",
  "lowast": "∗",
  "lowbar": "_",
  "loz": "◊",
  "lozenge": "◊",
  "lozf": "⧫",
  "lpar": "(",
  "lparlt": "⦓",
  "lrarr": "⇆",
  "lrcorner": "⌟",
  "lrhar": "⇋",
  "lrhard": "⥭",
  "lrm": "‎",
  "lrtri": "⊿",
  "lsaquo": "‹",
  "lscr": "𝓁",
  "lsh": "↰",
  "lsim": "≲",
  "lsime": "⪍",
  "lsimg": "⪏",
  "lsqb": "[",
  "lsquo": "‘",
  "lsquor": "‚",
  "lstrok": "ł",
  "l": "<",
  "lt": "<",
  "ltcc": "⪦",
  "ltcir": "⩹",
  "ltdot": "⋖",
  "lthree": "⋋",
  "ltimes": "⋉",
  "ltlarr": "⥶",
  "ltquest": "⩻",
  "ltrPar": "⦖",
  "ltri": "◃",
  "ltrie": "⊴",
  "ltrif": "◂",
  "lurdshar": "⥊",
  "luruhar": "⥦",
  "lvertneqq": "≨︀",
  "lvnE": "≨︀",
  "mDDot": "∺",
  "mac": "¯",
  "macr": "¯",
  "male": "♂",
  "malt": "✠",
  "maltese": "✠",
  "map": "↦",
  "mapsto": "↦",
  "mapstodown": "↧",
  "mapstoleft": "↤",
  "mapstoup": "↥",
  "marker": "▮",
  "mcomma": "⨩",
  "mcy": "м",
  "mdash": "—",
  "measuredangle": "∡",
  "mfr": "𝔪",
  "mho": "℧",
  "micr": "µ",
  "micro": "µ",
  "mid": "∣",
  "midast": "*",
  "midcir": "⫰",
  "middo": "·",
  "middot": "·",
  "minus": "−",
  "minusb": "⊟",
  "minusd": "∸",
  "minusdu": "⨪",
  "mlcp": "⫛",
  "mldr": "…",
  "mnplus": "∓",
  "models": "⊧",
  "mopf": "𝕞",
  "mp": "∓",
  "mscr": "𝓂",
  "mstpos": "∾",
  "mu": "μ",
  "multimap": "⊸",
  "mumap": "⊸",
  "nGg": "⋙̸",
  "nGt": "≫⃒",
  "nGtv": "≫̸",
  "nLeftarrow": "⇍",
  "nLeftrightarrow": "⇎",
  "nLl": "⋘̸",
  "nLt": "≪⃒",
  "nLtv": "≪̸",
  "nRightarrow": "⇏",
  "nVDash": "⊯",
  "nVdash": "⊮",
  "nabla": "∇",
  "nacute": "ń",
  "nang": "∠⃒",
  "nap": "≉",
  "napE": "⩰̸",
  "napid": "≋̸",
  "napos": "ŉ",
  "napprox": "≉",
  "natur": "♮",
  "natural": "♮",
  "naturals": "ℕ",
  "nbs": " ",
  "nbsp": " ",
  "nbump": "≎̸",
  "nbumpe": "≏̸",
  "ncap": "⩃",
  "ncaron": "ň",
  "ncedil": "ņ",
  "ncong": "≇",
  "ncongdot": "⩭̸",
  "ncup": "⩂",
  "ncy": "н",
  "ndash": "–",
  "ne": "≠",
  "neArr": "⇗",
  "nearhk": "⤤",
  "nearr": "↗",
  "nearrow": "↗",
  "nedot": "≐̸",
  "nequiv": "≢",
  "nesear": "⤨",
  "nesim": "≂̸",
  "nexist": "∄",
  "nexists": "∄",
  "nfr": "𝔫",
  "ngE": "≧̸",
  "nge": "≱",
  "ngeq": "≱",
  "ngeqq": "≧̸",
  "ngeqslant": "⩾̸",
  "nges": "⩾̸",
  "ngsim": "≵",
  "ngt": "≯",
  "ngtr": "≯",
  "nhArr": "⇎",
  "nharr": "↮",
  "nhpar": "⫲",
  "ni": "∋",
  "nis": "⋼",
  "nisd": "⋺",
  "niv": "∋",
  "njcy": "њ",
  "nlArr": "⇍",
  "nlE": "≦̸",
  "nlarr": "↚",
  "nldr": "‥",
  "nle": "≰",
  "nleftarrow": "↚",
  "nleftrightarrow": "↮",
  "nleq": "≰",
  "nleqq": "≦̸",
  "nleqslant": "⩽̸",
  "nles": "⩽̸",
  "nless": "≮",
  "nlsim": "≴",
  "nlt": "≮",
  "nltri": "⋪",
  "nltrie": "⋬",
  "nmid": "∤",
  "nopf": "𝕟",
  "no": "¬",
  "not": "¬",
  "notin": "∉",
  "notinE": "⋹̸",
  "notindot": "⋵̸",
  "notinva": "∉",
  "notinvb": "⋷",
  "notinvc": "⋶",
  "notni": "∌",
  "notniva": "∌",
  "notnivb": "⋾",
  "notnivc": "⋽",
  "npar": "∦",
  "nparallel": "∦",
  "nparsl": "⫽⃥",
  "npart": "∂̸",
  "npolint": "⨔",
  "npr": "⊀",
  "nprcue": "⋠",
  "npre": "⪯̸",
  "nprec": "⊀",
  "npreceq": "⪯̸",
  "nrArr": "⇏",
  "nrarr": "↛",
  "nrarrc": "⤳̸",
  "nrarrw": "↝̸",
  "nrightarrow": "↛",
  "nrtri": "⋫",
  "nrtrie": "⋭",
  "nsc": "⊁",
  "nsccue": "⋡",
  "nsce": "⪰̸",
  "nscr": "𝓃",
  "nshortmid": "∤",
  "nshortparallel": "∦",
  "nsim": "≁",
  "nsime": "≄",
  "nsimeq": "≄",
  "nsmid": "∤",
  "nspar": "∦",
  "nsqsube": "⋢",
  "nsqsupe": "⋣",
  "nsub": "⊄",
  "nsubE": "⫅̸",
  "nsube": "⊈",
  "nsubset": "⊂⃒",
  "nsubseteq": "⊈",
  "nsubseteqq": "⫅̸",
  "nsucc": "⊁",
  "nsucceq": "⪰̸",
  "nsup": "⊅",
  "nsupE": "⫆̸",
  "nsupe": "⊉",
  "nsupset": "⊃⃒",
  "nsupseteq": "⊉",
  "nsupseteqq": "⫆̸",
  "ntgl": "≹",
  "ntild": "ñ",
  "ntilde": "ñ",
  "ntlg": "≸",
  "ntriangleleft": "⋪",
  "ntrianglelefteq": "⋬",
  "ntriangleright": "⋫",
  "ntrianglerighteq": "⋭",
  "nu": "ν",
  "num": "#",
  "numero": "№",
  "numsp": " ",
  "nvDash": "⊭",
  "nvHarr": "⤄",
  "nvap": "≍⃒",
  "nvdash": "⊬",
  "nvge": "≥⃒",
  "nvgt": ">⃒",
  "nvinfin": "⧞",
  "nvlArr": "⤂",
  "nvle": "≤⃒",
  "nvlt": "<⃒",
  "nvltrie": "⊴⃒",
  "nvrArr": "⤃",
  "nvrtrie": "⊵⃒",
  "nvsim": "∼⃒",
  "nwArr": "⇖",
  "nwarhk": "⤣",
  "nwarr": "↖",
  "nwarrow": "↖",
  "nwnear": "⤧",
  "oS": "Ⓢ",
  "oacut": "ó",
  "oacute": "ó",
  "oast": "⊛",
  "ocir": "ô",
  "ocirc": "ô",
  "ocy": "о",
  "odash": "⊝",
  "odblac": "ő",
  "odiv": "⨸",
  "odot": "⊙",
  "odsold": "⦼",
  "oelig": "œ",
  "ofcir": "⦿",
  "ofr": "𝔬",
  "ogon": "˛",
  "ograv": "ò",
  "ograve": "ò",
  "ogt": "⧁",
  "ohbar": "⦵",
  "ohm": "Ω",
  "oint": "∮",
  "olarr": "↺",
  "olcir": "⦾",
  "olcross": "⦻",
  "oline": "‾",
  "olt": "⧀",
  "omacr": "ō",
  "omega": "ω",
  "omicron": "ο",
  "omid": "⦶",
  "ominus": "⊖",
  "oopf": "𝕠",
  "opar": "⦷",
  "operp": "⦹",
  "oplus": "⊕",
  "or": "∨",
  "orarr": "↻",
  "ord": "º",
  "order": "ℴ",
  "orderof": "ℴ",
  "ordf": "ª",
  "ordm": "º",
  "origof": "⊶",
  "oror": "⩖",
  "orslope": "⩗",
  "orv": "⩛",
  "oscr": "ℴ",
  "oslas": "ø",
  "oslash": "ø",
  "osol": "⊘",
  "otild": "õ",
  "otilde": "õ",
  "otimes": "⊗",
  "otimesas": "⨶",
  "oum": "ö",
  "ouml": "ö",
  "ovbar": "⌽",
  "par": "¶",
  "para": "¶",
  "parallel": "∥",
  "parsim": "⫳",
  "parsl": "⫽",
  "part": "∂",
  "pcy": "п",
  "percnt": "%",
  "period": ".",
  "permil": "‰",
  "perp": "⊥",
  "pertenk": "‱",
  "pfr": "𝔭",
  "phi": "φ",
  "phiv": "ϕ",
  "phmmat": "ℳ",
  "phone": "☎",
  "pi": "π",
  "pitchfork": "⋔",
  "piv": "ϖ",
  "planck": "ℏ",
  "planckh": "ℎ",
  "plankv": "ℏ",
  "plus": "+",
  "plusacir": "⨣",
  "plusb": "⊞",
  "pluscir": "⨢",
  "plusdo": "∔",
  "plusdu": "⨥",
  "pluse": "⩲",
  "plusm": "±",
  "plusmn": "±",
  "plussim": "⨦",
  "plustwo": "⨧",
  "pm": "±",
  "pointint": "⨕",
  "popf": "𝕡",
  "poun": "£",
  "pound": "£",
  "pr": "≺",
  "prE": "⪳",
  "prap": "⪷",
  "prcue": "≼",
  "pre": "⪯",
  "prec": "≺",
  "precapprox": "⪷",
  "preccurlyeq": "≼",
  "preceq": "⪯",
  "precnapprox": "⪹",
  "precneqq": "⪵",
  "precnsim": "⋨",
  "precsim": "≾",
  "prime": "′",
  "primes": "ℙ",
  "prnE": "⪵",
  "prnap": "⪹",
  "prnsim": "⋨",
  "prod": "∏",
  "profalar": "⌮",
  "profline": "⌒",
  "profsurf": "⌓",
  "prop": "∝",
  "propto": "∝",
  "prsim": "≾",
  "prurel": "⊰",
  "pscr": "𝓅",
  "psi": "ψ",
  "puncsp": " ",
  "qfr": "𝔮",
  "qint": "⨌",
  "qopf": "𝕢",
  "qprime": "⁗",
  "qscr": "𝓆",
  "quaternions": "ℍ",
  "quatint": "⨖",
  "quest": "?",
  "questeq": "≟",
  "quo": "\"",
  "quot": "\"",
  "rAarr": "⇛",
  "rArr": "⇒",
  "rAtail": "⤜",
  "rBarr": "⤏",
  "rHar": "⥤",
  "race": "∽̱",
  "racute": "ŕ",
  "radic": "√",
  "raemptyv": "⦳",
  "rang": "⟩",
  "rangd": "⦒",
  "range": "⦥",
  "rangle": "⟩",
  "raqu": "»",
  "raquo": "»",
  "rarr": "→",
  "rarrap": "⥵",
  "rarrb": "⇥",
  "rarrbfs": "⤠",
  "rarrc": "⤳",
  "rarrfs": "⤞",
  "rarrhk": "↪",
  "rarrlp": "↬",
  "rarrpl": "⥅",
  "rarrsim": "⥴",
  "rarrtl": "↣",
  "rarrw": "↝",
  "ratail": "⤚",
  "ratio": "∶",
  "rationals": "ℚ",
  "rbarr": "⤍",
  "rbbrk": "❳",
  "rbrace": "}",
  "rbrack": "]",
  "rbrke": "⦌",
  "rbrksld": "⦎",
  "rbrkslu": "⦐",
  "rcaron": "ř",
  "rcedil": "ŗ",
  "rceil": "⌉",
  "rcub": "}",
  "rcy": "р",
  "rdca": "⤷",
  "rdldhar": "⥩",
  "rdquo": "”",
  "rdquor": "”",
  "rdsh": "↳",
  "real": "ℜ",
  "realine": "ℛ",
  "realpart": "ℜ",
  "reals": "ℝ",
  "rect": "▭",
  "re": "®",
  "reg": "®",
  "rfisht": "⥽",
  "rfloor": "⌋",
  "rfr": "𝔯",
  "rhard": "⇁",
  "rharu": "⇀",
  "rharul": "⥬",
  "rho": "ρ",
  "rhov": "ϱ",
  "rightarrow": "→",
  "rightarrowtail": "↣",
  "rightharpoondown": "⇁",
  "rightharpoonup": "⇀",
  "rightleftarrows": "⇄",
  "rightleftharpoons": "⇌",
  "rightrightarrows": "⇉",
  "rightsquigarrow": "↝",
  "rightthreetimes": "⋌",
  "ring": "˚",
  "risingdotseq": "≓",
  "rlarr": "⇄",
  "rlhar": "⇌",
  "rlm": "‏",
  "rmoust": "⎱",
  "rmoustache": "⎱",
  "rnmid": "⫮",
  "roang": "⟭",
  "roarr": "⇾",
  "robrk": "⟧",
  "ropar": "⦆",
  "ropf": "𝕣",
  "roplus": "⨮",
  "rotimes": "⨵",
  "rpar": ")",
  "rpargt": "⦔",
  "rppolint": "⨒",
  "rrarr": "⇉",
  "rsaquo": "›",
  "rscr": "𝓇",
  "rsh": "↱",
  "rsqb": "]",
  "rsquo": "’",
  "rsquor": "’",
  "rthree": "⋌",
  "rtimes": "⋊",
  "rtri": "▹",
  "rtrie": "⊵",
  "rtrif": "▸",
  "rtriltri": "⧎",
  "ruluhar": "⥨",
  "rx": "℞",
  "sacute": "ś",
  "sbquo": "‚",
  "sc": "≻",
  "scE": "⪴",
  "scap": "⪸",
  "scaron": "š",
  "sccue": "≽",
  "sce": "⪰",
  "scedil": "ş",
  "scirc": "ŝ",
  "scnE": "⪶",
  "scnap": "⪺",
  "scnsim": "⋩",
  "scpolint": "⨓",
  "scsim": "≿",
  "scy": "с",
  "sdot": "⋅",
  "sdotb": "⊡",
  "sdote": "⩦",
  "seArr": "⇘",
  "searhk": "⤥",
  "searr": "↘",
  "searrow": "↘",
  "sec": "§",
  "sect": "§",
  "semi": ";",
  "seswar": "⤩",
  "setminus": "∖",
  "setmn": "∖",
  "sext": "✶",
  "sfr": "𝔰",
  "sfrown": "⌢",
  "sharp": "♯",
  "shchcy": "щ",
  "shcy": "ш",
  "shortmid": "∣",
  "shortparallel": "∥",
  "sh": "­",
  "shy": "­",
  "sigma": "σ",
  "sigmaf": "ς",
  "sigmav": "ς",
  "sim": "∼",
  "simdot": "⩪",
  "sime": "≃",
  "simeq": "≃",
  "simg": "⪞",
  "simgE": "⪠",
  "siml": "⪝",
  "simlE": "⪟",
  "simne": "≆",
  "simplus": "⨤",
  "simrarr": "⥲",
  "slarr": "←",
  "smallsetminus": "∖",
  "smashp": "⨳",
  "smeparsl": "⧤",
  "smid": "∣",
  "smile": "⌣",
  "smt": "⪪",
  "smte": "⪬",
  "smtes": "⪬︀",
  "softcy": "ь",
  "sol": "/",
  "solb": "⧄",
  "solbar": "⌿",
  "sopf": "𝕤",
  "spades": "♠",
  "spadesuit": "♠",
  "spar": "∥",
  "sqcap": "⊓",
  "sqcaps": "⊓︀",
  "sqcup": "⊔",
  "sqcups": "⊔︀",
  "sqsub": "⊏",
  "sqsube": "⊑",
  "sqsubset": "⊏",
  "sqsubseteq": "⊑",
  "sqsup": "⊐",
  "sqsupe": "⊒",
  "sqsupset": "⊐",
  "sqsupseteq": "⊒",
  "squ": "□",
  "square": "□",
  "squarf": "▪",
  "squf": "▪",
  "srarr": "→",
  "sscr": "𝓈",
  "ssetmn": "∖",
  "ssmile": "⌣",
  "sstarf": "⋆",
  "star": "☆",
  "starf": "★",
  "straightepsilon": "ϵ",
  "straightphi": "ϕ",
  "strns": "¯",
  "sub": "⊂",
  "subE": "⫅",
  "subdot": "⪽",
  "sube": "⊆",
  "subedot": "⫃",
  "submult": "⫁",
  "subnE": "⫋",
  "subne": "⊊",
  "subplus": "⪿",
  "subrarr": "⥹",
  "subset": "⊂",
  "subseteq": "⊆",
  "subseteqq": "⫅",
  "subsetneq": "⊊",
  "subsetneqq": "⫋",
  "subsim": "⫇",
  "subsub": "⫕",
  "subsup": "⫓",
  "succ": "≻",
  "succapprox": "⪸",
  "succcurlyeq": "≽",
  "succeq": "⪰",
  "succnapprox": "⪺",
  "succneqq": "⪶",
  "succnsim": "⋩",
  "succsim": "≿",
  "sum": "∑",
  "sung": "♪",
  "sup": "⊃",
  "sup1": "¹",
  "sup2": "²",
  "sup3": "³",
  "supE": "⫆",
  "supdot": "⪾",
  "supdsub": "⫘",
  "supe": "⊇",
  "supedot": "⫄",
  "suphsol": "⟉",
  "suphsub": "⫗",
  "suplarr": "⥻",
  "supmult": "⫂",
  "supnE": "⫌",
  "supne": "⊋",
  "supplus": "⫀",
  "supset": "⊃",
  "supseteq": "⊇",
  "supseteqq": "⫆",
  "supsetneq": "⊋",
  "supsetneqq": "⫌",
  "supsim": "⫈",
  "supsub": "⫔",
  "supsup": "⫖",
  "swArr": "⇙",
  "swarhk": "⤦",
  "swarr": "↙",
  "swarrow": "↙",
  "swnwar": "⤪",
  "szli": "ß",
  "szlig": "ß",
  "target": "⌖",
  "tau": "τ",
  "tbrk": "⎴",
  "tcaron": "ť",
  "tcedil": "ţ",
  "tcy": "т",
  "tdot": "⃛",
  "telrec": "⌕",
  "tfr": "𝔱",
  "there4": "∴",
  "therefore": "∴",
  "theta": "θ",
  "thetasym": "ϑ",
  "thetav": "ϑ",
  "thickapprox": "≈",
  "thicksim": "∼",
  "thinsp": " ",
  "thkap": "≈",
  "thksim": "∼",
  "thor": "þ",
  "thorn": "þ",
  "tilde": "˜",
  "time": "×",
  "times": "×",
  "timesb": "⊠",
  "timesbar": "⨱",
  "timesd": "⨰",
  "tint": "∭",
  "toea": "⤨",
  "top": "⊤",
  "topbot": "⌶",
  "topcir": "⫱",
  "topf": "𝕥",
  "topfork": "⫚",
  "tosa": "⤩",
  "tprime": "‴",
  "trade": "™",
  "triangle": "▵",
  "triangledown": "▿",
  "triangleleft": "◃",
  "trianglelefteq": "⊴",
  "triangleq": "≜",
  "triangleright": "▹",
  "trianglerighteq": "⊵",
  "tridot": "◬",
  "trie": "≜",
  "triminus": "⨺",
  "triplus": "⨹",
  "trisb": "⧍",
  "tritime": "⨻",
  "trpezium": "⏢",
  "tscr": "𝓉",
  "tscy": "ц",
  "tshcy": "ћ",
  "tstrok": "ŧ",
  "twixt": "≬",
  "twoheadleftarrow": "↞",
  "twoheadrightarrow": "↠",
  "uArr": "⇑",
  "uHar": "⥣",
  "uacut": "ú",
  "uacute": "ú",
  "uarr": "↑",
  "ubrcy": "ў",
  "ubreve": "ŭ",
  "ucir": "û",
  "ucirc": "û",
  "ucy": "у",
  "udarr": "⇅",
  "udblac": "ű",
  "udhar": "⥮",
  "ufisht": "⥾",
  "ufr": "𝔲",
  "ugrav": "ù",
  "ugrave": "ù",
  "uharl": "↿",
  "uharr": "↾",
  "uhblk": "▀",
  "ulcorn": "⌜",
  "ulcorner": "⌜",
  "ulcrop": "⌏",
  "ultri": "◸",
  "umacr": "ū",
  "um": "¨",
  "uml": "¨",
  "uogon": "ų",
  "uopf": "𝕦",
  "uparrow": "↑",
  "updownarrow": "↕",
  "upharpoonleft": "↿",
  "upharpoonright": "↾",
  "uplus": "⊎",
  "upsi": "υ",
  "upsih": "ϒ",
  "upsilon": "υ",
  "upuparrows": "⇈",
  "urcorn": "⌝",
  "urcorner": "⌝",
  "urcrop": "⌎",
  "uring": "ů",
  "urtri": "◹",
  "uscr": "𝓊",
  "utdot": "⋰",
  "utilde": "ũ",
  "utri": "▵",
  "utrif": "▴",
  "uuarr": "⇈",
  "uum": "ü",
  "uuml": "ü",
  "uwangle": "⦧",
  "vArr": "⇕",
  "vBar": "⫨",
  "vBarv": "⫩",
  "vDash": "⊨",
  "vangrt": "⦜",
  "varepsilon": "ϵ",
  "varkappa": "ϰ",
  "varnothing": "∅",
  "varphi": "ϕ",
  "varpi": "ϖ",
  "varpropto": "∝",
  "varr": "↕",
  "varrho": "ϱ",
  "varsigma": "ς",
  "varsubsetneq": "⊊︀",
  "varsubsetneqq": "⫋︀",
  "varsupsetneq": "⊋︀",
  "varsupsetneqq": "⫌︀",
  "vartheta": "ϑ",
  "vartriangleleft": "⊲",
  "vartriangleright": "⊳",
  "vcy": "в",
  "vdash": "⊢",
  "vee": "∨",
  "veebar": "⊻",
  "veeeq": "≚",
  "vellip": "⋮",
  "verbar": "|",
  "vert": "|",
  "vfr": "𝔳",
  "vltri": "⊲",
  "vnsub": "⊂⃒",
  "vnsup": "⊃⃒",
  "vopf": "𝕧",
  "vprop": "∝",
  "vrtri": "⊳",
  "vscr": "𝓋",
  "vsubnE": "⫋︀",
  "vsubne": "⊊︀",
  "vsupnE": "⫌︀",
  "vsupne": "⊋︀",
  "vzigzag": "⦚",
  "wcirc": "ŵ",
  "wedbar": "⩟",
  "wedge": "∧",
  "wedgeq": "≙",
  "weierp": "℘",
  "wfr": "𝔴",
  "wopf": "𝕨",
  "wp": "℘",
  "wr": "≀",
  "wreath": "≀",
  "wscr": "𝓌",
  "xcap": "⋂",
  "xcirc": "◯",
  "xcup": "⋃",
  "xdtri": "▽",
  "xfr": "𝔵",
  "xhArr": "⟺",
  "xharr": "⟷",
  "xi": "ξ",
  "xlArr": "⟸",
  "xlarr": "⟵",
  "xmap": "⟼",
  "xnis": "⋻",
  "xodot": "⨀",
  "xopf": "𝕩",
  "xoplus": "⨁",
  "xotime": "⨂",
  "xrArr": "⟹",
  "xrarr": "⟶",
  "xscr": "𝓍",
  "xsqcup": "⨆",
  "xuplus": "⨄",
  "xutri": "△",
  "xvee": "⋁",
  "xwedge": "⋀",
  "yacut": "ý",
  "yacute": "ý",
  "yacy": "я",
  "ycirc": "ŷ",
  "ycy": "ы",
  "ye": "¥",
  "yen": "¥",
  "yfr": "𝔶",
  "yicy": "ї",
  "yopf": "𝕪",
  "yscr": "𝓎",
  "yucy": "ю",
  "yum": "ÿ",
  "yuml": "ÿ",
  "zacute": "ź",
  "zcaron": "ž",
  "zcy": "з",
  "zdot": "ż",
  "zeetrf": "ℨ",
  "zeta": "ζ",
  "zfr": "𝔷",
  "zhcy": "ж",
  "zigrarr": "⇝",
  "zopf": "𝕫",
  "zscr": "𝓏",
  "zwj": "‍",
  "zwnj": "‌"
}

},{}],40:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module character-entities
 * @fileoverview HTML character entity information.
 */

'use strict';

/* Expose. */
module.exports = require('./index.json');

},{"./index.json":39}],41:[function(require,module,exports){
module.exports={
  "0": "�",
  "128": "€",
  "130": "‚",
  "131": "ƒ",
  "132": "„",
  "133": "…",
  "134": "†",
  "135": "‡",
  "136": "ˆ",
  "137": "‰",
  "138": "Š",
  "139": "‹",
  "140": "Œ",
  "142": "Ž",
  "145": "‘",
  "146": "’",
  "147": "“",
  "148": "”",
  "149": "•",
  "150": "–",
  "151": "—",
  "152": "˜",
  "153": "™",
  "154": "š",
  "155": "›",
  "156": "œ",
  "158": "ž",
  "159": "Ÿ"
}

},{}],42:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module character-reference-invalid
 * @fileoverview HTML invalid numeric character reference information.
 */

'use strict';

/* Expose. */
module.exports = require('./index.json');

},{"./index.json":41}],43:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module collapse-white-space
 * @fileoverview Replace multiple white-space characters
 *   with a single space.
 */

'use strict';

/* Expose. */
module.exports = collapse;

/**
 * Replace multiple white-space characters with a single space.
 *
 * @example
 *   collapse(' \t\nbar \nbaz\t'); // ' bar baz '
 *
 * @param {string} value - Value with uncollapsed white-space,
 *   coerced to string.
 * @return {string} - Value with collapsed white-space.
 */
function collapse(value) {
  return String(value).replace(/\s+/g, ' ');
}

},{}],44:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module comma-separated-tokens
 * @fileoverview Parse and stringify comma-separated tokens.
 */

'use strict';

/* Expose. */
exports.parse = parse;
exports.stringify = stringify;

/*
 * Dependencies.
 */

var trim = require('trim');

/*
 * Characters.
 */

var C_COMMA = ',';
var C_SPACE = ' ';

/*
 * Constants.
 */

var EMPTY = '';

/**
 * Parse comma-separated tokens to an array.
 *
 * @param {string} value - Attribute-value to parse.
 * @return {Array.<string>} - Tokens.
 */
function parse(value) {
  var values = [];
  var input = String(value || EMPTY);
  var index = input.indexOf(C_COMMA);
  var lastIndex = 0;
  var end = false;
  var val;

  while (!end) {
    if (index === -1) {
      index = input.length;
      end = true;
    }

    val = trim(input.slice(lastIndex, index));

    if (val || !end) {
      values.push(val);
    }

    lastIndex = index + 1;
    index = input.indexOf(C_COMMA, lastIndex);
  }

  return values;
}

/**
 * Compile an array to comma-separated tokens.
 *
 * @param {Array.<string>} values - Tokens.
 * @param {Object} [options={}] - Configuration.
 * @param {boolean} [options.padLeft=true] - Pad the left
 *   of a token with one space.
 * @param {boolean} [options.padRight=false] - Pad the right
 *   of a token with one space.
 * @return {string} - Comma-separated tokens.
 */
function stringify(values, options) {
  var settings = options || {};
  var left = settings.padLeft;

  /*
   * Ensure the last empty entry is seen.
   */

  if (values[values.length - 1] === EMPTY) {
    values = values.concat(EMPTY);
  }

  return trim(values.join(
    (settings.padRight ? C_SPACE : EMPTY) +
    C_COMMA +
    (left || left === undefined || left === null ? C_SPACE : EMPTY)
  ));
}

},{"trim":343}],45:[function(require,module,exports){
require('../../modules/es6.string.iterator');
require('../../modules/es6.array.from');
module.exports = require('../../modules/_core').Array.from;
},{"../../modules/_core":68,"../../modules/es6.array.from":137,"../../modules/es6.string.iterator":148}],46:[function(require,module,exports){
require('../modules/web.dom.iterable');
require('../modules/es6.string.iterator');
module.exports = require('../modules/core.get-iterator');
},{"../modules/core.get-iterator":135,"../modules/es6.string.iterator":148,"../modules/web.dom.iterable":154}],47:[function(require,module,exports){
require('../modules/web.dom.iterable');
require('../modules/es6.string.iterator');
module.exports = require('../modules/core.is-iterable');
},{"../modules/core.is-iterable":136,"../modules/es6.string.iterator":148,"../modules/web.dom.iterable":154}],48:[function(require,module,exports){
var core  = require('../../modules/_core')
  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};
},{"../../modules/_core":68}],49:[function(require,module,exports){
require('../../modules/es6.object.assign');
module.exports = require('../../modules/_core').Object.assign;
},{"../../modules/_core":68,"../../modules/es6.object.assign":139}],50:[function(require,module,exports){
require('../../modules/es6.object.create');
var $Object = require('../../modules/_core').Object;
module.exports = function create(P, D){
  return $Object.create(P, D);
};
},{"../../modules/_core":68,"../../modules/es6.object.create":140}],51:[function(require,module,exports){
require('../../modules/es6.object.define-property');
var $Object = require('../../modules/_core').Object;
module.exports = function defineProperty(it, key, desc){
  return $Object.defineProperty(it, key, desc);
};
},{"../../modules/_core":68,"../../modules/es6.object.define-property":141}],52:[function(require,module,exports){
require('../../modules/es7.object.entries');
module.exports = require('../../modules/_core').Object.entries;
},{"../../modules/_core":68,"../../modules/es7.object.entries":150}],53:[function(require,module,exports){
require('../../modules/es6.object.get-own-property-descriptor');
var $Object = require('../../modules/_core').Object;
module.exports = function getOwnPropertyDescriptor(it, key){
  return $Object.getOwnPropertyDescriptor(it, key);
};
},{"../../modules/_core":68,"../../modules/es6.object.get-own-property-descriptor":142}],54:[function(require,module,exports){
require('../../modules/es6.object.get-prototype-of');
module.exports = require('../../modules/_core').Object.getPrototypeOf;
},{"../../modules/_core":68,"../../modules/es6.object.get-prototype-of":143}],55:[function(require,module,exports){
require('../../modules/es6.object.keys');
module.exports = require('../../modules/_core').Object.keys;
},{"../../modules/_core":68,"../../modules/es6.object.keys":144}],56:[function(require,module,exports){
require('../../modules/es6.object.set-prototype-of');
module.exports = require('../../modules/_core').Object.setPrototypeOf;
},{"../../modules/_core":68,"../../modules/es6.object.set-prototype-of":145}],57:[function(require,module,exports){
require('../../modules/es7.object.values');
module.exports = require('../../modules/_core').Object.values;
},{"../../modules/_core":68,"../../modules/es7.object.values":151}],58:[function(require,module,exports){
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.promise');
module.exports = require('../modules/_core').Promise;
},{"../modules/_core":68,"../modules/es6.object.to-string":146,"../modules/es6.promise":147,"../modules/es6.string.iterator":148,"../modules/web.dom.iterable":154}],59:[function(require,module,exports){
require('../../modules/es6.symbol');
require('../../modules/es6.object.to-string');
require('../../modules/es7.symbol.async-iterator');
require('../../modules/es7.symbol.observable');
module.exports = require('../../modules/_core').Symbol;
},{"../../modules/_core":68,"../../modules/es6.object.to-string":146,"../../modules/es6.symbol":149,"../../modules/es7.symbol.async-iterator":152,"../../modules/es7.symbol.observable":153}],60:[function(require,module,exports){
require('../../modules/es6.string.iterator');
require('../../modules/web.dom.iterable');
module.exports = require('../../modules/_wks-ext').f('iterator');
},{"../../modules/_wks-ext":132,"../../modules/es6.string.iterator":148,"../../modules/web.dom.iterable":154}],61:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],62:[function(require,module,exports){
module.exports = function(){ /* empty */ };
},{}],63:[function(require,module,exports){
module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};
},{}],64:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./_is-object":88}],65:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length')
  , toIndex   = require('./_to-index');
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};
},{"./_to-index":124,"./_to-iobject":126,"./_to-length":127}],66:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof')
  , TAG = require('./_wks')('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};
},{"./_cof":67,"./_wks":133}],67:[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],68:[function(require,module,exports){
var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],69:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp')
  , createDesc      = require('./_property-desc');

module.exports = function(object, index, value){
  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};
},{"./_object-dp":101,"./_property-desc":113}],70:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./_a-function":61}],71:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],72:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_fails":77}],73:[function(require,module,exports){
var isObject = require('./_is-object')
  , document = require('./_global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./_global":79,"./_is-object":88}],74:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');
},{}],75:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys')
  , gOPS    = require('./_object-gops')
  , pIE     = require('./_object-pie');
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};
},{"./_object-gops":106,"./_object-keys":109,"./_object-pie":110}],76:[function(require,module,exports){
var global    = require('./_global')
  , core      = require('./_core')
  , ctx       = require('./_ctx')
  , hide      = require('./_hide')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":68,"./_ctx":70,"./_global":79,"./_hide":81}],77:[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],78:[function(require,module,exports){
var ctx         = require('./_ctx')
  , call        = require('./_iter-call')
  , isArrayIter = require('./_is-array-iter')
  , anObject    = require('./_an-object')
  , toLength    = require('./_to-length')
  , getIterFn   = require('./core.get-iterator-method')
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;
},{"./_an-object":64,"./_ctx":70,"./_is-array-iter":86,"./_iter-call":89,"./_to-length":127,"./core.get-iterator-method":134}],79:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],80:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],81:[function(require,module,exports){
var dP         = require('./_object-dp')
  , createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./_descriptors":72,"./_object-dp":101,"./_property-desc":113}],82:[function(require,module,exports){
module.exports = require('./_global').document && document.documentElement;
},{"./_global":79}],83:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function(){
  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_descriptors":72,"./_dom-create":73,"./_fails":77}],84:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};
},{}],85:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./_cof":67}],86:[function(require,module,exports){
// check on default Array iterator
var Iterators  = require('./_iterators')
  , ITERATOR   = require('./_wks')('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};
},{"./_iterators":94,"./_wks":133}],87:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};
},{"./_cof":67}],88:[function(require,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],89:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};
},{"./_an-object":64}],90:[function(require,module,exports){
'use strict';
var create         = require('./_object-create')
  , descriptor     = require('./_property-desc')
  , setToStringTag = require('./_set-to-string-tag')
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};
},{"./_hide":81,"./_object-create":100,"./_property-desc":113,"./_set-to-string-tag":118,"./_wks":133}],91:[function(require,module,exports){
'use strict';
var LIBRARY        = require('./_library')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , hide           = require('./_hide')
  , has            = require('./_has')
  , Iterators      = require('./_iterators')
  , $iterCreate    = require('./_iter-create')
  , setToStringTag = require('./_set-to-string-tag')
  , getPrototypeOf = require('./_object-gpo')
  , ITERATOR       = require('./_wks')('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};
},{"./_export":76,"./_has":80,"./_hide":81,"./_iter-create":90,"./_iterators":94,"./_library":96,"./_object-gpo":107,"./_redefine":115,"./_set-to-string-tag":118,"./_wks":133}],92:[function(require,module,exports){
var ITERATOR     = require('./_wks')('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};
},{"./_wks":133}],93:[function(require,module,exports){
module.exports = function(done, value){
  return {value: value, done: !!done};
};
},{}],94:[function(require,module,exports){
module.exports = {};
},{}],95:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject');
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};
},{"./_object-keys":109,"./_to-iobject":126}],96:[function(require,module,exports){
module.exports = true;
},{}],97:[function(require,module,exports){
var META     = require('./_uid')('meta')
  , isObject = require('./_is-object')
  , has      = require('./_has')
  , setDesc  = require('./_object-dp').f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !require('./_fails')(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};
},{"./_fails":77,"./_has":80,"./_is-object":88,"./_object-dp":101,"./_uid":130}],98:[function(require,module,exports){
var global    = require('./_global')
  , macrotask = require('./_task').set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = require('./_cof')(process) == 'process';

module.exports = function(){
  var head, last, notify;

  var flush = function(){
    var parent, fn;
    if(isNode && (parent = process.domain))parent.exit();
    while(head){
      fn   = head.fn;
      head = head.next;
      try {
        fn();
      } catch(e){
        if(head)notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = true
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    var promise = Promise.resolve();
    notify = function(){
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function(fn){
    var task = {fn: fn, next: undefined};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };
};
},{"./_cof":67,"./_global":79,"./_task":123}],99:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = require('./_object-keys')
  , gOPS     = require('./_object-gops')
  , pIE      = require('./_object-pie')
  , toObject = require('./_to-object')
  , IObject  = require('./_iobject')
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;
},{"./_fails":77,"./_iobject":85,"./_object-gops":106,"./_object-keys":109,"./_object-pie":110,"./_to-object":128}],100:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = require('./_an-object')
  , dPs         = require('./_object-dps')
  , enumBugKeys = require('./_enum-bug-keys')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe')
    , i      = enumBugKeys.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":64,"./_dom-create":73,"./_enum-bug-keys":74,"./_html":82,"./_object-dps":102,"./_shared-key":119}],101:[function(require,module,exports){
var anObject       = require('./_an-object')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , toPrimitive    = require('./_to-primitive')
  , dP             = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};
},{"./_an-object":64,"./_descriptors":72,"./_ie8-dom-define":83,"./_to-primitive":129}],102:[function(require,module,exports){
var dP       = require('./_object-dp')
  , anObject = require('./_an-object')
  , getKeys  = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};
},{"./_an-object":64,"./_descriptors":72,"./_object-dp":101,"./_object-keys":109}],103:[function(require,module,exports){
var pIE            = require('./_object-pie')
  , createDesc     = require('./_property-desc')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , has            = require('./_has')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};
},{"./_descriptors":72,"./_has":80,"./_ie8-dom-define":83,"./_object-pie":110,"./_property-desc":113,"./_to-iobject":126,"./_to-primitive":129}],104:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject')
  , gOPN      = require('./_object-gopn').f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":105,"./_to-iobject":126}],105:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = require('./_object-keys-internal')
  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};
},{"./_enum-bug-keys":74,"./_object-keys-internal":108}],106:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;
},{}],107:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = require('./_has')
  , toObject    = require('./_to-object')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};
},{"./_has":80,"./_shared-key":119,"./_to-object":128}],108:[function(require,module,exports){
var has          = require('./_has')
  , toIObject    = require('./_to-iobject')
  , arrayIndexOf = require('./_array-includes')(false)
  , IE_PROTO     = require('./_shared-key')('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};
},{"./_array-includes":65,"./_has":80,"./_shared-key":119,"./_to-iobject":126}],109:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = require('./_object-keys-internal')
  , enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};
},{"./_enum-bug-keys":74,"./_object-keys-internal":108}],110:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;
},{}],111:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export')
  , core    = require('./_core')
  , fails   = require('./_fails');
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};
},{"./_core":68,"./_export":76,"./_fails":77}],112:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject')
  , isEnum    = require('./_object-pie').f;
module.exports = function(isEntries){
  return function(it){
    var O      = toIObject(it)
      , keys   = getKeys(O)
      , length = keys.length
      , i      = 0
      , result = []
      , key;
    while(length > i)if(isEnum.call(O, key = keys[i++])){
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};
},{"./_object-keys":109,"./_object-pie":110,"./_to-iobject":126}],113:[function(require,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],114:[function(require,module,exports){
var hide = require('./_hide');
module.exports = function(target, src, safe){
  for(var key in src){
    if(safe && target[key])target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};
},{"./_hide":81}],115:[function(require,module,exports){
module.exports = require('./_hide');
},{"./_hide":81}],116:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object')
  , anObject = require('./_an-object');
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};
},{"./_an-object":64,"./_ctx":70,"./_is-object":88,"./_object-gopd":103}],117:[function(require,module,exports){
'use strict';
var global      = require('./_global')
  , core        = require('./_core')
  , dP          = require('./_object-dp')
  , DESCRIPTORS = require('./_descriptors')
  , SPECIES     = require('./_wks')('species');

module.exports = function(KEY){
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./_core":68,"./_descriptors":72,"./_global":79,"./_object-dp":101,"./_wks":133}],118:[function(require,module,exports){
var def = require('./_object-dp').f
  , has = require('./_has')
  , TAG = require('./_wks')('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};
},{"./_has":80,"./_object-dp":101,"./_wks":133}],119:[function(require,module,exports){
var shared = require('./_shared')('keys')
  , uid    = require('./_uid');
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};
},{"./_shared":120,"./_uid":130}],120:[function(require,module,exports){
var global = require('./_global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./_global":79}],121:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = require('./_an-object')
  , aFunction = require('./_a-function')
  , SPECIES   = require('./_wks')('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};
},{"./_a-function":61,"./_an-object":64,"./_wks":133}],122:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};
},{"./_defined":71,"./_to-integer":125}],123:[function(require,module,exports){
var ctx                = require('./_ctx')
  , invoke             = require('./_invoke')
  , html               = require('./_html')
  , cel                = require('./_dom-create')
  , global             = require('./_global')
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(require('./_cof')(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};
},{"./_cof":67,"./_ctx":70,"./_dom-create":73,"./_global":79,"./_html":82,"./_invoke":84}],124:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};
},{"./_to-integer":125}],125:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],126:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject')
  , defined = require('./_defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./_defined":71,"./_iobject":85}],127:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./_to-integer":125}],128:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./_defined":71}],129:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};
},{"./_is-object":88}],130:[function(require,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],131:[function(require,module,exports){
var global         = require('./_global')
  , core           = require('./_core')
  , LIBRARY        = require('./_library')
  , wksExt         = require('./_wks-ext')
  , defineProperty = require('./_object-dp').f;
module.exports = function(name){
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
};
},{"./_core":68,"./_global":79,"./_library":96,"./_object-dp":101,"./_wks-ext":132}],132:[function(require,module,exports){
exports.f = require('./_wks');
},{"./_wks":133}],133:[function(require,module,exports){
var store      = require('./_shared')('wks')
  , uid        = require('./_uid')
  , Symbol     = require('./_global').Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;
},{"./_global":79,"./_shared":120,"./_uid":130}],134:[function(require,module,exports){
var classof   = require('./_classof')
  , ITERATOR  = require('./_wks')('iterator')
  , Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};
},{"./_classof":66,"./_core":68,"./_iterators":94,"./_wks":133}],135:[function(require,module,exports){
var anObject = require('./_an-object')
  , get      = require('./core.get-iterator-method');
module.exports = require('./_core').getIterator = function(it){
  var iterFn = get(it);
  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};
},{"./_an-object":64,"./_core":68,"./core.get-iterator-method":134}],136:[function(require,module,exports){
var classof   = require('./_classof')
  , ITERATOR  = require('./_wks')('iterator')
  , Iterators = require('./_iterators');
module.exports = require('./_core').isIterable = function(it){
  var O = Object(it);
  return O[ITERATOR] !== undefined
    || '@@iterator' in O
    || Iterators.hasOwnProperty(classof(O));
};
},{"./_classof":66,"./_core":68,"./_iterators":94,"./_wks":133}],137:[function(require,module,exports){
'use strict';
var ctx            = require('./_ctx')
  , $export        = require('./_export')
  , toObject       = require('./_to-object')
  , call           = require('./_iter-call')
  , isArrayIter    = require('./_is-array-iter')
  , toLength       = require('./_to-length')
  , createProperty = require('./_create-property')
  , getIterFn      = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for(result = new C(length); length > index; index++){
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":69,"./_ctx":70,"./_export":76,"./_is-array-iter":86,"./_iter-call":89,"./_iter-detect":92,"./_to-length":127,"./_to-object":128,"./core.get-iterator-method":134}],138:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables')
  , step             = require('./_iter-step')
  , Iterators        = require('./_iterators')
  , toIObject        = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');
},{"./_add-to-unscopables":62,"./_iter-define":91,"./_iter-step":93,"./_iterators":94,"./_to-iobject":126}],139:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', {assign: require('./_object-assign')});
},{"./_export":76,"./_object-assign":99}],140:[function(require,module,exports){
var $export = require('./_export')
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', {create: require('./_object-create')});
},{"./_export":76,"./_object-create":100}],141:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});
},{"./_descriptors":72,"./_export":76,"./_object-dp":101}],142:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject                 = require('./_to-iobject')
  , $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function(){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});
},{"./_object-gopd":103,"./_object-sap":111,"./_to-iobject":126}],143:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject        = require('./_to-object')
  , $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function(){
  return function getPrototypeOf(it){
    return $getPrototypeOf(toObject(it));
  };
});
},{"./_object-gpo":107,"./_object-sap":111,"./_to-object":128}],144:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object')
  , $keys    = require('./_object-keys');

require('./_object-sap')('keys', function(){
  return function keys(it){
    return $keys(toObject(it));
  };
});
},{"./_object-keys":109,"./_object-sap":111,"./_to-object":128}],145:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});
},{"./_export":76,"./_set-proto":116}],146:[function(require,module,exports){

},{}],147:[function(require,module,exports){
'use strict';
var LIBRARY            = require('./_library')
  , global             = require('./_global')
  , ctx                = require('./_ctx')
  , classof            = require('./_classof')
  , $export            = require('./_export')
  , isObject           = require('./_is-object')
  , aFunction          = require('./_a-function')
  , anInstance         = require('./_an-instance')
  , forOf              = require('./_for-of')
  , speciesConstructor = require('./_species-constructor')
  , task               = require('./_task').set
  , microtask          = require('./_microtask')()
  , PROMISE            = 'Promise'
  , TypeError          = global.TypeError
  , process            = global.process
  , $Promise           = global[PROMISE]
  , process            = global.process
  , isNode             = classof(process) == 'process'
  , empty              = function(){ /* empty */ }
  , Internal, GenericPromiseCapability, Wrapper;

var USE_NATIVE = !!function(){
  try {
    // correct subclassing with @@species support
    var promise     = $Promise.resolve(1)
      , FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function(exec){ exec(empty, empty); };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch(e){ /* empty */ }
}();

// helpers
var sameConstructor = function(a, b){
  // with library wrapper special case
  return a === b || a === $Promise && b === Wrapper;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var newPromiseCapability = function(C){
  return sameConstructor($Promise, C)
    ? new PromiseCapability(C)
    : new GenericPromiseCapability(C);
};
var PromiseCapability = GenericPromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject  = aFunction(reject);
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(promise, isReject){
  if(promise._n)return;
  promise._n = true;
  var chain = promise._c;
  microtask(function(){
    var value = promise._v
      , ok    = promise._s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , domain  = reaction.domain
        , result, then;
      try {
        if(handler){
          if(!ok){
            if(promise._h == 2)onHandleUnhandled(promise);
            promise._h = 1;
          }
          if(handler === true)result = value;
          else {
            if(domain)domain.enter();
            result = handler(value);
            if(domain)domain.exit();
          }
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if(isReject && !promise._h)onUnhandled(promise);
  });
};
var onUnhandled = function(promise){
  task.call(global, function(){
    var value = promise._v
      , abrupt, handler, console;
    if(isUnhandled(promise)){
      abrupt = perform(function(){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if(abrupt)throw abrupt.error;
  });
};
var isUnhandled = function(promise){
  if(promise._h == 1)return false;
  var chain = promise._a || promise._c
    , i     = 0
    , reaction;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var onHandleUnhandled = function(promise){
  task.call(global, function(){
    var handler;
    if(isNode){
      process.emit('rejectionHandled', promise);
    } else if(handler = global.onrejectionhandled){
      handler({promise: promise, reason: promise._v});
    }
  });
};
var $reject = function(value){
  var promise = this;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if(!promise._a)promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value){
  var promise = this
    , then;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if(promise === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      microtask(function(){
        var wrapper = {_w: promise, _d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch(e){
    $reject.call({_w: promise, _d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor){
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch(err){
      $reject.call(this, err);
    }
  };
  Internal = function Promise(executor){
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail   = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if(this._a)this._a.push(reaction);
      if(this._s)notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
  PromiseCapability = function(){
    var promise  = new Internal;
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject  = ctx($reject, promise, 1);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = newPromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
    var capability = newPromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function(iter){
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject;
    var abrupt = perform(function(){
      var values    = []
        , index     = 0
        , remaining = 1;
      forOf(iterable, false, function(promise){
        var $index        = index++
          , alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled  = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});
},{"./_a-function":61,"./_an-instance":63,"./_classof":66,"./_core":68,"./_ctx":70,"./_export":76,"./_for-of":78,"./_global":79,"./_is-object":88,"./_iter-detect":92,"./_library":96,"./_microtask":98,"./_redefine-all":114,"./_set-species":117,"./_set-to-string-tag":118,"./_species-constructor":121,"./_task":123,"./_wks":133}],148:[function(require,module,exports){
'use strict';
var $at  = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});
},{"./_iter-define":91,"./_string-at":122}],149:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global         = require('./_global')
  , has            = require('./_has')
  , DESCRIPTORS    = require('./_descriptors')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , META           = require('./_meta').KEY
  , $fails         = require('./_fails')
  , shared         = require('./_shared')
  , setToStringTag = require('./_set-to-string-tag')
  , uid            = require('./_uid')
  , wks            = require('./_wks')
  , wksExt         = require('./_wks-ext')
  , wksDefine      = require('./_wks-define')
  , keyOf          = require('./_keyof')
  , enumKeys       = require('./_enum-keys')
  , isArray        = require('./_is-array')
  , anObject       = require('./_an-object')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , createDesc     = require('./_property-desc')
  , _create        = require('./_object-create')
  , gOPNExt        = require('./_object-gopn-ext')
  , $GOPD          = require('./_object-gopd')
  , $DP            = require('./_object-dp')
  , $keys          = require('./_object-keys')
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , OPSymbols      = shared('op-symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject(it);
  key = toPrimitive(key, true);
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto)$set.call(OPSymbols, value);
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f  = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !require('./_library')){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);
},{"./_an-object":64,"./_descriptors":72,"./_enum-keys":75,"./_export":76,"./_fails":77,"./_global":79,"./_has":80,"./_hide":81,"./_is-array":87,"./_keyof":95,"./_library":96,"./_meta":97,"./_object-create":100,"./_object-dp":101,"./_object-gopd":103,"./_object-gopn":105,"./_object-gopn-ext":104,"./_object-gops":106,"./_object-keys":109,"./_object-pie":110,"./_property-desc":113,"./_redefine":115,"./_set-to-string-tag":118,"./_shared":120,"./_to-iobject":126,"./_to-primitive":129,"./_uid":130,"./_wks":133,"./_wks-define":131,"./_wks-ext":132}],150:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export  = require('./_export')
  , $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it){
    return $entries(it);
  }
});
},{"./_export":76,"./_object-to-array":112}],151:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export')
  , $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it){
    return $values(it);
  }
});
},{"./_export":76,"./_object-to-array":112}],152:[function(require,module,exports){
require('./_wks-define')('asyncIterator');
},{"./_wks-define":131}],153:[function(require,module,exports){
require('./_wks-define')('observable');
},{"./_wks-define":131}],154:[function(require,module,exports){
require('./es6.array.iterator');
var global        = require('./_global')
  , hide          = require('./_hide')
  , Iterators     = require('./_iterators')
  , TO_STRING_TAG = require('./_wks')('toStringTag');

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype;
  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}
},{"./_global":79,"./_hide":81,"./_iterators":94,"./_wks":133,"./es6.array.iterator":138}],155:[function(require,module,exports){
var pSlice = Array.prototype.slice;
var objectKeys = require('./lib/keys.js');
var isArguments = require('./lib/is_arguments.js');

var deepEqual = module.exports = function (actual, expected, opts) {
  if (!opts) opts = {};
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (actual instanceof Date && expected instanceof Date) {
    return actual.getTime() === expected.getTime();

  // 7.3. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {
    return opts.strict ? actual === expected : actual == expected;

  // 7.4. For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected, opts);
  }
}

function isUndefinedOrNull(value) {
  return value === null || value === undefined;
}

function isBuffer (x) {
  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;
  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
    return false;
  }
  if (x.length > 0 && typeof x[0] !== 'number') return false;
  return true;
}

function objEquiv(a, b, opts) {
  var i, key;
  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return deepEqual(a, b, opts);
  }
  if (isBuffer(a)) {
    if (!isBuffer(b)) {
      return false;
    }
    if (a.length !== b.length) return false;
    for (i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  }
  try {
    var ka = objectKeys(a),
        kb = objectKeys(b);
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], opts)) return false;
  }
  return typeof a === typeof b;
}

},{"./lib/is_arguments.js":156,"./lib/keys.js":157}],156:[function(require,module,exports){
var supportsArgumentsClass = (function(){
  return Object.prototype.toString.call(arguments)
})() == '[object Arguments]';

exports = module.exports = supportsArgumentsClass ? supported : unsupported;

exports.supported = supported;
function supported(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
};

exports.unsupported = unsupported;
function unsupported(object){
  return object &&
    typeof object == 'object' &&
    typeof object.length == 'number' &&
    Object.prototype.hasOwnProperty.call(object, 'callee') &&
    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||
    false;
};

},{}],157:[function(require,module,exports){
exports = module.exports = typeof Object.keys === 'function'
  ? Object.keys : shim;

exports.shim = shim;
function shim (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}

},{}],158:[function(require,module,exports){
'use strict';

/*
 * Dependencies.
 */

var repeat = require('repeat-string');

/*
 * Constants.
 */

var TAB = '\t';
var NEWLINE = '\n';
var SPACE = ' ';

/**
 * Replace tabs with spaces, being smart about which
 * column the tab is at and which size should be used.
 *
 * @example
 *   detab('\tfoo\nbar\tbaz'); // '    foo\nbar baz'
 *   detab('\tfoo\nbar\tbaz', 2); // '  foo\nbar baz'
 *   detab('\tfoo\nbar\tbaz', 8); // '        foo\nbar     baz'
 *
 * @param {string} value - Value with tabs.
 * @param {number?} [size=4] - Tab-size.
 * @return {string} - Value without tabs.
 */
function detab(value, size) {
    var string = typeof value === 'string';
    var length = string && value.length;
    var index = -1;
    var column = -1;
    var tabSize = size || 4;
    var result = '';
    var character;
    var add;

    if (!string) {
        throw new Error('detab expected string');
    }

    while (++index < length) {
        character = value.charAt(index);

        if (character === TAB) {
            add = tabSize - ((column + 1) % tabSize);
            result += repeat(SPACE, add);
            column += add;
            continue;
        }

        if (character === NEWLINE) {
            column = -1;
        } else {
            column++;
        }

        result += character;
    }

    return result;
}

/*
 * Expose.
 */

module.exports = detab;

},{"repeat-string":321}],159:[function(require,module,exports){
/*!
Copyright (C) 2013-2015 by Andrea Giammarchi - @WebReflection

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
(function(window){'use strict';
  /* jshint loopfunc: true, noempty: false*/
  // http://www.w3.org/TR/dom/#element

  function createDocumentFragment() {
    return document.createDocumentFragment();
  }

  function createElement(nodeName) {
    return document.createElement(nodeName);
  }

  function enoughArguments(length, name) {
    if (!length) throw new Error(
      'Failed to construct ' +
        name +
      ': 1 argument required, but only 0 present.'
    );
  }

  function mutationMacro(nodes) {
    if (nodes.length === 1) {
      return textNodeIfString(nodes[0]);
    }
    for (var
      fragment = createDocumentFragment(),
      list = slice.call(nodes),
      i = 0; i < nodes.length; i++
    ) {
      fragment.appendChild(textNodeIfString(list[i]));
    }
    return fragment;
  }

  function textNodeIfString(node) {
    return typeof node === 'string' ? document.createTextNode(node) : node;
  }

  for(var
    head,
    property,
    TemporaryPrototype,
    TemporaryTokenList,
    wrapVerifyToken,
    document = window.document,
    hOP = Object.prototype.hasOwnProperty,
    defineProperty = Object.defineProperty || function (object, property, descriptor) {
      if (hOP.call(descriptor, 'value')) {
        object[property] = descriptor.value;
      } else {
        if (hOP.call(descriptor, 'get'))
          object.__defineGetter__(property, descriptor.get);
        if (hOP.call(descriptor, 'set'))
          object.__defineSetter__(property, descriptor.set);
      }
      return object;
    },
    indexOf = [].indexOf || function indexOf(value){
      var length = this.length;
      while(length--) {
        if (this[length] === value) {
          break;
        }
      }
      return length;
    },
    // http://www.w3.org/TR/domcore/#domtokenlist
    verifyToken = function (token) {
      if (!token) {
        throw 'SyntaxError';
      } else if (spaces.test(token)) {
        throw 'InvalidCharacterError';
      }
      return token;
    },
    DOMTokenList = function (node) {
      var
        noClassName = typeof node.className === 'undefined',
        className = noClassName ?
          (node.getAttribute('class') || '') : node.className,
        isSVG = noClassName || typeof className === 'object',
        value = (isSVG ?
          (noClassName ? className : className.baseVal) :
          className
        ).replace(trim, '')
      ;
      if (value.length) {
        properties.push.apply(
          this,
          value.split(spaces)
        );
      }
      this._isSVG = isSVG;
      this._ = node;
    },
    classListDescriptor = {
      get: function get() {
        return new DOMTokenList(this);
      },
      set: function(){}
    },
    uid = 'dom4-tmp-'.concat(Math.random() * +new Date()).replace('.','-'),
    trim = /^\s+|\s+$/g,
    spaces = /\s+/,
    SPACE = '\x20',
    CLASS_LIST = 'classList',
    toggle = function toggle(token, force) {
      if (this.contains(token)) {
        if (!force) {
          // force is not true (either false or omitted)
          this.remove(token);
        }
      } else if(force === undefined || force) {
        force = true;
        this.add(token);
      }
      return !!force;
    },
    DocumentFragmentPrototype = window.DocumentFragment && DocumentFragment.prototype,
    Node = window.Node,
    NodePrototype = (Node || Element).prototype,
    CharacterData = window.CharacterData || Node,
    CharacterDataPrototype = CharacterData && CharacterData.prototype,
    DocumentType = window.DocumentType,
    DocumentTypePrototype = DocumentType && DocumentType.prototype,
    ElementPrototype = (window.Element || Node || window.HTMLElement).prototype,
    HTMLSelectElement = window.HTMLSelectElement || createElement('select').constructor,
    selectRemove = HTMLSelectElement.prototype.remove,
    ShadowRoot = window.ShadowRoot,
    SVGElement = window.SVGElement,
    // normalizes multiple ids as CSS query
    idSpaceFinder = / /g,
    idSpaceReplacer = '\\ ',
    createQueryMethod = function (methodName) {
      var createArray = methodName === 'querySelectorAll';
      return function (css) {
        var a, i, id, query, nl, selectors, node = this.parentNode;
        if (node) {
          for (
            id = this.getAttribute('id') || uid,
            query = id === uid ? id : id.replace(idSpaceFinder, idSpaceReplacer),
            selectors = css.split(','),
            i = 0; i < selectors.length; i++
          ) {
            selectors[i] = '#' + query + ' ' + selectors[i];
          }
          css = selectors.join(',');
        }
        if (id === uid) this.setAttribute('id', id);
        nl = (node || this)[methodName](css);
        if (id === uid) this.removeAttribute('id');
        // return a list
        if (createArray) {
          i = nl.length;
          a = new Array(i);
          while (i--) a[i] = nl[i];
        }
        // return node or null
        else {
          a = nl;
        }
        return a;
      };
    },
    addQueryAndAll = function (where) {
      if (!('query' in where)) {
        where.query = ElementPrototype.query;
      }
      if (!('queryAll' in where)) {
        where.queryAll = ElementPrototype.queryAll;
      }
    },
    properties = [
      'matches', (
        ElementPrototype.matchesSelector ||
        ElementPrototype.webkitMatchesSelector ||
        ElementPrototype.khtmlMatchesSelector ||
        ElementPrototype.mozMatchesSelector ||
        ElementPrototype.msMatchesSelector ||
        ElementPrototype.oMatchesSelector ||
        function matches(selector) {
          var parentNode = this.parentNode;
          return !!parentNode && -1 < indexOf.call(
            parentNode.querySelectorAll(selector),
            this
          );
        }
      ),
      'closest', function closest(selector) {
        var parentNode = this, matches;
        while (
          // document has no .matches
          (matches = parentNode && parentNode.matches) &&
          !parentNode.matches(selector)
        ) {
          parentNode = parentNode.parentNode;
        }
        return matches ? parentNode : null;
      },
      'prepend', function prepend() {
        var firstChild = this.firstChild,
            node = mutationMacro(arguments);
        if (firstChild) {
          this.insertBefore(node, firstChild);
        } else {
          this.appendChild(node);
        }
      },
      'append', function append() {
        this.appendChild(mutationMacro(arguments));
      },
      'before', function before() {
        var parentNode = this.parentNode;
        if (parentNode) {
          parentNode.insertBefore(
            mutationMacro(arguments), this
          );
        }
      },
      'after', function after() {
        var parentNode = this.parentNode,
            nextSibling = this.nextSibling,
            node = mutationMacro(arguments);
        if (parentNode) {
          if (nextSibling) {
            parentNode.insertBefore(node, nextSibling);
          } else {
            parentNode.appendChild(node);
          }
        }
      },
      // WARNING - DEPRECATED - use .replaceWith() instead
      'replace', function replace() {
        this.replaceWith.apply(this, arguments);
      },
      'replaceWith', function replaceWith() {
        var parentNode = this.parentNode;
        if (parentNode) {
          parentNode.replaceChild(
            mutationMacro(arguments),
            this
          );
        }
      },
      'remove', function remove() {
        var parentNode = this.parentNode;
        if (parentNode) {
          parentNode.removeChild(this);
        }
      },
      'query', createQueryMethod('querySelector'),
      'queryAll', createQueryMethod('querySelectorAll')
    ],
    slice = properties.slice,
    i = properties.length; i; i -= 2
  ) {
    property = properties[i - 2];
    if (!(property in ElementPrototype)) {
      ElementPrototype[property] = properties[i - 1];
    }
    if (property === 'remove') {
      // see https://github.com/WebReflection/dom4/issues/19
      HTMLSelectElement.prototype[property] = function () {
        return 0 < arguments.length ?
          selectRemove.apply(this, arguments) :
          ElementPrototype.remove.call(this);
      };
    }
    // see https://github.com/WebReflection/dom4/issues/18
    if (/^(?:before|after|replace|replaceWith|remove)$/.test(property)) {
      if (CharacterData && !(property in CharacterDataPrototype)) {
        CharacterDataPrototype[property] = properties[i - 1];
      }
      if (DocumentType && !(property in DocumentTypePrototype)) {
        DocumentTypePrototype[property] = properties[i - 1];
      }
    }
    // see https://github.com/WebReflection/dom4/pull/26
    if (/^(?:append|prepend)$/.test(property)) {
      if (DocumentFragmentPrototype) {
        if (!(property in DocumentFragmentPrototype)) {
          DocumentFragmentPrototype[property] = properties[i - 1];
        }
      } else {
        try {
          createDocumentFragment().constructor.prototype[property] = properties[i - 1];
        } catch(o_O) {}
      }
    }
  }

  // bring query and queryAll to the document too
  addQueryAndAll(document);

  // brings query and queryAll to fragments as well
  if (DocumentFragmentPrototype) {
    addQueryAndAll(DocumentFragmentPrototype);
  } else {
    try {
      addQueryAndAll(createDocumentFragment().constructor.prototype);
    } catch(o_O) {}
  }

  // bring query and queryAll to the ShadowRoot too
  if (ShadowRoot) {
    addQueryAndAll(ShadowRoot.prototype);
  }

  // most likely an IE9 only issue
  // see https://github.com/WebReflection/dom4/issues/6
  if (!createElement('a').matches('a')) {
    ElementPrototype[property] = function(matches){
      return function (selector) {
        return matches.call(
          this.parentNode ?
            this :
            createDocumentFragment().appendChild(this),
          selector
        );
      };
    }(ElementPrototype[property]);
  }

  // used to fix both old webkit and SVG
  DOMTokenList.prototype = {
    length: 0,
    add: function add() {
      for(var j = 0, token; j < arguments.length; j++) {
        token = arguments[j];
        if(!this.contains(token)) {
          properties.push.call(this, property);
        }
      }
      if (this._isSVG) {
        this._.setAttribute('class', '' + this);
      } else {
        this._.className = '' + this;
      }
    },
    contains: (function(indexOf){
      return function contains(token) {
        i = indexOf.call(this, property = verifyToken(token));
        return -1 < i;
      };
    }([].indexOf || function (token) {
      i = this.length;
      while(i-- && this[i] !== token){}
      return i;
    })),
    item: function item(i) {
      return this[i] || null;
    },
    remove: function remove() {
      for(var j = 0, token; j < arguments.length; j++) {
        token = arguments[j];
        if(this.contains(token)) {
          properties.splice.call(this, i, 1);
        }
      }
      if (this._isSVG) {
        this._.setAttribute('class', '' + this);
      } else {
        this._.className = '' + this;
      }
    },
    toggle: toggle,
    toString: function toString() {
      return properties.join.call(this, SPACE);
    }
  };

  if (SVGElement && !(CLASS_LIST in SVGElement.prototype)) {
    defineProperty(SVGElement.prototype, CLASS_LIST, classListDescriptor);
  }

  // http://www.w3.org/TR/dom/#domtokenlist
  // iOS 5.1 has completely screwed this property
  // classList in ElementPrototype is false
  // but it's actually there as getter
  if (!(CLASS_LIST in document.documentElement)) {
    defineProperty(ElementPrototype, CLASS_LIST, classListDescriptor);
  } else {
    // iOS 5.1 and Nokia ASHA do not support multiple add or remove
    // trying to detect and fix that in here
    TemporaryTokenList = createElement('div')[CLASS_LIST];
    TemporaryTokenList.add('a', 'b', 'a');
    if ('a\x20b' != TemporaryTokenList) {
      // no other way to reach original methods in iOS 5.1
      TemporaryPrototype = TemporaryTokenList.constructor.prototype;
      if (!('add' in TemporaryPrototype)) {
        // ASHA double fails in here
        TemporaryPrototype = window.TemporaryTokenList.prototype;
      }
      wrapVerifyToken = function (original) {
        return function () {
          var i = 0;
          while (i < arguments.length) {
            original.call(this, arguments[i++]);
          }
        };
      };
      TemporaryPrototype.add = wrapVerifyToken(TemporaryPrototype.add);
      TemporaryPrototype.remove = wrapVerifyToken(TemporaryPrototype.remove);
      // toggle is broken too ^_^ ... let's fix it
      TemporaryPrototype.toggle = toggle;
    }
  }

  if (!('contains' in NodePrototype)) {
    defineProperty(NodePrototype, 'contains', {
      value: function (el) {
        while (el && el !== this) el = el.parentNode;
        return this === el;
      }
    });
  }

  if (!('head' in document)) {
    defineProperty(document, 'head', {
      get: function () {
        return head || (
          head = document.getElementsByTagName('head')[0]
        );
      }
    });
  }

  // requestAnimationFrame partial polyfill
  (function () {
    for (var
      raf,
      rAF = window.requestAnimationFrame,
      cAF = window.cancelAnimationFrame,
      prefixes = ['o', 'ms', 'moz', 'webkit'],
      i = prefixes.length;
      !cAF && i--;
    ) {
      rAF = rAF || window[prefixes[i] + 'RequestAnimationFrame'];
      cAF = window[prefixes[i] + 'CancelAnimationFrame'] ||
            window[prefixes[i] + 'CancelRequestAnimationFrame'];
    }
    if (!cAF) {
      // some FF apparently implemented rAF but no cAF 
      if (rAF) {
        raf = rAF;
        rAF = function (callback) {
          var goOn = true;
          raf(function () {
            if (goOn) callback.apply(this, arguments);
          });
          return function () {
            goOn = false;
          };
        };
        cAF = function (id) {
          id();
        };
      } else {
        rAF = function (callback) {
          return setTimeout(callback, 15, 15);
        };
        cAF = function (id) {
          clearTimeout(id);
        };
      }
    }
    window.requestAnimationFrame = rAF;
    window.cancelAnimationFrame = cAF;
  }());

  // http://www.w3.org/TR/dom/#customevent
  try{new window.CustomEvent('?');}catch(o_O){
    window.CustomEvent = function(
      eventName,
      defaultInitDict
    ){

      // the infamous substitute
      function CustomEvent(type, eventInitDict) {
        /*jshint eqnull:true */
        var event = document.createEvent(eventName);
        if (typeof type != 'string') {
          throw new Error('An event name must be provided');
        }
        if (eventName == 'Event') {
          event.initCustomEvent = initCustomEvent;
        }
        if (eventInitDict == null) {
          eventInitDict = defaultInitDict;
        }
        event.initCustomEvent(
          type,
          eventInitDict.bubbles,
          eventInitDict.cancelable,
          eventInitDict.detail
        );
        return event;
      }

      // attached at runtime
      function initCustomEvent(
        type, bubbles, cancelable, detail
      ) {
        /*jshint validthis:true*/
        this.initEvent(type, bubbles, cancelable);
        this.detail = detail;
      }

      // that's it
      return CustomEvent;
    }(
      // is this IE9 or IE10 ?
      // where CustomEvent is there
      // but not usable as construtor ?
      window.CustomEvent ?
        // use the CustomEvent interface in such case
        'CustomEvent' : 'Event',
        // otherwise the common compatible one
      {
        bubbles: false,
        cancelable: false,
        detail: null
      }
    );
  }

  // window.Event as constructor
  try { new Event('_'); } catch (o_O) {
    /* jshint -W022 */
    o_O = (function ($Event) {
      function Event(type, init) {
        enoughArguments(arguments.length, 'Event');
        var out = document.createEvent('Event');
        if (!init) init = {};
        out.initEvent(
          type,
          !!init.bubbles,
          !!init.cancelable
        );
        return out;
      }
      Event.prototype = $Event.prototype;
      return Event;
    }(window.Event || function Event() {}));
    defineProperty(window, 'Event', {value: o_O});
    // Android 4 gotcha
    if (Event !== o_O) Event = o_O;
  }

  // window.KeyboardEvent as constructor
  try { new KeyboardEvent('_', {}); } catch (o_O) {
    /* jshint -W022 */
    o_O = (function ($KeyboardEvent) {
      // code inspired by https://gist.github.com/termi/4654819
      var
        initType = 0,
        defaults = {
          char: '',
          key: '',
          location: 0,
          ctrlKey: false,
          shiftKey: false,
          altKey: false,
          metaKey: false,
          altGraphKey: false,
          repeat: false,
          locale: navigator.language,
          detail: 0,
          bubbles: false,
          cancelable: false,
          keyCode: 0,
          charCode: 0,
          which: 0
        },
        eventType
      ;
      try {
        var e = document.createEvent('KeyboardEvent');
        e.initKeyboardEvent(
          'keyup', false, false, window, '+', 3,
          true, false, true, false, false
        );
        initType = (
          (e.keyIdentifier || e.key) == '+' &&
          (e.keyLocation || e.location) == 3
        ) && (
          e.ctrlKey ? e.altKey ? 1 : 3 : e.shiftKey ? 2 : 4
        ) || 9;
      } catch(o_O) {}
      eventType = 0 < initType ? 'KeyboardEvent' : 'Event';

      function getModifier(init) {
        for (var
          out = [],
          keys = [
            'ctrlKey',
            'Control',
            'shiftKey',
            'Shift',
            'altKey',
            'Alt',
            'metaKey',
            'Meta',
            'altGraphKey',
            'AltGraph'
          ],
          i = 0; i < keys.length; i += 2
        ) {
          if (init[keys[i]])
            out.push(keys[i + 1]);
        }
        return out.join(' ');
      }

      function withDefaults(target, source) {
        for (var key in source) {
          if (
            source.hasOwnProperty(key) &&
            !source.hasOwnProperty.call(target, key)
          ) target[key] = source[key];
        }
        return target;
      }

      function withInitValues(key, out, init) {
        try {
          out[key] = init[key];
        } catch(o_O) {}
      }

      function KeyboardEvent(type, init) {
        enoughArguments(arguments.length, 'KeyboardEvent');
        init = withDefaults(init || {}, defaults);
        var
          out = document.createEvent(eventType),
          ctrlKey = init.ctrlKey,
          shiftKey = init.shiftKey,
          altKey = init.altKey,
          metaKey = init.metaKey,
          altGraphKey = init.altGraphKey,
          modifiers = initType > 3 ? getModifier(init) : null,
          key = String(init.key),
          chr = String(init.char),
          location = init.location,
          keyCode = init.keyCode || (
            (init.keyCode = key) &&
            key.charCodeAt(0)
          ) || 0,
          charCode = init.charCode || (
            (init.charCode = chr) &&
            chr.charCodeAt(0)
          ) || 0,
          bubbles = init.bubbles,
          cancelable = init.cancelable,
          repeat = init.repeat,
          locale = init.locale,
          view = init.view || window,
          args
        ;
        if (!init.which) init.which = init.keyCode;
        if ('initKeyEvent' in out) {
          out.initKeyEvent(
            type, bubbles, cancelable, view,
            ctrlKey, altKey, shiftKey, metaKey, keyCode, charCode
          );
        } else if (0 < initType && 'initKeyboardEvent' in out) {
          args = [type, bubbles, cancelable, view];
          switch (initType) {
            case 1:
              args.push(key, location, ctrlKey, shiftKey, altKey, metaKey, altGraphKey);
              break;
            case 2:
              args.push(ctrlKey, altKey, shiftKey, metaKey, keyCode, charCode);
              break;
            case 3:
              args.push(key, location, ctrlKey, altKey, shiftKey, metaKey, altGraphKey);
              break;
            case 4:
              args.push(key, location, modifiers, repeat, locale);
              break;
            default:
              args.push(char, key, location, modifiers, repeat, locale);
          }
          out.initKeyboardEvent.apply(out, args);
        } else {
          out.initEvent(type, bubbles, cancelable);
        }
        for (key in out) {
          if (defaults.hasOwnProperty(key) && out[key] !== init[key]) {
            withInitValues(key, out, init);
          }
        }
        return out;
      }
      KeyboardEvent.prototype = $KeyboardEvent.prototype;
      return KeyboardEvent;
    }(window.KeyboardEvent || function KeyboardEvent() {}));
    defineProperty(window, 'KeyboardEvent', {value: o_O});
    // Android 4 gotcha
    if (KeyboardEvent !== o_O) KeyboardEvent = o_O;
  }

  // window.MouseEvent as constructor
  try { new MouseEvent('_', {}); } catch (o_O) {
    /* jshint -W022 */
    o_O = (function ($MouseEvent) {
      function MouseEvent(type, init) {
        enoughArguments(arguments.length, 'MouseEvent');
        var out = document.createEvent('MouseEvent');
        if (!init) init = {};
        out.initMouseEvent(
          type,
          !!init.bubbles,
          !!init.cancelable,
          init.view || window,
          init.detail || 1,
          init.screenX || 0,
          init.screenY || 0,
          init.clientX || 0,
          init.clientY || 0,
          !!init.ctrlKey,
          !!init.altKey,
          !!init.shiftKey,
          !!init.metaKey,
          init.button || 0,
          init.relatedTarget || null
        );
        return out;
      }
      MouseEvent.prototype = $MouseEvent.prototype;
      return MouseEvent;
    }(window.MouseEvent || function MouseEvent() {}));
    defineProperty(window, 'MouseEvent', {value: o_O});
    // Android 4 gotcha
    if (MouseEvent !== o_O) MouseEvent = o_O;
  }

}(window));(function (global){'use strict';

  // a WeakMap fallback for DOM nodes only used as key
  var DOMMap = global.WeakMap || (function () {

    var
      counter = 0,
      dispatched = false,
      drop = false,
      value
    ;

    function dispatch(key, ce, shouldDrop) {
      drop = shouldDrop;
      dispatched = false;
      value = undefined;
      key.dispatchEvent(ce);
    }

    function Handler(value) {
      this.value = value;
    }

    Handler.prototype.handleEvent = function handleEvent(e) {
      dispatched = true;
      if (drop) {
        e.currentTarget.removeEventListener(e.type, this, false);
      } else {
        value = this.value;
      }
    };

    function DOMMap() {
      counter++;  // make id clashing highly improbable
      this.__ce__ = new Event(('@DOMMap:' + counter) + Math.random());
    }

    DOMMap.prototype = {
      'constructor': DOMMap,
      'delete': function del(key) {
        return dispatch(key, this.__ce__, true), dispatched;
      },
      'get': function get(key) {
        dispatch(key, this.__ce__, false);
        var v = value;
        value = undefined;
        return v;
      },
      'has': function has(key) {
        return dispatch(key, this.__ce__, false), dispatched;
      },
      'set': function set(key, value) {
        dispatch(key, this.__ce__, true);
        key.addEventListener(this.__ce__.type, new Handler(value), false);
        return this;
      },
    };

    return DOMMap;

  }());

  function Dict() {}
  Dict.prototype = (Object.create || Object)(null);

  // https://dom.spec.whatwg.org/#interface-eventtarget

  function createEventListener(type, callback, options) {
    function eventListener(e) {
      if (eventListener.once) {
        e.currentTarget.removeEventListener(
          e.type,
          callback,
          eventListener
        );
        eventListener.removed = true;
      }
      if (eventListener.passive) {
        e.preventDefault = createEventListener.preventDefault;
      }
      if (typeof eventListener.callback === 'function') {
        /* jshint validthis: true */
        eventListener.callback.call(this, e);
      } else if (eventListener.callback) {
        eventListener.callback.handleEvent(e);
      }
      if (eventListener.passive) {
        delete e.preventDefault;
      }
    }
    eventListener.type = type;
    eventListener.callback = callback;
    eventListener.capture = !!options.capture;
    eventListener.passive = !!options.passive;
    eventListener.once = !!options.once;
    // currently pointless but specs say to use it, so ...
    eventListener.removed = false;
    return eventListener;
  }

  createEventListener.preventDefault = function preventDefault() {};

  var
    Event = global.CustomEvent,
    hOP = Object.prototype.hasOwnProperty,
    dE = global.dispatchEvent,
    aEL = global.addEventListener,
    rEL = global.removeEventListener,
    counter = 0,
    increment = function () { counter++; },
    indexOf = [].indexOf || function indexOf(value){
      var length = this.length;
      while(length--) {
        if (this[length] === value) {
          break;
        }
      }
      return length;
    },
    getListenerKey = function (options) {
      return ''.concat(
        options.capture ? '1' : '0',
        options.passive ? '1' : '0',
        options.once ? '1' : '0'
      );
    },
    augment, proto
  ;

  try {
    aEL('_', increment, {once: true});
    dE(new Event('_'));
    dE(new Event('_'));
    rEL('_', increment, {once: true});
  } catch(o_O) {}

  if (counter !== 1) {
    (function () {
      var dm = new DOMMap();
      function createAEL(aEL) {
        return function addEventListener(type, handler, options) {
          if (options && typeof options !== 'boolean') {
            var
              info = dm.get(this),
              key = getListenerKey(options),
              i, tmp, wrap
            ;
            if (!info) dm.set(this, (info = new Dict()));
            if (!(type in info)) info[type] = {
              handler: [],
              wrap: []
            };
            tmp = info[type];
            i = indexOf.call(tmp.handler, handler);
            if (i < 0) {
              i = tmp.handler.push(handler) - 1;
              tmp.wrap[i] = (wrap = new Dict());
            } else {
              wrap = tmp.wrap[i];
            }
            if (!(key in wrap)) {
              wrap[key] = createEventListener(type, handler, options);
              aEL.call(this, type, wrap[key], wrap[key].capture);
            }
          } else {
            aEL.call(this, type, handler, options);
          }
        };
      }
      function createREL(rEL) {
        return function removeEventListener(type, handler, options) {
          if (options && typeof options !== 'boolean') {
            var
              info = dm.get(this),
              key, i, tmp, wrap
            ;
            if (info && (type in info)) {
              tmp = info[type];
              i = indexOf.call(tmp.handler, handler);
              if (-1 < i) {
                key = getListenerKey(options);
                wrap = tmp.wrap[i];
                if (key in wrap) {
                  rEL.call(this, type, wrap[key], wrap[key].capture);
                  delete wrap[key];
                  // return if there are other wraps
                  for (key in wrap) return;
                  // otherwise remove all the things
                  tmp.handler.splice(i, 1);
                  tmp.wrap.splice(i, 1);
                  // if there are no other handlers
                  if (tmp.handler.length === 0)
                    // drop the info[type] entirely
                    delete info[type];
                }
              }
            }
          } else {
            rEL.call(this, type, handler, options);
          }
        };
      }

      augment = function (Constructor) {
        if (!Constructor) return;
        var proto = Constructor.prototype;
        proto.addEventListener = createAEL(proto.addEventListener);
        proto.removeEventListener = createREL(proto.removeEventListener);
      };

      if (global.EventTarget) {
        augment(EventTarget);
      } else {
        augment(global.Text);
        augment(global.Element || global.HTMLElement);
        augment(global.HTMLDocument);
        augment(global.Window || {prototype:global});
        augment(global.XMLHttpRequest);
      }

    }());
  }

}(self));
},{}],160:[function(require,module,exports){
'use strict';

var OneVersionConstraint = require('individual/one-version');

var MY_VERSION = '7';
OneVersionConstraint('ev-store', MY_VERSION);

var hashKey = '__EV_STORE_KEY@' + MY_VERSION;

module.exports = EvStore;

function EvStore(elem) {
    var hash = elem[hashKey];

    if (!hash) {
        hash = elem[hashKey] = {};
    }

    return hash;
}

},{"individual/one-version":183}],161:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],162:[function(require,module,exports){
'use strict';

var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;

var isArray = function isArray(arr) {
	if (typeof Array.isArray === 'function') {
		return Array.isArray(arr);
	}

	return toStr.call(arr) === '[object Array]';
};

var isPlainObject = function isPlainObject(obj) {
	if (!obj || toStr.call(obj) !== '[object Object]') {
		return false;
	}

	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
	// Not own constructor property must be Object
	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
		return false;
	}

	// Own properties are enumerated firstly, so to speed up,
	// if last one is own, then all properties are own.
	var key;
	for (key in obj) {/**/}

	return typeof key === 'undefined' || hasOwn.call(obj, key);
};

module.exports = function extend() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0],
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if (typeof target === 'boolean') {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {
		target = {};
	}

	for (; i < length; ++i) {
		options = arguments[i];
		// Only deal with non-null/undefined values
		if (options != null) {
			// Extend the base object
			for (name in options) {
				src = target[name];
				copy = options[name];

				// Prevent never-ending loop
				if (target !== copy) {
					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
						if (copyIsArray) {
							copyIsArray = false;
							clone = src && isArray(src) ? src : [];
						} else {
							clone = src && isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[name] = extend(deep, clone, copy);

					// Don't bring in undefined values
					} else if (typeof copy !== 'undefined') {
						target[name] = copy;
					}
				}
			}
		}
	}

	// Return the modified object
	return target;
};


},{}],163:[function(require,module,exports){
var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};

},{}],164:[function(require,module,exports){
var implementation = require('./implementation');

module.exports = Function.prototype.bind || implementation;

},{"./implementation":163}],165:[function(require,module,exports){
module.exports={
  "😄": {
    "description": "smiling face with open mouth and smiling eyes",
    "names": [
      "smile"
    ],
    "tags": [
      "happy",
      "joy",
      "pleased"
    ]
  },
  "😃": {
    "description": "smiling face with open mouth",
    "names": [
      "smiley"
    ],
    "tags": [
      "happy",
      "joy",
      "haha"
    ]
  },
  "😀": {
    "description": "grinning face",
    "names": [
      "grinning"
    ],
    "tags": [
      "smile",
      "happy"
    ]
  },
  "😊": {
    "description": "smiling face with smiling eyes",
    "names": [
      "blush"
    ],
    "tags": [
      "proud"
    ]
  },
  "☺️": {
    "description": "white smiling face",
    "names": [
      "relaxed"
    ],
    "tags": [
      "blush",
      "pleased"
    ]
  },
  "😉": {
    "description": "winking face",
    "names": [
      "wink"
    ],
    "tags": [
      "flirt"
    ]
  },
  "😍": {
    "description": "smiling face with heart-shaped eyes",
    "names": [
      "heart_eyes"
    ],
    "tags": [
      "love",
      "crush"
    ]
  },
  "😘": {
    "description": "face throwing a kiss",
    "names": [
      "kissing_heart"
    ],
    "tags": [
      "flirt"
    ]
  },
  "😚": {
    "description": "kissing face with closed eyes",
    "names": [
      "kissing_closed_eyes"
    ],
    "tags": []
  },
  "😗": {
    "description": "kissing face",
    "names": [
      "kissing"
    ],
    "tags": []
  },
  "😙": {
    "description": "kissing face with smiling eyes",
    "names": [
      "kissing_smiling_eyes"
    ],
    "tags": []
  },
  "😜": {
    "description": "face with stuck-out tongue and winking eye",
    "names": [
      "stuck_out_tongue_winking_eye"
    ],
    "tags": [
      "prank",
      "silly"
    ]
  },
  "😝": {
    "description": "face with stuck-out tongue and tightly-closed eyes",
    "names": [
      "stuck_out_tongue_closed_eyes"
    ],
    "tags": [
      "prank"
    ]
  },
  "😛": {
    "description": "face with stuck-out tongue",
    "names": [
      "stuck_out_tongue"
    ],
    "tags": []
  },
  "😳": {
    "description": "flushed face",
    "names": [
      "flushed"
    ],
    "tags": []
  },
  "😁": {
    "description": "grinning face with smiling eyes",
    "names": [
      "grin"
    ],
    "tags": []
  },
  "😔": {
    "description": "pensive face",
    "names": [
      "pensive"
    ],
    "tags": []
  },
  "😌": {
    "description": "relieved face",
    "names": [
      "relieved"
    ],
    "tags": [
      "whew"
    ]
  },
  "😒": {
    "description": "unamused face",
    "names": [
      "unamused"
    ],
    "tags": [
      "meh"
    ]
  },
  "😞": {
    "description": "disappointed face",
    "names": [
      "disappointed"
    ],
    "tags": [
      "sad"
    ]
  },
  "😣": {
    "description": "persevering face",
    "names": [
      "persevere"
    ],
    "tags": [
      "struggling"
    ]
  },
  "😢": {
    "description": "crying face",
    "names": [
      "cry"
    ],
    "tags": [
      "sad",
      "tear"
    ]
  },
  "😂": {
    "description": "face with tears of joy",
    "names": [
      "joy"
    ],
    "tags": [
      "tears"
    ]
  },
  "😭": {
    "description": "loudly crying face",
    "names": [
      "sob"
    ],
    "tags": [
      "sad",
      "cry",
      "bawling"
    ]
  },
  "😪": {
    "description": "sleepy face",
    "names": [
      "sleepy"
    ],
    "tags": [
      "tired"
    ]
  },
  "😥": {
    "description": "disappointed but relieved face",
    "names": [
      "disappointed_relieved"
    ],
    "tags": [
      "phew",
      "sweat",
      "nervous"
    ]
  },
  "😰": {
    "description": "face with open mouth and cold sweat",
    "names": [
      "cold_sweat"
    ],
    "tags": [
      "nervous"
    ]
  },
  "😅": {
    "description": "smiling face with open mouth and cold sweat",
    "names": [
      "sweat_smile"
    ],
    "tags": [
      "hot"
    ]
  },
  "😓": {
    "description": "face with cold sweat",
    "names": [
      "sweat"
    ],
    "tags": []
  },
  "😩": {
    "description": "weary face",
    "names": [
      "weary"
    ],
    "tags": [
      "tired"
    ]
  },
  "😫": {
    "description": "tired face",
    "names": [
      "tired_face"
    ],
    "tags": [
      "upset",
      "whine"
    ]
  },
  "😨": {
    "description": "fearful face",
    "names": [
      "fearful"
    ],
    "tags": [
      "scared",
      "shocked",
      "oops"
    ]
  },
  "😱": {
    "description": "face screaming in fear",
    "names": [
      "scream"
    ],
    "tags": [
      "horror",
      "shocked"
    ]
  },
  "😠": {
    "description": "angry face",
    "names": [
      "angry"
    ],
    "tags": [
      "mad",
      "annoyed"
    ]
  },
  "😡": {
    "description": "pouting face",
    "names": [
      "rage"
    ],
    "tags": [
      "angry"
    ]
  },
  "😤": {
    "description": "face with look of triumph",
    "names": [
      "triumph"
    ],
    "tags": [
      "smug"
    ]
  },
  "😖": {
    "description": "confounded face",
    "names": [
      "confounded"
    ],
    "tags": []
  },
  "😆": {
    "description": "smiling face with open mouth and tightly-closed eyes",
    "names": [
      "laughing",
      "satisfied"
    ],
    "tags": [
      "happy",
      "haha"
    ]
  },
  "😋": {
    "description": "face savouring delicious food",
    "names": [
      "yum"
    ],
    "tags": [
      "tongue",
      "lick"
    ]
  },
  "😷": {
    "description": "face with medical mask",
    "names": [
      "mask"
    ],
    "tags": [
      "sick",
      "ill"
    ]
  },
  "😎": {
    "description": "smiling face with sunglasses",
    "names": [
      "sunglasses"
    ],
    "tags": [
      "cool"
    ]
  },
  "😴": {
    "description": "sleeping face",
    "names": [
      "sleeping"
    ],
    "tags": [
      "zzz"
    ]
  },
  "😵": {
    "description": "dizzy face",
    "names": [
      "dizzy_face"
    ],
    "tags": []
  },
  "😲": {
    "description": "astonished face",
    "names": [
      "astonished"
    ],
    "tags": [
      "amazed",
      "gasp"
    ]
  },
  "😟": {
    "description": "worried face",
    "names": [
      "worried"
    ],
    "tags": [
      "nervous"
    ]
  },
  "😦": {
    "description": "frowning face with open mouth",
    "names": [
      "frowning"
    ],
    "tags": []
  },
  "😧": {
    "description": "anguished face",
    "names": [
      "anguished"
    ],
    "tags": [
      "stunned"
    ]
  },
  "😈": {
    "description": "smiling face with horns",
    "names": [
      "smiling_imp"
    ],
    "tags": [
      "devil",
      "evil",
      "horns"
    ]
  },
  "👿": {
    "description": "imp",
    "names": [
      "imp"
    ],
    "tags": [
      "angry",
      "devil",
      "evil",
      "horns"
    ]
  },
  "😮": {
    "description": "face with open mouth",
    "names": [
      "open_mouth"
    ],
    "tags": [
      "surprise",
      "impressed",
      "wow"
    ]
  },
  "😬": {
    "description": "grimacing face",
    "names": [
      "grimacing"
    ],
    "tags": []
  },
  "😐": {
    "description": "neutral face",
    "names": [
      "neutral_face"
    ],
    "tags": [
      "meh"
    ]
  },
  "😕": {
    "description": "confused face",
    "names": [
      "confused"
    ],
    "tags": []
  },
  "😯": {
    "description": "hushed face",
    "names": [
      "hushed"
    ],
    "tags": [
      "silence",
      "speechless"
    ]
  },
  "😶": {
    "description": "face without mouth",
    "names": [
      "no_mouth"
    ],
    "tags": [
      "mute",
      "silence"
    ]
  },
  "😇": {
    "description": "smiling face with halo",
    "names": [
      "innocent"
    ],
    "tags": [
      "angel"
    ]
  },
  "😏": {
    "description": "smirking face",
    "names": [
      "smirk"
    ],
    "tags": [
      "smug"
    ]
  },
  "😑": {
    "description": "expressionless face",
    "names": [
      "expressionless"
    ],
    "tags": []
  },
  "👲": {
    "description": "man with gua pi mao",
    "names": [
      "man_with_gua_pi_mao"
    ],
    "tags": []
  },
  "👳": {
    "description": "man with turban",
    "names": [
      "man_with_turban"
    ],
    "tags": []
  },
  "👮": {
    "description": "police officer",
    "names": [
      "cop"
    ],
    "tags": [
      "police",
      "law"
    ]
  },
  "👷": {
    "description": "construction worker",
    "names": [
      "construction_worker"
    ],
    "tags": [
      "helmet"
    ]
  },
  "💂": {
    "description": "guardsman",
    "names": [
      "guardsman"
    ],
    "tags": []
  },
  "👶": {
    "description": "baby",
    "names": [
      "baby"
    ],
    "tags": [
      "child",
      "newborn"
    ]
  },
  "👦": {
    "description": "boy",
    "names": [
      "boy"
    ],
    "tags": [
      "child"
    ]
  },
  "👧": {
    "description": "girl",
    "names": [
      "girl"
    ],
    "tags": [
      "child"
    ]
  },
  "👨": {
    "description": "man",
    "names": [
      "man"
    ],
    "tags": [
      "mustache",
      "father",
      "dad"
    ]
  },
  "👩": {
    "description": "woman",
    "names": [
      "woman"
    ],
    "tags": [
      "girls"
    ]
  },
  "👴": {
    "description": "older man",
    "names": [
      "older_man"
    ],
    "tags": []
  },
  "👵": {
    "description": "older woman",
    "names": [
      "older_woman"
    ],
    "tags": []
  },
  "👱": {
    "description": "person with blond hair",
    "names": [
      "person_with_blond_hair"
    ],
    "tags": [
      "boy"
    ]
  },
  "👼": {
    "description": "baby angel",
    "names": [
      "angel"
    ],
    "tags": []
  },
  "👸": {
    "description": "princess",
    "names": [
      "princess"
    ],
    "tags": [
      "blonde",
      "crown",
      "royal"
    ]
  },
  "😺": {
    "description": "smiling cat face with open mouth",
    "names": [
      "smiley_cat"
    ],
    "tags": []
  },
  "😸": {
    "description": "grinning cat face with smiling eyes",
    "names": [
      "smile_cat"
    ],
    "tags": []
  },
  "😻": {
    "description": "smiling cat face with heart-shaped eyes",
    "names": [
      "heart_eyes_cat"
    ],
    "tags": []
  },
  "😽": {
    "description": "kissing cat face with closed eyes",
    "names": [
      "kissing_cat"
    ],
    "tags": []
  },
  "😼": {
    "description": "cat face with wry smile",
    "names": [
      "smirk_cat"
    ],
    "tags": []
  },
  "🙀": {
    "description": "weary cat face",
    "names": [
      "scream_cat"
    ],
    "tags": [
      "horror"
    ]
  },
  "😿": {
    "description": "crying cat face",
    "names": [
      "crying_cat_face"
    ],
    "tags": [
      "sad",
      "tear"
    ]
  },
  "😹": {
    "description": "cat face with tears of joy",
    "names": [
      "joy_cat"
    ],
    "tags": []
  },
  "😾": {
    "description": "pouting cat face",
    "names": [
      "pouting_cat"
    ],
    "tags": []
  },
  "👹": {
    "description": "japanese ogre",
    "names": [
      "japanese_ogre"
    ],
    "tags": [
      "monster"
    ]
  },
  "👺": {
    "description": "japanese goblin",
    "names": [
      "japanese_goblin"
    ],
    "tags": []
  },
  "🙈": {
    "description": "see-no-evil monkey",
    "names": [
      "see_no_evil"
    ],
    "tags": [
      "monkey",
      "blind",
      "ignore"
    ]
  },
  "🙉": {
    "description": "hear-no-evil monkey",
    "names": [
      "hear_no_evil"
    ],
    "tags": [
      "monkey",
      "deaf"
    ]
  },
  "🙊": {
    "description": "speak-no-evil monkey",
    "names": [
      "speak_no_evil"
    ],
    "tags": [
      "monkey",
      "mute",
      "hush"
    ]
  },
  "💀": {
    "description": "skull",
    "names": [
      "skull"
    ],
    "tags": [
      "dead",
      "danger",
      "poison"
    ]
  },
  "👽": {
    "description": "extraterrestrial alien",
    "names": [
      "alien"
    ],
    "tags": [
      "ufo"
    ]
  },
  "💩": {
    "description": "pile of poo",
    "names": [
      "hankey",
      "poop",
      "shit"
    ],
    "tags": [
      "crap"
    ]
  },
  "🔥": {
    "description": "fire",
    "names": [
      "fire"
    ],
    "tags": [
      "burn"
    ]
  },
  "✨": {
    "description": "sparkles",
    "names": [
      "sparkles"
    ],
    "tags": [
      "shiny"
    ]
  },
  "🌟": {
    "description": "glowing star",
    "names": [
      "star2"
    ],
    "tags": []
  },
  "💫": {
    "description": "dizzy symbol",
    "names": [
      "dizzy"
    ],
    "tags": [
      "star"
    ]
  },
  "💥": {
    "description": "collision symbol",
    "names": [
      "boom",
      "collision"
    ],
    "tags": [
      "explode"
    ]
  },
  "💢": {
    "description": "anger symbol",
    "names": [
      "anger"
    ],
    "tags": [
      "angry"
    ]
  },
  "💦": {
    "description": "splashing sweat symbol",
    "names": [
      "sweat_drops"
    ],
    "tags": [
      "water",
      "workout"
    ]
  },
  "💧": {
    "description": "droplet",
    "names": [
      "droplet"
    ],
    "tags": [
      "water"
    ]
  },
  "💤": {
    "description": "sleeping symbol",
    "names": [
      "zzz"
    ],
    "tags": [
      "sleeping"
    ]
  },
  "💨": {
    "description": "dash symbol",
    "names": [
      "dash"
    ],
    "tags": [
      "wind",
      "blow",
      "fast"
    ]
  },
  "👂": {
    "description": "ear",
    "names": [
      "ear"
    ],
    "tags": [
      "hear",
      "sound",
      "listen"
    ]
  },
  "👀": {
    "description": "eyes",
    "names": [
      "eyes"
    ],
    "tags": [
      "look",
      "see",
      "watch"
    ]
  },
  "👃": {
    "description": "nose",
    "names": [
      "nose"
    ],
    "tags": [
      "smell"
    ]
  },
  "👅": {
    "description": "tongue",
    "names": [
      "tongue"
    ],
    "tags": [
      "taste"
    ]
  },
  "👄": {
    "description": "mouth",
    "names": [
      "lips"
    ],
    "tags": [
      "kiss"
    ]
  },
  "👍": {
    "description": "thumbs up sign",
    "names": [
      "+1",
      "thumbsup"
    ],
    "tags": [
      "approve",
      "ok"
    ]
  },
  "👎": {
    "description": "thumbs down sign",
    "names": [
      "-1",
      "thumbsdown"
    ],
    "tags": [
      "disapprove",
      "bury"
    ]
  },
  "👌": {
    "description": "ok hand sign",
    "names": [
      "ok_hand"
    ],
    "tags": []
  },
  "👊": {
    "description": "fisted hand sign",
    "names": [
      "facepunch",
      "punch"
    ],
    "tags": [
      "attack"
    ]
  },
  "✊": {
    "description": "raised fist",
    "names": [
      "fist"
    ],
    "tags": [
      "power"
    ]
  },
  "✌️": {
    "description": "victory hand",
    "names": [
      "v"
    ],
    "tags": [
      "victory",
      "peace"
    ]
  },
  "👋": {
    "description": "waving hand sign",
    "names": [
      "wave"
    ],
    "tags": [
      "goodbye"
    ]
  },
  "✋": {
    "description": "raised hand",
    "names": [
      "hand",
      "raised_hand"
    ],
    "tags": [
      "highfive",
      "stop"
    ]
  },
  "👐": {
    "description": "open hands sign",
    "names": [
      "open_hands"
    ],
    "tags": []
  },
  "👆": {
    "description": "white up pointing backhand index",
    "names": [
      "point_up_2"
    ],
    "tags": []
  },
  "👇": {
    "description": "white down pointing backhand index",
    "names": [
      "point_down"
    ],
    "tags": []
  },
  "👉": {
    "description": "white right pointing backhand index",
    "names": [
      "point_right"
    ],
    "tags": []
  },
  "👈": {
    "description": "white left pointing backhand index",
    "names": [
      "point_left"
    ],
    "tags": []
  },
  "🙌": {
    "description": "person raising both hands in celebration",
    "names": [
      "raised_hands"
    ],
    "tags": [
      "hooray"
    ]
  },
  "🙏": {
    "description": "person with folded hands",
    "names": [
      "pray"
    ],
    "tags": [
      "please",
      "hope",
      "wish"
    ]
  },
  "☝️": {
    "description": "white up pointing index",
    "names": [
      "point_up"
    ],
    "tags": []
  },
  "👏": {
    "description": "clapping hands sign",
    "names": [
      "clap"
    ],
    "tags": [
      "praise",
      "applause"
    ]
  },
  "💪": {
    "description": "flexed biceps",
    "names": [
      "muscle"
    ],
    "tags": [
      "flex",
      "bicep",
      "strong",
      "workout"
    ]
  },
  "🚶": {
    "description": "pedestrian",
    "names": [
      "walking"
    ],
    "tags": []
  },
  "🏃": {
    "description": "runner",
    "names": [
      "runner",
      "running"
    ],
    "tags": [
      "exercise",
      "workout",
      "marathon"
    ]
  },
  "💃": {
    "description": "dancer",
    "names": [
      "dancer"
    ],
    "tags": [
      "dress"
    ]
  },
  "👫": {
    "description": "man and woman holding hands",
    "names": [
      "couple"
    ],
    "tags": [
      "date"
    ]
  },
  "👪": {
    "description": "family",
    "names": [
      "family"
    ],
    "tags": [
      "home",
      "parents",
      "child"
    ]
  },
  "👬": {
    "description": "two men holding hands",
    "names": [
      "two_men_holding_hands"
    ],
    "tags": [
      "couple",
      "date"
    ]
  },
  "👭": {
    "description": "two women holding hands",
    "names": [
      "two_women_holding_hands"
    ],
    "tags": [
      "couple",
      "date"
    ]
  },
  "💏": {
    "description": "kiss",
    "names": [
      "couplekiss"
    ],
    "tags": []
  },
  "💑": {
    "description": "couple with heart",
    "names": [
      "couple_with_heart"
    ],
    "tags": []
  },
  "👯": {
    "description": "woman with bunny ears",
    "names": [
      "dancers"
    ],
    "tags": [
      "bunny"
    ]
  },
  "🙆": {
    "description": "face with ok gesture",
    "names": [
      "ok_woman"
    ],
    "tags": []
  },
  "🙅": {
    "description": "face with no good gesture",
    "names": [
      "no_good"
    ],
    "tags": [
      "stop",
      "halt"
    ]
  },
  "💁": {
    "description": "information desk person",
    "names": [
      "information_desk_person"
    ],
    "tags": []
  },
  "🙋": {
    "description": "happy person raising one hand",
    "names": [
      "raising_hand"
    ],
    "tags": []
  },
  "💆": {
    "description": "face massage",
    "names": [
      "massage"
    ],
    "tags": [
      "spa"
    ]
  },
  "💇": {
    "description": "haircut",
    "names": [
      "haircut"
    ],
    "tags": [
      "beauty"
    ]
  },
  "💅": {
    "description": "nail polish",
    "names": [
      "nail_care"
    ],
    "tags": [
      "beauty",
      "manicure"
    ]
  },
  "👰": {
    "description": "bride with veil",
    "names": [
      "bride_with_veil"
    ],
    "tags": [
      "marriage",
      "wedding"
    ]
  },
  "🙎": {
    "description": "person with pouting face",
    "names": [
      "person_with_pouting_face"
    ],
    "tags": []
  },
  "🙍": {
    "description": "person frowning",
    "names": [
      "person_frowning"
    ],
    "tags": [
      "sad"
    ]
  },
  "🙇": {
    "description": "person bowing deeply",
    "names": [
      "bow"
    ],
    "tags": [
      "respect",
      "thanks"
    ]
  },
  "🎩": {
    "description": "top hat",
    "names": [
      "tophat"
    ],
    "tags": [
      "hat",
      "classy"
    ]
  },
  "👑": {
    "description": "crown",
    "names": [
      "crown"
    ],
    "tags": [
      "king",
      "queen",
      "royal"
    ]
  },
  "👒": {
    "description": "womans hat",
    "names": [
      "womans_hat"
    ],
    "tags": []
  },
  "👟": {
    "description": "athletic shoe",
    "names": [
      "athletic_shoe"
    ],
    "tags": [
      "sneaker",
      "sport",
      "running"
    ]
  },
  "👞": {
    "description": "mans shoe",
    "names": [
      "mans_shoe",
      "shoe"
    ],
    "tags": []
  },
  "👡": {
    "description": "womans sandal",
    "names": [
      "sandal"
    ],
    "tags": [
      "shoe"
    ]
  },
  "👠": {
    "description": "high-heeled shoe",
    "names": [
      "high_heel"
    ],
    "tags": [
      "shoe"
    ]
  },
  "👢": {
    "description": "womans boots",
    "names": [
      "boot"
    ],
    "tags": []
  },
  "👕": {
    "description": "t-shirt",
    "names": [
      "shirt",
      "tshirt"
    ],
    "tags": []
  },
  "👔": {
    "description": "necktie",
    "names": [
      "necktie"
    ],
    "tags": [
      "shirt",
      "formal"
    ]
  },
  "👚": {
    "description": "womans clothes",
    "names": [
      "womans_clothes"
    ],
    "tags": []
  },
  "👗": {
    "description": "dress",
    "names": [
      "dress"
    ],
    "tags": []
  },
  "🎽": {
    "description": "running shirt with sash",
    "names": [
      "running_shirt_with_sash"
    ],
    "tags": [
      "marathon"
    ]
  },
  "👖": {
    "description": "jeans",
    "names": [
      "jeans"
    ],
    "tags": [
      "pants"
    ]
  },
  "👘": {
    "description": "kimono",
    "names": [
      "kimono"
    ],
    "tags": []
  },
  "👙": {
    "description": "bikini",
    "names": [
      "bikini"
    ],
    "tags": [
      "beach"
    ]
  },
  "💼": {
    "description": "briefcase",
    "names": [
      "briefcase"
    ],
    "tags": [
      "business"
    ]
  },
  "👜": {
    "description": "handbag",
    "names": [
      "handbag"
    ],
    "tags": [
      "bag"
    ]
  },
  "👝": {
    "description": "pouch",
    "names": [
      "pouch"
    ],
    "tags": [
      "bag"
    ]
  },
  "👛": {
    "description": "purse",
    "names": [
      "purse"
    ],
    "tags": []
  },
  "👓": {
    "description": "eyeglasses",
    "names": [
      "eyeglasses"
    ],
    "tags": [
      "glasses"
    ]
  },
  "🎀": {
    "description": "ribbon",
    "names": [
      "ribbon"
    ],
    "tags": []
  },
  "🌂": {
    "description": "closed umbrella",
    "names": [
      "closed_umbrella"
    ],
    "tags": [
      "weather",
      "rain"
    ]
  },
  "💄": {
    "description": "lipstick",
    "names": [
      "lipstick"
    ],
    "tags": [
      "makeup"
    ]
  },
  "💛": {
    "description": "yellow heart",
    "names": [
      "yellow_heart"
    ],
    "tags": []
  },
  "💙": {
    "description": "blue heart",
    "names": [
      "blue_heart"
    ],
    "tags": []
  },
  "💜": {
    "description": "purple heart",
    "names": [
      "purple_heart"
    ],
    "tags": []
  },
  "💚": {
    "description": "green heart",
    "names": [
      "green_heart"
    ],
    "tags": []
  },
  "❤️": {
    "description": "heavy black heart",
    "names": [
      "heart"
    ],
    "tags": [
      "love"
    ]
  },
  "💔": {
    "description": "broken heart",
    "names": [
      "broken_heart"
    ],
    "tags": []
  },
  "💗": {
    "description": "growing heart",
    "names": [
      "heartpulse"
    ],
    "tags": []
  },
  "💓": {
    "description": "beating heart",
    "names": [
      "heartbeat"
    ],
    "tags": []
  },
  "💕": {
    "description": "two hearts",
    "names": [
      "two_hearts"
    ],
    "tags": []
  },
  "💖": {
    "description": "sparkling heart",
    "names": [
      "sparkling_heart"
    ],
    "tags": []
  },
  "💞": {
    "description": "revolving hearts",
    "names": [
      "revolving_hearts"
    ],
    "tags": []
  },
  "💘": {
    "description": "heart with arrow",
    "names": [
      "cupid"
    ],
    "tags": [
      "love",
      "heart"
    ]
  },
  "💌": {
    "description": "love letter",
    "names": [
      "love_letter"
    ],
    "tags": [
      "email",
      "envelope"
    ]
  },
  "💋": {
    "description": "kiss mark",
    "names": [
      "kiss"
    ],
    "tags": [
      "lipstick"
    ]
  },
  "💍": {
    "description": "ring",
    "names": [
      "ring"
    ],
    "tags": [
      "wedding",
      "marriage",
      "engaged"
    ]
  },
  "💎": {
    "description": "gem stone",
    "names": [
      "gem"
    ],
    "tags": [
      "diamond"
    ]
  },
  "👤": {
    "description": "bust in silhouette",
    "names": [
      "bust_in_silhouette"
    ],
    "tags": [
      "user"
    ]
  },
  "👥": {
    "description": "busts in silhouette",
    "names": [
      "busts_in_silhouette"
    ],
    "tags": [
      "users",
      "group",
      "team"
    ]
  },
  "💬": {
    "description": "speech balloon",
    "names": [
      "speech_balloon"
    ],
    "tags": [
      "comment"
    ]
  },
  "👣": {
    "description": "footprints",
    "names": [
      "footprints"
    ],
    "tags": [
      "feet",
      "tracks"
    ]
  },
  "💭": {
    "description": "thought balloon",
    "names": [
      "thought_balloon"
    ],
    "tags": [
      "thinking"
    ]
  },
  "🐶": {
    "description": "dog face",
    "names": [
      "dog"
    ],
    "tags": [
      "pet"
    ]
  },
  "🐺": {
    "description": "wolf face",
    "names": [
      "wolf"
    ],
    "tags": []
  },
  "🐱": {
    "description": "cat face",
    "names": [
      "cat"
    ],
    "tags": [
      "pet"
    ]
  },
  "🐭": {
    "description": "mouse face",
    "names": [
      "mouse"
    ],
    "tags": []
  },
  "🐹": {
    "description": "hamster face",
    "names": [
      "hamster"
    ],
    "tags": [
      "pet"
    ]
  },
  "🐰": {
    "description": "rabbit face",
    "names": [
      "rabbit"
    ],
    "tags": [
      "bunny"
    ]
  },
  "🐸": {
    "description": "frog face",
    "names": [
      "frog"
    ],
    "tags": []
  },
  "🐯": {
    "description": "tiger face",
    "names": [
      "tiger"
    ],
    "tags": []
  },
  "🐨": {
    "description": "koala",
    "names": [
      "koala"
    ],
    "tags": []
  },
  "🐻": {
    "description": "bear face",
    "names": [
      "bear"
    ],
    "tags": []
  },
  "🐷": {
    "description": "pig face",
    "names": [
      "pig"
    ],
    "tags": []
  },
  "🐽": {
    "description": "pig nose",
    "names": [
      "pig_nose"
    ],
    "tags": []
  },
  "🐮": {
    "description": "cow face",
    "names": [
      "cow"
    ],
    "tags": []
  },
  "🐗": {
    "description": "boar",
    "names": [
      "boar"
    ],
    "tags": []
  },
  "🐵": {
    "description": "monkey face",
    "names": [
      "monkey_face"
    ],
    "tags": []
  },
  "🐒": {
    "description": "monkey",
    "names": [
      "monkey"
    ],
    "tags": []
  },
  "🐴": {
    "description": "horse face",
    "names": [
      "horse"
    ],
    "tags": []
  },
  "🐑": {
    "description": "sheep",
    "names": [
      "sheep"
    ],
    "tags": []
  },
  "🐘": {
    "description": "elephant",
    "names": [
      "elephant"
    ],
    "tags": []
  },
  "🐼": {
    "description": "panda face",
    "names": [
      "panda_face"
    ],
    "tags": []
  },
  "🐧": {
    "description": "penguin",
    "names": [
      "penguin"
    ],
    "tags": []
  },
  "🐦": {
    "description": "bird",
    "names": [
      "bird"
    ],
    "tags": []
  },
  "🐤": {
    "description": "baby chick",
    "names": [
      "baby_chick"
    ],
    "tags": []
  },
  "🐥": {
    "description": "front-facing baby chick",
    "names": [
      "hatched_chick"
    ],
    "tags": []
  },
  "🐣": {
    "description": "hatching chick",
    "names": [
      "hatching_chick"
    ],
    "tags": []
  },
  "🐔": {
    "description": "chicken",
    "names": [
      "chicken"
    ],
    "tags": []
  },
  "🐍": {
    "description": "snake",
    "names": [
      "snake"
    ],
    "tags": []
  },
  "🐢": {
    "description": "turtle",
    "names": [
      "turtle"
    ],
    "tags": [
      "slow"
    ]
  },
  "🐛": {
    "description": "bug",
    "names": [
      "bug"
    ],
    "tags": []
  },
  "🐝": {
    "description": "honeybee",
    "names": [
      "bee",
      "honeybee"
    ],
    "tags": []
  },
  "🐜": {
    "description": "ant",
    "names": [
      "ant"
    ],
    "tags": []
  },
  "🐞": {
    "description": "lady beetle",
    "names": [
      "beetle"
    ],
    "tags": [
      "bug"
    ]
  },
  "🐌": {
    "description": "snail",
    "names": [
      "snail"
    ],
    "tags": [
      "slow"
    ]
  },
  "🐙": {
    "description": "octopus",
    "names": [
      "octopus"
    ],
    "tags": []
  },
  "🐚": {
    "description": "spiral shell",
    "names": [
      "shell"
    ],
    "tags": [
      "sea",
      "beach"
    ]
  },
  "🐠": {
    "description": "tropical fish",
    "names": [
      "tropical_fish"
    ],
    "tags": []
  },
  "🐟": {
    "description": "fish",
    "names": [
      "fish"
    ],
    "tags": []
  },
  "🐬": {
    "description": "dolphin",
    "names": [
      "dolphin",
      "flipper"
    ],
    "tags": []
  },
  "🐳": {
    "description": "spouting whale",
    "names": [
      "whale"
    ],
    "tags": [
      "sea"
    ]
  },
  "🐋": {
    "description": "whale",
    "names": [
      "whale2"
    ],
    "tags": []
  },
  "🐄": {
    "description": "cow",
    "names": [
      "cow2"
    ],
    "tags": []
  },
  "🐏": {
    "description": "ram",
    "names": [
      "ram"
    ],
    "tags": []
  },
  "🐀": {
    "description": "rat",
    "names": [
      "rat"
    ],
    "tags": []
  },
  "🐃": {
    "description": "water buffalo",
    "names": [
      "water_buffalo"
    ],
    "tags": []
  },
  "🐅": {
    "description": "tiger",
    "names": [
      "tiger2"
    ],
    "tags": []
  },
  "🐇": {
    "description": "rabbit",
    "names": [
      "rabbit2"
    ],
    "tags": []
  },
  "🐉": {
    "description": "dragon",
    "names": [
      "dragon"
    ],
    "tags": []
  },
  "🐎": {
    "description": "horse",
    "names": [
      "racehorse"
    ],
    "tags": [
      "speed"
    ]
  },
  "🐐": {
    "description": "goat",
    "names": [
      "goat"
    ],
    "tags": []
  },
  "🐓": {
    "description": "rooster",
    "names": [
      "rooster"
    ],
    "tags": []
  },
  "🐕": {
    "description": "dog",
    "names": [
      "dog2"
    ],
    "tags": []
  },
  "🐖": {
    "description": "pig",
    "names": [
      "pig2"
    ],
    "tags": []
  },
  "🐁": {
    "description": "mouse",
    "names": [
      "mouse2"
    ],
    "tags": []
  },
  "🐂": {
    "description": "ox",
    "names": [
      "ox"
    ],
    "tags": []
  },
  "🐲": {
    "description": "dragon face",
    "names": [
      "dragon_face"
    ],
    "tags": []
  },
  "🐡": {
    "description": "blowfish",
    "names": [
      "blowfish"
    ],
    "tags": []
  },
  "🐊": {
    "description": "crocodile",
    "names": [
      "crocodile"
    ],
    "tags": []
  },
  "🐫": {
    "description": "bactrian camel",
    "names": [
      "camel"
    ],
    "tags": []
  },
  "🐪": {
    "description": "dromedary camel",
    "names": [
      "dromedary_camel"
    ],
    "tags": [
      "desert"
    ]
  },
  "🐆": {
    "description": "leopard",
    "names": [
      "leopard"
    ],
    "tags": []
  },
  "🐈": {
    "description": "cat",
    "names": [
      "cat2"
    ],
    "tags": []
  },
  "🐩": {
    "description": "poodle",
    "names": [
      "poodle"
    ],
    "tags": [
      "dog"
    ]
  },
  "🐾": {
    "description": "paw prints",
    "names": [
      "feet",
      "paw_prints"
    ],
    "tags": []
  },
  "💐": {
    "description": "bouquet",
    "names": [
      "bouquet"
    ],
    "tags": [
      "flowers"
    ]
  },
  "🌸": {
    "description": "cherry blossom",
    "names": [
      "cherry_blossom"
    ],
    "tags": [
      "flower",
      "spring"
    ]
  },
  "🌷": {
    "description": "tulip",
    "names": [
      "tulip"
    ],
    "tags": [
      "flower"
    ]
  },
  "🍀": {
    "description": "four leaf clover",
    "names": [
      "four_leaf_clover"
    ],
    "tags": [
      "luck"
    ]
  },
  "🌹": {
    "description": "rose",
    "names": [
      "rose"
    ],
    "tags": [
      "flower"
    ]
  },
  "🌻": {
    "description": "sunflower",
    "names": [
      "sunflower"
    ],
    "tags": []
  },
  "🌺": {
    "description": "hibiscus",
    "names": [
      "hibiscus"
    ],
    "tags": []
  },
  "🍁": {
    "description": "maple leaf",
    "names": [
      "maple_leaf"
    ],
    "tags": [
      "canada"
    ]
  },
  "🍃": {
    "description": "leaf fluttering in wind",
    "names": [
      "leaves"
    ],
    "tags": [
      "leaf"
    ]
  },
  "🍂": {
    "description": "fallen leaf",
    "names": [
      "fallen_leaf"
    ],
    "tags": [
      "autumn"
    ]
  },
  "🌿": {
    "description": "herb",
    "names": [
      "herb"
    ],
    "tags": []
  },
  "🌾": {
    "description": "ear of rice",
    "names": [
      "ear_of_rice"
    ],
    "tags": []
  },
  "🍄": {
    "description": "mushroom",
    "names": [
      "mushroom"
    ],
    "tags": []
  },
  "🌵": {
    "description": "cactus",
    "names": [
      "cactus"
    ],
    "tags": []
  },
  "🌴": {
    "description": "palm tree",
    "names": [
      "palm_tree"
    ],
    "tags": []
  },
  "🌲": {
    "description": "evergreen tree",
    "names": [
      "evergreen_tree"
    ],
    "tags": [
      "wood"
    ]
  },
  "🌳": {
    "description": "deciduous tree",
    "names": [
      "deciduous_tree"
    ],
    "tags": [
      "wood"
    ]
  },
  "🌰": {
    "description": "chestnut",
    "names": [
      "chestnut"
    ],
    "tags": []
  },
  "🌱": {
    "description": "seedling",
    "names": [
      "seedling"
    ],
    "tags": [
      "plant"
    ]
  },
  "🌼": {
    "description": "blossom",
    "names": [
      "blossom"
    ],
    "tags": []
  },
  "🌐": {
    "description": "globe with meridians",
    "names": [
      "globe_with_meridians"
    ],
    "tags": [
      "world",
      "global",
      "international"
    ]
  },
  "🌞": {
    "description": "sun with face",
    "names": [
      "sun_with_face"
    ],
    "tags": [
      "summer"
    ]
  },
  "🌝": {
    "description": "full moon with face",
    "names": [
      "full_moon_with_face"
    ],
    "tags": []
  },
  "🌚": {
    "description": "new moon with face",
    "names": [
      "new_moon_with_face"
    ],
    "tags": []
  },
  "🌑": {
    "description": "new moon symbol",
    "names": [
      "new_moon"
    ],
    "tags": []
  },
  "🌒": {
    "description": "waxing crescent moon symbol",
    "names": [
      "waxing_crescent_moon"
    ],
    "tags": []
  },
  "🌓": {
    "description": "first quarter moon symbol",
    "names": [
      "first_quarter_moon"
    ],
    "tags": []
  },
  "🌔": {
    "description": "waxing gibbous moon symbol",
    "names": [
      "moon",
      "waxing_gibbous_moon"
    ],
    "tags": []
  },
  "🌕": {
    "description": "full moon symbol",
    "names": [
      "full_moon"
    ],
    "tags": []
  },
  "🌖": {
    "description": "waning gibbous moon symbol",
    "names": [
      "waning_gibbous_moon"
    ],
    "tags": []
  },
  "🌗": {
    "description": "last quarter moon symbol",
    "names": [
      "last_quarter_moon"
    ],
    "tags": []
  },
  "🌘": {
    "description": "waning crescent moon symbol",
    "names": [
      "waning_crescent_moon"
    ],
    "tags": []
  },
  "🌜": {
    "description": "last quarter moon with face",
    "names": [
      "last_quarter_moon_with_face"
    ],
    "tags": []
  },
  "🌛": {
    "description": "first quarter moon with face",
    "names": [
      "first_quarter_moon_with_face"
    ],
    "tags": []
  },
  "🌙": {
    "description": "crescent moon",
    "names": [
      "crescent_moon"
    ],
    "tags": [
      "night"
    ]
  },
  "🌍": {
    "description": "earth globe europe-africa",
    "names": [
      "earth_africa"
    ],
    "tags": [
      "globe",
      "world",
      "international"
    ]
  },
  "🌎": {
    "description": "earth globe americas",
    "names": [
      "earth_americas"
    ],
    "tags": [
      "globe",
      "world",
      "international"
    ]
  },
  "🌏": {
    "description": "earth globe asia-australia",
    "names": [
      "earth_asia"
    ],
    "tags": [
      "globe",
      "world",
      "international"
    ]
  },
  "🌋": {
    "description": "volcano",
    "names": [
      "volcano"
    ],
    "tags": []
  },
  "🌌": {
    "description": "milky way",
    "names": [
      "milky_way"
    ],
    "tags": []
  },
  "🌠": {
    "description": "shooting star",
    "names": [
      "stars"
    ],
    "tags": []
  },
  "⭐": {
    "description": "white medium star",
    "names": [
      "star"
    ],
    "tags": []
  },
  "☀️": {
    "description": "black sun with rays",
    "names": [
      "sunny"
    ],
    "tags": [
      "weather"
    ]
  },
  "⛅": {
    "description": "sun behind cloud",
    "names": [
      "partly_sunny"
    ],
    "tags": [
      "weather",
      "cloud"
    ]
  },
  "☁️": {
    "description": "cloud",
    "names": [
      "cloud"
    ],
    "tags": []
  },
  "⚡": {
    "description": "high voltage sign",
    "names": [
      "zap"
    ],
    "tags": [
      "lightning",
      "thunder"
    ]
  },
  "☔": {
    "description": "umbrella with rain drops",
    "names": [
      "umbrella"
    ],
    "tags": [
      "rain",
      "weather"
    ]
  },
  "❄️": {
    "description": "snowflake",
    "names": [
      "snowflake"
    ],
    "tags": [
      "winter",
      "cold",
      "weather"
    ]
  },
  "⛄": {
    "description": "snowman without snow",
    "names": [
      "snowman"
    ],
    "tags": [
      "winter",
      "christmas"
    ]
  },
  "🌀": {
    "description": "cyclone",
    "names": [
      "cyclone"
    ],
    "tags": [
      "swirl"
    ]
  },
  "🌁": {
    "description": "foggy",
    "names": [
      "foggy"
    ],
    "tags": [
      "karl"
    ]
  },
  "🌈": {
    "description": "rainbow",
    "names": [
      "rainbow"
    ],
    "tags": [
      "pride"
    ]
  },
  "🌊": {
    "description": "water wave",
    "names": [
      "ocean"
    ],
    "tags": [
      "sea"
    ]
  },
  "🎍": {
    "description": "pine decoration",
    "names": [
      "bamboo"
    ],
    "tags": []
  },
  "💝": {
    "description": "heart with ribbon",
    "names": [
      "gift_heart"
    ],
    "tags": [
      "chocolates"
    ]
  },
  "🎎": {
    "description": "japanese dolls",
    "names": [
      "dolls"
    ],
    "tags": []
  },
  "🎒": {
    "description": "school satchel",
    "names": [
      "school_satchel"
    ],
    "tags": []
  },
  "🎓": {
    "description": "graduation cap",
    "names": [
      "mortar_board"
    ],
    "tags": [
      "education",
      "college",
      "university",
      "graduation"
    ]
  },
  "🎏": {
    "description": "carp streamer",
    "names": [
      "flags"
    ],
    "tags": []
  },
  "🎆": {
    "description": "fireworks",
    "names": [
      "fireworks"
    ],
    "tags": [
      "festival",
      "celebration"
    ]
  },
  "🎇": {
    "description": "firework sparkler",
    "names": [
      "sparkler"
    ],
    "tags": []
  },
  "🎐": {
    "description": "wind chime",
    "names": [
      "wind_chime"
    ],
    "tags": []
  },
  "🎑": {
    "description": "moon viewing ceremony",
    "names": [
      "rice_scene"
    ],
    "tags": []
  },
  "🎃": {
    "description": "jack-o-lantern",
    "names": [
      "jack_o_lantern"
    ],
    "tags": [
      "halloween"
    ]
  },
  "👻": {
    "description": "ghost",
    "names": [
      "ghost"
    ],
    "tags": [
      "halloween"
    ]
  },
  "🎅": {
    "description": "father christmas",
    "names": [
      "santa"
    ],
    "tags": [
      "christmas"
    ]
  },
  "🎄": {
    "description": "christmas tree",
    "names": [
      "christmas_tree"
    ],
    "tags": []
  },
  "🎁": {
    "description": "wrapped present",
    "names": [
      "gift"
    ],
    "tags": [
      "present",
      "birthday",
      "christmas"
    ]
  },
  "🎋": {
    "description": "tanabata tree",
    "names": [
      "tanabata_tree"
    ],
    "tags": []
  },
  "🎉": {
    "description": "party popper",
    "names": [
      "tada"
    ],
    "tags": [
      "party"
    ]
  },
  "🎊": {
    "description": "confetti ball",
    "names": [
      "confetti_ball"
    ],
    "tags": []
  },
  "🎈": {
    "description": "balloon",
    "names": [
      "balloon"
    ],
    "tags": [
      "party",
      "birthday"
    ]
  },
  "🎌": {
    "description": "crossed flags",
    "names": [
      "crossed_flags"
    ],
    "tags": []
  },
  "🔮": {
    "description": "crystal ball",
    "names": [
      "crystal_ball"
    ],
    "tags": [
      "fortune"
    ]
  },
  "🎥": {
    "description": "movie camera",
    "names": [
      "movie_camera"
    ],
    "tags": [
      "film",
      "video"
    ]
  },
  "📷": {
    "description": "camera",
    "names": [
      "camera"
    ],
    "tags": [
      "photo"
    ]
  },
  "📹": {
    "description": "video camera",
    "names": [
      "video_camera"
    ],
    "tags": []
  },
  "📼": {
    "description": "videocassette",
    "names": [
      "vhs"
    ],
    "tags": []
  },
  "💿": {
    "description": "optical disc",
    "names": [
      "cd"
    ],
    "tags": []
  },
  "📀": {
    "description": "dvd",
    "names": [
      "dvd"
    ],
    "tags": []
  },
  "💽": {
    "description": "minidisc",
    "names": [
      "minidisc"
    ],
    "tags": []
  },
  "💾": {
    "description": "floppy disk",
    "names": [
      "floppy_disk"
    ],
    "tags": [
      "save"
    ]
  },
  "💻": {
    "description": "personal computer",
    "names": [
      "computer"
    ],
    "tags": [
      "desktop",
      "screen"
    ]
  },
  "📱": {
    "description": "mobile phone",
    "names": [
      "iphone"
    ],
    "tags": [
      "smartphone",
      "mobile"
    ]
  },
  "☎️": {
    "description": "black telephone",
    "names": [
      "phone",
      "telephone"
    ],
    "tags": []
  },
  "📞": {
    "description": "telephone receiver",
    "names": [
      "telephone_receiver"
    ],
    "tags": [
      "phone",
      "call"
    ]
  },
  "📟": {
    "description": "pager",
    "names": [
      "pager"
    ],
    "tags": []
  },
  "📠": {
    "description": "fax machine",
    "names": [
      "fax"
    ],
    "tags": []
  },
  "📡": {
    "description": "satellite antenna",
    "names": [
      "satellite"
    ],
    "tags": [
      "signal"
    ]
  },
  "📺": {
    "description": "television",
    "names": [
      "tv"
    ],
    "tags": []
  },
  "📻": {
    "description": "radio",
    "names": [
      "radio"
    ],
    "tags": [
      "podcast"
    ]
  },
  "🔊": {
    "description": "speaker with three sound waves",
    "names": [
      "loud_sound"
    ],
    "tags": [
      "volume"
    ]
  },
  "🔉": {
    "description": "speaker with one sound wave",
    "names": [
      "sound"
    ],
    "tags": [
      "volume"
    ]
  },
  "🔈": {
    "description": "speaker",
    "names": [
      "speaker"
    ],
    "tags": []
  },
  "🔇": {
    "description": "speaker with cancellation stroke",
    "names": [
      "mute"
    ],
    "tags": [
      "sound",
      "volume"
    ]
  },
  "🔔": {
    "description": "bell",
    "names": [
      "bell"
    ],
    "tags": [
      "sound",
      "notification"
    ]
  },
  "🔕": {
    "description": "bell with cancellation stroke",
    "names": [
      "no_bell"
    ],
    "tags": [
      "volume",
      "off"
    ]
  },
  "📢": {
    "description": "public address loudspeaker",
    "names": [
      "loudspeaker"
    ],
    "tags": [
      "announcement"
    ]
  },
  "📣": {
    "description": "cheering megaphone",
    "names": [
      "mega"
    ],
    "tags": []
  },
  "⏳": {
    "description": "hourglass with flowing sand",
    "names": [
      "hourglass_flowing_sand"
    ],
    "tags": [
      "time"
    ]
  },
  "⌛": {
    "description": "hourglass",
    "names": [
      "hourglass"
    ],
    "tags": [
      "time"
    ]
  },
  "⏰": {
    "description": "alarm clock",
    "names": [
      "alarm_clock"
    ],
    "tags": [
      "morning"
    ]
  },
  "⌚": {
    "description": "watch",
    "names": [
      "watch"
    ],
    "tags": [
      "time"
    ]
  },
  "🔓": {
    "description": "open lock",
    "names": [
      "unlock"
    ],
    "tags": [
      "security"
    ]
  },
  "🔒": {
    "description": "lock",
    "names": [
      "lock"
    ],
    "tags": [
      "security",
      "private"
    ]
  },
  "🔏": {
    "description": "lock with ink pen",
    "names": [
      "lock_with_ink_pen"
    ],
    "tags": []
  },
  "🔐": {
    "description": "closed lock with key",
    "names": [
      "closed_lock_with_key"
    ],
    "tags": [
      "security"
    ]
  },
  "🔑": {
    "description": "key",
    "names": [
      "key"
    ],
    "tags": [
      "lock",
      "password"
    ]
  },
  "🔎": {
    "description": "right-pointing magnifying glass",
    "names": [
      "mag_right"
    ],
    "tags": []
  },
  "💡": {
    "description": "electric light bulb",
    "names": [
      "bulb"
    ],
    "tags": [
      "idea",
      "light"
    ]
  },
  "🔦": {
    "description": "electric torch",
    "names": [
      "flashlight"
    ],
    "tags": []
  },
  "🔆": {
    "description": "high brightness symbol",
    "names": [
      "high_brightness"
    ],
    "tags": []
  },
  "🔅": {
    "description": "low brightness symbol",
    "names": [
      "low_brightness"
    ],
    "tags": []
  },
  "🔌": {
    "description": "electric plug",
    "names": [
      "electric_plug"
    ],
    "tags": []
  },
  "🔋": {
    "description": "battery",
    "names": [
      "battery"
    ],
    "tags": [
      "power"
    ]
  },
  "🔍": {
    "description": "left-pointing magnifying glass",
    "names": [
      "mag"
    ],
    "tags": [
      "search",
      "zoom"
    ]
  },
  "🛁": {
    "description": "bathtub",
    "names": [
      "bathtub"
    ],
    "tags": []
  },
  "🛀": {
    "description": "bath",
    "names": [
      "bath"
    ],
    "tags": [
      "shower"
    ]
  },
  "🚿": {
    "description": "shower",
    "names": [
      "shower"
    ],
    "tags": [
      "bath"
    ]
  },
  "🚽": {
    "description": "toilet",
    "names": [
      "toilet"
    ],
    "tags": [
      "wc"
    ]
  },
  "🔧": {
    "description": "wrench",
    "names": [
      "wrench"
    ],
    "tags": [
      "tool"
    ]
  },
  "🔩": {
    "description": "nut and bolt",
    "names": [
      "nut_and_bolt"
    ],
    "tags": []
  },
  "🔨": {
    "description": "hammer",
    "names": [
      "hammer"
    ],
    "tags": [
      "tool"
    ]
  },
  "🚪": {
    "description": "door",
    "names": [
      "door"
    ],
    "tags": []
  },
  "🚬": {
    "description": "smoking symbol",
    "names": [
      "smoking"
    ],
    "tags": [
      "cigarette"
    ]
  },
  "💣": {
    "description": "bomb",
    "names": [
      "bomb"
    ],
    "tags": [
      "boom"
    ]
  },
  "🔫": {
    "description": "pistol",
    "names": [
      "gun"
    ],
    "tags": [
      "shoot",
      "weapon"
    ]
  },
  "🔪": {
    "description": "hocho",
    "names": [
      "hocho",
      "knife"
    ],
    "tags": [
      "cut",
      "chop"
    ]
  },
  "💊": {
    "description": "pill",
    "names": [
      "pill"
    ],
    "tags": [
      "health",
      "medicine"
    ]
  },
  "💉": {
    "description": "syringe",
    "names": [
      "syringe"
    ],
    "tags": [
      "health",
      "hospital",
      "needle"
    ]
  },
  "💰": {
    "description": "money bag",
    "names": [
      "moneybag"
    ],
    "tags": [
      "dollar",
      "cream"
    ]
  },
  "💴": {
    "description": "banknote with yen sign",
    "names": [
      "yen"
    ],
    "tags": []
  },
  "💵": {
    "description": "banknote with dollar sign",
    "names": [
      "dollar"
    ],
    "tags": [
      "money"
    ]
  },
  "💷": {
    "description": "banknote with pound sign",
    "names": [
      "pound"
    ],
    "tags": []
  },
  "💶": {
    "description": "banknote with euro sign",
    "names": [
      "euro"
    ],
    "tags": []
  },
  "💳": {
    "description": "credit card",
    "names": [
      "credit_card"
    ],
    "tags": [
      "subscription"
    ]
  },
  "💸": {
    "description": "money with wings",
    "names": [
      "money_with_wings"
    ],
    "tags": [
      "dollar"
    ]
  },
  "📲": {
    "description": "mobile phone with rightwards arrow at left",
    "names": [
      "calling"
    ],
    "tags": [
      "call",
      "incoming"
    ]
  },
  "📧": {
    "description": "e-mail symbol",
    "names": [
      "e-mail"
    ],
    "tags": []
  },
  "📥": {
    "description": "inbox tray",
    "names": [
      "inbox_tray"
    ],
    "tags": []
  },
  "📤": {
    "description": "outbox tray",
    "names": [
      "outbox_tray"
    ],
    "tags": []
  },
  "✉️": {
    "description": "envelope",
    "names": [
      "email",
      "envelope"
    ],
    "tags": [
      "letter"
    ]
  },
  "📩": {
    "description": "envelope with downwards arrow above",
    "names": [
      "envelope_with_arrow"
    ],
    "tags": []
  },
  "📨": {
    "description": "incoming envelope",
    "names": [
      "incoming_envelope"
    ],
    "tags": []
  },
  "📯": {
    "description": "postal horn",
    "names": [
      "postal_horn"
    ],
    "tags": []
  },
  "📫": {
    "description": "closed mailbox with raised flag",
    "names": [
      "mailbox"
    ],
    "tags": []
  },
  "📪": {
    "description": "closed mailbox with lowered flag",
    "names": [
      "mailbox_closed"
    ],
    "tags": []
  },
  "📬": {
    "description": "open mailbox with raised flag",
    "names": [
      "mailbox_with_mail"
    ],
    "tags": []
  },
  "📭": {
    "description": "open mailbox with lowered flag",
    "names": [
      "mailbox_with_no_mail"
    ],
    "tags": []
  },
  "📮": {
    "description": "postbox",
    "names": [
      "postbox"
    ],
    "tags": []
  },
  "📦": {
    "description": "package",
    "names": [
      "package"
    ],
    "tags": [
      "shipping"
    ]
  },
  "📝": {
    "description": "memo",
    "names": [
      "memo",
      "pencil"
    ],
    "tags": [
      "document",
      "note"
    ]
  },
  "📄": {
    "description": "page facing up",
    "names": [
      "page_facing_up"
    ],
    "tags": [
      "document"
    ]
  },
  "📃": {
    "description": "page with curl",
    "names": [
      "page_with_curl"
    ],
    "tags": []
  },
  "📑": {
    "description": "bookmark tabs",
    "names": [
      "bookmark_tabs"
    ],
    "tags": []
  },
  "📊": {
    "description": "bar chart",
    "names": [
      "bar_chart"
    ],
    "tags": [
      "stats",
      "metrics"
    ]
  },
  "📈": {
    "description": "chart with upwards trend",
    "names": [
      "chart_with_upwards_trend"
    ],
    "tags": [
      "graph",
      "metrics"
    ]
  },
  "📉": {
    "description": "chart with downwards trend",
    "names": [
      "chart_with_downwards_trend"
    ],
    "tags": [
      "graph",
      "metrics"
    ]
  },
  "📜": {
    "description": "scroll",
    "names": [
      "scroll"
    ],
    "tags": [
      "document"
    ]
  },
  "📋": {
    "description": "clipboard",
    "names": [
      "clipboard"
    ],
    "tags": []
  },
  "📅": {
    "description": "calendar",
    "names": [
      "date"
    ],
    "tags": [
      "calendar",
      "schedule"
    ]
  },
  "📆": {
    "description": "tear-off calendar",
    "names": [
      "calendar"
    ],
    "tags": [
      "schedule"
    ]
  },
  "📇": {
    "description": "card index",
    "names": [
      "card_index"
    ],
    "tags": []
  },
  "📁": {
    "description": "file folder",
    "names": [
      "file_folder"
    ],
    "tags": [
      "directory"
    ]
  },
  "📂": {
    "description": "open file folder",
    "names": [
      "open_file_folder"
    ],
    "tags": []
  },
  "✂️": {
    "description": "black scissors",
    "names": [
      "scissors"
    ],
    "tags": [
      "cut"
    ]
  },
  "📌": {
    "description": "pushpin",
    "names": [
      "pushpin"
    ],
    "tags": [
      "location"
    ]
  },
  "📎": {
    "description": "paperclip",
    "names": [
      "paperclip"
    ],
    "tags": []
  },
  "✒️": {
    "description": "black nib",
    "names": [
      "black_nib"
    ],
    "tags": []
  },
  "✏️": {
    "description": "pencil",
    "names": [
      "pencil2"
    ],
    "tags": []
  },
  "📏": {
    "description": "straight ruler",
    "names": [
      "straight_ruler"
    ],
    "tags": []
  },
  "📐": {
    "description": "triangular ruler",
    "names": [
      "triangular_ruler"
    ],
    "tags": []
  },
  "📕": {
    "description": "closed book",
    "names": [
      "closed_book"
    ],
    "tags": []
  },
  "📗": {
    "description": "green book",
    "names": [
      "green_book"
    ],
    "tags": []
  },
  "📘": {
    "description": "blue book",
    "names": [
      "blue_book"
    ],
    "tags": []
  },
  "📙": {
    "description": "orange book",
    "names": [
      "orange_book"
    ],
    "tags": []
  },
  "📓": {
    "description": "notebook",
    "names": [
      "notebook"
    ],
    "tags": []
  },
  "📔": {
    "description": "notebook with decorative cover",
    "names": [
      "notebook_with_decorative_cover"
    ],
    "tags": []
  },
  "📒": {
    "description": "ledger",
    "names": [
      "ledger"
    ],
    "tags": []
  },
  "📚": {
    "description": "books",
    "names": [
      "books"
    ],
    "tags": [
      "library"
    ]
  },
  "📖": {
    "description": "open book",
    "names": [
      "book",
      "open_book"
    ],
    "tags": []
  },
  "🔖": {
    "description": "bookmark",
    "names": [
      "bookmark"
    ],
    "tags": []
  },
  "📛": {
    "description": "name badge",
    "names": [
      "name_badge"
    ],
    "tags": []
  },
  "🔬": {
    "description": "microscope",
    "names": [
      "microscope"
    ],
    "tags": [
      "science",
      "laboratory",
      "investigate"
    ]
  },
  "🔭": {
    "description": "telescope",
    "names": [
      "telescope"
    ],
    "tags": []
  },
  "📰": {
    "description": "newspaper",
    "names": [
      "newspaper"
    ],
    "tags": [
      "press"
    ]
  },
  "🎨": {
    "description": "artist palette",
    "names": [
      "art"
    ],
    "tags": [
      "design",
      "paint"
    ]
  },
  "🎬": {
    "description": "clapper board",
    "names": [
      "clapper"
    ],
    "tags": [
      "film"
    ]
  },
  "🎤": {
    "description": "microphone",
    "names": [
      "microphone"
    ],
    "tags": [
      "sing"
    ]
  },
  "🎧": {
    "description": "headphone",
    "names": [
      "headphones"
    ],
    "tags": [
      "music",
      "earphones"
    ]
  },
  "🎼": {
    "description": "musical score",
    "names": [
      "musical_score"
    ],
    "tags": []
  },
  "🎵": {
    "description": "musical note",
    "names": [
      "musical_note"
    ],
    "tags": []
  },
  "🎶": {
    "description": "multiple musical notes",
    "names": [
      "notes"
    ],
    "tags": [
      "music"
    ]
  },
  "🎹": {
    "description": "musical keyboard",
    "names": [
      "musical_keyboard"
    ],
    "tags": [
      "piano"
    ]
  },
  "🎻": {
    "description": "violin",
    "names": [
      "violin"
    ],
    "tags": []
  },
  "🎺": {
    "description": "trumpet",
    "names": [
      "trumpet"
    ],
    "tags": []
  },
  "🎷": {
    "description": "saxophone",
    "names": [
      "saxophone"
    ],
    "tags": []
  },
  "🎸": {
    "description": "guitar",
    "names": [
      "guitar"
    ],
    "tags": [
      "rock"
    ]
  },
  "👾": {
    "description": "alien monster",
    "names": [
      "space_invader"
    ],
    "tags": [
      "game",
      "retro"
    ]
  },
  "🎮": {
    "description": "video game",
    "names": [
      "video_game"
    ],
    "tags": [
      "play",
      "controller",
      "console"
    ]
  },
  "🃏": {
    "description": "playing card black joker",
    "names": [
      "black_joker"
    ],
    "tags": []
  },
  "🎴": {
    "description": "flower playing cards",
    "names": [
      "flower_playing_cards"
    ],
    "tags": []
  },
  "🀄": {
    "description": "mahjong tile red dragon",
    "names": [
      "mahjong"
    ],
    "tags": []
  },
  "🎲": {
    "description": "game die",
    "names": [
      "game_die"
    ],
    "tags": [
      "dice",
      "gambling"
    ]
  },
  "🎯": {
    "description": "direct hit",
    "names": [
      "dart"
    ],
    "tags": [
      "target"
    ]
  },
  "🏈": {
    "description": "american football",
    "names": [
      "football"
    ],
    "tags": [
      "sports"
    ]
  },
  "🏀": {
    "description": "basketball and hoop",
    "names": [
      "basketball"
    ],
    "tags": [
      "sports"
    ]
  },
  "⚽": {
    "description": "soccer ball",
    "names": [
      "soccer"
    ],
    "tags": [
      "sports"
    ]
  },
  "⚾️": {
    "description": "baseball",
    "names": [
      "baseball"
    ],
    "tags": [
      "sports"
    ]
  },
  "🎾": {
    "description": "tennis racquet and ball",
    "names": [
      "tennis"
    ],
    "tags": [
      "sports"
    ]
  },
  "🎱": {
    "description": "billiards",
    "names": [
      "8ball"
    ],
    "tags": [
      "pool",
      "billiards"
    ]
  },
  "🏉": {
    "description": "rugby football",
    "names": [
      "rugby_football"
    ],
    "tags": []
  },
  "🎳": {
    "description": "bowling",
    "names": [
      "bowling"
    ],
    "tags": []
  },
  "⛳": {
    "description": "flag in hole",
    "names": [
      "golf"
    ],
    "tags": []
  },
  "🚵": {
    "description": "mountain bicyclist",
    "names": [
      "mountain_bicyclist"
    ],
    "tags": []
  },
  "🚴": {
    "description": "bicyclist",
    "names": [
      "bicyclist"
    ],
    "tags": []
  },
  "🏁": {
    "description": "chequered flag",
    "names": [
      "checkered_flag"
    ],
    "tags": [
      "milestone",
      "finish"
    ]
  },
  "🏇": {
    "description": "horse racing",
    "names": [
      "horse_racing"
    ],
    "tags": []
  },
  "🏆": {
    "description": "trophy",
    "names": [
      "trophy"
    ],
    "tags": [
      "award",
      "contest",
      "winner"
    ]
  },
  "🎿": {
    "description": "ski and ski boot",
    "names": [
      "ski"
    ],
    "tags": []
  },
  "🏂": {
    "description": "snowboarder",
    "names": [
      "snowboarder"
    ],
    "tags": []
  },
  "🏊": {
    "description": "swimmer",
    "names": [
      "swimmer"
    ],
    "tags": []
  },
  "🏄": {
    "description": "surfer",
    "names": [
      "surfer"
    ],
    "tags": []
  },
  "🎣": {
    "description": "fishing pole and fish",
    "names": [
      "fishing_pole_and_fish"
    ],
    "tags": []
  },
  "☕": {
    "description": "hot beverage",
    "names": [
      "coffee"
    ],
    "tags": [
      "cafe",
      "espresso"
    ]
  },
  "🍵": {
    "description": "teacup without handle",
    "names": [
      "tea"
    ],
    "tags": [
      "green",
      "breakfast"
    ]
  },
  "🍶": {
    "description": "sake bottle and cup",
    "names": [
      "sake"
    ],
    "tags": []
  },
  "🍼": {
    "description": "baby bottle",
    "names": [
      "baby_bottle"
    ],
    "tags": [
      "milk"
    ]
  },
  "🍺": {
    "description": "beer mug",
    "names": [
      "beer"
    ],
    "tags": [
      "drink"
    ]
  },
  "🍻": {
    "description": "clinking beer mugs",
    "names": [
      "beers"
    ],
    "tags": [
      "drinks"
    ]
  },
  "🍸": {
    "description": "cocktail glass",
    "names": [
      "cocktail"
    ],
    "tags": [
      "drink"
    ]
  },
  "🍹": {
    "description": "tropical drink",
    "names": [
      "tropical_drink"
    ],
    "tags": [
      "summer",
      "vacation"
    ]
  },
  "🍷": {
    "description": "wine glass",
    "names": [
      "wine_glass"
    ],
    "tags": []
  },
  "🍴": {
    "description": "fork and knife",
    "names": [
      "fork_and_knife"
    ],
    "tags": [
      "cutlery"
    ]
  },
  "🍕": {
    "description": "slice of pizza",
    "names": [
      "pizza"
    ],
    "tags": []
  },
  "🍔": {
    "description": "hamburger",
    "names": [
      "hamburger"
    ],
    "tags": [
      "burger"
    ]
  },
  "🍟": {
    "description": "french fries",
    "names": [
      "fries"
    ],
    "tags": []
  },
  "🍗": {
    "description": "poultry leg",
    "names": [
      "poultry_leg"
    ],
    "tags": [
      "meat",
      "chicken"
    ]
  },
  "🍖": {
    "description": "meat on bone",
    "names": [
      "meat_on_bone"
    ],
    "tags": []
  },
  "🍝": {
    "description": "spaghetti",
    "names": [
      "spaghetti"
    ],
    "tags": [
      "pasta"
    ]
  },
  "🍛": {
    "description": "curry and rice",
    "names": [
      "curry"
    ],
    "tags": []
  },
  "🍤": {
    "description": "fried shrimp",
    "names": [
      "fried_shrimp"
    ],
    "tags": [
      "tempura"
    ]
  },
  "🍱": {
    "description": "bento box",
    "names": [
      "bento"
    ],
    "tags": []
  },
  "🍣": {
    "description": "sushi",
    "names": [
      "sushi"
    ],
    "tags": []
  },
  "🍥": {
    "description": "fish cake with swirl design",
    "names": [
      "fish_cake"
    ],
    "tags": []
  },
  "🍙": {
    "description": "rice ball",
    "names": [
      "rice_ball"
    ],
    "tags": []
  },
  "🍘": {
    "description": "rice cracker",
    "names": [
      "rice_cracker"
    ],
    "tags": []
  },
  "🍚": {
    "description": "cooked rice",
    "names": [
      "rice"
    ],
    "tags": []
  },
  "🍜": {
    "description": "steaming bowl",
    "names": [
      "ramen"
    ],
    "tags": [
      "noodle"
    ]
  },
  "🍲": {
    "description": "pot of food",
    "names": [
      "stew"
    ],
    "tags": []
  },
  "🍢": {
    "description": "oden",
    "names": [
      "oden"
    ],
    "tags": []
  },
  "🍡": {
    "description": "dango",
    "names": [
      "dango"
    ],
    "tags": []
  },
  "🍳": {
    "description": "cooking",
    "names": [
      "egg"
    ],
    "tags": [
      "breakfast"
    ]
  },
  "🍞": {
    "description": "bread",
    "names": [
      "bread"
    ],
    "tags": [
      "toast"
    ]
  },
  "🍩": {
    "description": "doughnut",
    "names": [
      "doughnut"
    ],
    "tags": []
  },
  "🍮": {
    "description": "custard",
    "names": [
      "custard"
    ],
    "tags": []
  },
  "🍦": {
    "description": "soft ice cream",
    "names": [
      "icecream"
    ],
    "tags": []
  },
  "🍨": {
    "description": "ice cream",
    "names": [
      "ice_cream"
    ],
    "tags": []
  },
  "🍧": {
    "description": "shaved ice",
    "names": [
      "shaved_ice"
    ],
    "tags": []
  },
  "🎂": {
    "description": "birthday cake",
    "names": [
      "birthday"
    ],
    "tags": [
      "party"
    ]
  },
  "🍰": {
    "description": "shortcake",
    "names": [
      "cake"
    ],
    "tags": [
      "dessert"
    ]
  },
  "🍪": {
    "description": "cookie",
    "names": [
      "cookie"
    ],
    "tags": []
  },
  "🍫": {
    "description": "chocolate bar",
    "names": [
      "chocolate_bar"
    ],
    "tags": []
  },
  "🍬": {
    "description": "candy",
    "names": [
      "candy"
    ],
    "tags": [
      "sweet"
    ]
  },
  "🍭": {
    "description": "lollipop",
    "names": [
      "lollipop"
    ],
    "tags": []
  },
  "🍯": {
    "description": "honey pot",
    "names": [
      "honey_pot"
    ],
    "tags": []
  },
  "🍎": {
    "description": "red apple",
    "names": [
      "apple"
    ],
    "tags": []
  },
  "🍏": {
    "description": "green apple",
    "names": [
      "green_apple"
    ],
    "tags": [
      "fruit"
    ]
  },
  "🍊": {
    "description": "tangerine",
    "names": [
      "tangerine"
    ],
    "tags": []
  },
  "🍋": {
    "description": "lemon",
    "names": [
      "lemon"
    ],
    "tags": []
  },
  "🍒": {
    "description": "cherries",
    "names": [
      "cherries"
    ],
    "tags": [
      "fruit"
    ]
  },
  "🍇": {
    "description": "grapes",
    "names": [
      "grapes"
    ],
    "tags": []
  },
  "🍉": {
    "description": "watermelon",
    "names": [
      "watermelon"
    ],
    "tags": []
  },
  "🍓": {
    "description": "strawberry",
    "names": [
      "strawberry"
    ],
    "tags": [
      "fruit"
    ]
  },
  "🍑": {
    "description": "peach",
    "names": [
      "peach"
    ],
    "tags": []
  },
  "🍈": {
    "description": "melon",
    "names": [
      "melon"
    ],
    "tags": []
  },
  "🍌": {
    "description": "banana",
    "names": [
      "banana"
    ],
    "tags": [
      "fruit"
    ]
  },
  "🍐": {
    "description": "pear",
    "names": [
      "pear"
    ],
    "tags": []
  },
  "🍍": {
    "description": "pineapple",
    "names": [
      "pineapple"
    ],
    "tags": []
  },
  "🍠": {
    "description": "roasted sweet potato",
    "names": [
      "sweet_potato"
    ],
    "tags": []
  },
  "🍆": {
    "description": "aubergine",
    "names": [
      "eggplant"
    ],
    "tags": [
      "aubergine"
    ]
  },
  "🍅": {
    "description": "tomato",
    "names": [
      "tomato"
    ],
    "tags": []
  },
  "🌽": {
    "description": "ear of maize",
    "names": [
      "corn"
    ],
    "tags": []
  },
  "🏠": {
    "description": "house building",
    "names": [
      "house"
    ],
    "tags": []
  },
  "🏡": {
    "description": "house with garden",
    "names": [
      "house_with_garden"
    ],
    "tags": []
  },
  "🏫": {
    "description": "school",
    "names": [
      "school"
    ],
    "tags": []
  },
  "🏢": {
    "description": "office building",
    "names": [
      "office"
    ],
    "tags": []
  },
  "🏣": {
    "description": "japanese post office",
    "names": [
      "post_office"
    ],
    "tags": []
  },
  "🏥": {
    "description": "hospital",
    "names": [
      "hospital"
    ],
    "tags": []
  },
  "🏦": {
    "description": "bank",
    "names": [
      "bank"
    ],
    "tags": []
  },
  "🏪": {
    "description": "convenience store",
    "names": [
      "convenience_store"
    ],
    "tags": []
  },
  "🏩": {
    "description": "love hotel",
    "names": [
      "love_hotel"
    ],
    "tags": []
  },
  "🏨": {
    "description": "hotel",
    "names": [
      "hotel"
    ],
    "tags": []
  },
  "💒": {
    "description": "wedding",
    "names": [
      "wedding"
    ],
    "tags": [
      "marriage"
    ]
  },
  "⛪": {
    "description": "church",
    "names": [
      "church"
    ],
    "tags": []
  },
  "🏬": {
    "description": "department store",
    "names": [
      "department_store"
    ],
    "tags": []
  },
  "🏤": {
    "description": "european post office",
    "names": [
      "european_post_office"
    ],
    "tags": []
  },
  "🌇": {
    "description": "sunset over buildings",
    "names": [
      "city_sunrise"
    ],
    "tags": []
  },
  "🌆": {
    "description": "cityscape at dusk",
    "names": [
      "city_sunset"
    ],
    "tags": []
  },
  "🏯": {
    "description": "japanese castle",
    "names": [
      "japanese_castle"
    ],
    "tags": []
  },
  "🏰": {
    "description": "european castle",
    "names": [
      "european_castle"
    ],
    "tags": []
  },
  "⛺": {
    "description": "tent",
    "names": [
      "tent"
    ],
    "tags": [
      "camping"
    ]
  },
  "🏭": {
    "description": "factory",
    "names": [
      "factory"
    ],
    "tags": []
  },
  "🗼": {
    "description": "tokyo tower",
    "names": [
      "tokyo_tower"
    ],
    "tags": []
  },
  "🗾": {
    "description": "silhouette of japan",
    "names": [
      "japan"
    ],
    "tags": []
  },
  "🗻": {
    "description": "mount fuji",
    "names": [
      "mount_fuji"
    ],
    "tags": []
  },
  "🌄": {
    "description": "sunrise over mountains",
    "names": [
      "sunrise_over_mountains"
    ],
    "tags": []
  },
  "🌅": {
    "description": "sunrise",
    "names": [
      "sunrise"
    ],
    "tags": []
  },
  "🌃": {
    "description": "night with stars",
    "names": [
      "night_with_stars"
    ],
    "tags": []
  },
  "🗽": {
    "description": "statue of liberty",
    "names": [
      "statue_of_liberty"
    ],
    "tags": []
  },
  "🌉": {
    "description": "bridge at night",
    "names": [
      "bridge_at_night"
    ],
    "tags": []
  },
  "🎠": {
    "description": "carousel horse",
    "names": [
      "carousel_horse"
    ],
    "tags": []
  },
  "🎡": {
    "description": "ferris wheel",
    "names": [
      "ferris_wheel"
    ],
    "tags": []
  },
  "⛲": {
    "description": "fountain",
    "names": [
      "fountain"
    ],
    "tags": []
  },
  "🎢": {
    "description": "roller coaster",
    "names": [
      "roller_coaster"
    ],
    "tags": []
  },
  "🚢": {
    "description": "ship",
    "names": [
      "ship"
    ],
    "tags": []
  },
  "⛵": {
    "description": "sailboat",
    "names": [
      "boat",
      "sailboat"
    ],
    "tags": []
  },
  "🚤": {
    "description": "speedboat",
    "names": [
      "speedboat"
    ],
    "tags": [
      "ship"
    ]
  },
  "🚣": {
    "description": "rowboat",
    "names": [
      "rowboat"
    ],
    "tags": []
  },
  "⚓": {
    "description": "anchor",
    "names": [
      "anchor"
    ],
    "tags": [
      "ship"
    ]
  },
  "🚀": {
    "description": "rocket",
    "names": [
      "rocket"
    ],
    "tags": [
      "ship",
      "launch"
    ]
  },
  "✈️": {
    "description": "airplane",
    "names": [
      "airplane"
    ],
    "tags": [
      "flight"
    ]
  },
  "💺": {
    "description": "seat",
    "names": [
      "seat"
    ],
    "tags": []
  },
  "🚁": {
    "description": "helicopter",
    "names": [
      "helicopter"
    ],
    "tags": []
  },
  "🚂": {
    "description": "steam locomotive",
    "names": [
      "steam_locomotive"
    ],
    "tags": [
      "train"
    ]
  },
  "🚊": {
    "description": "tram",
    "names": [
      "tram"
    ],
    "tags": []
  },
  "🚉": {
    "description": "station",
    "names": [
      "station"
    ],
    "tags": []
  },
  "🚞": {
    "description": "mountain railway",
    "names": [
      "mountain_railway"
    ],
    "tags": []
  },
  "🚆": {
    "description": "train",
    "names": [
      "train2"
    ],
    "tags": []
  },
  "🚄": {
    "description": "high-speed train",
    "names": [
      "bullettrain_side"
    ],
    "tags": [
      "train"
    ]
  },
  "🚅": {
    "description": "high-speed train with bullet nose",
    "names": [
      "bullettrain_front"
    ],
    "tags": [
      "train"
    ]
  },
  "🚈": {
    "description": "light rail",
    "names": [
      "light_rail"
    ],
    "tags": []
  },
  "🚇": {
    "description": "metro",
    "names": [
      "metro"
    ],
    "tags": []
  },
  "🚝": {
    "description": "monorail",
    "names": [
      "monorail"
    ],
    "tags": []
  },
  "🚋": {
    "description": "tram car",
    "names": [
      "train"
    ],
    "tags": []
  },
  "🚃": {
    "description": "railway car",
    "names": [
      "railway_car"
    ],
    "tags": []
  },
  "🚎": {
    "description": "trolleybus",
    "names": [
      "trolleybus"
    ],
    "tags": []
  },
  "🚌": {
    "description": "bus",
    "names": [
      "bus"
    ],
    "tags": []
  },
  "🚍": {
    "description": "oncoming bus",
    "names": [
      "oncoming_bus"
    ],
    "tags": []
  },
  "🚙": {
    "description": "recreational vehicle",
    "names": [
      "blue_car"
    ],
    "tags": []
  },
  "🚘": {
    "description": "oncoming automobile",
    "names": [
      "oncoming_automobile"
    ],
    "tags": []
  },
  "🚗": {
    "description": "automobile",
    "names": [
      "car",
      "red_car"
    ],
    "tags": []
  },
  "🚕": {
    "description": "taxi",
    "names": [
      "taxi"
    ],
    "tags": []
  },
  "🚖": {
    "description": "oncoming taxi",
    "names": [
      "oncoming_taxi"
    ],
    "tags": []
  },
  "🚛": {
    "description": "articulated lorry",
    "names": [
      "articulated_lorry"
    ],
    "tags": []
  },
  "🚚": {
    "description": "delivery truck",
    "names": [
      "truck"
    ],
    "tags": []
  },
  "🚨": {
    "description": "police cars revolving light",
    "names": [
      "rotating_light"
    ],
    "tags": [
      "911",
      "emergency"
    ]
  },
  "🚓": {
    "description": "police car",
    "names": [
      "police_car"
    ],
    "tags": []
  },
  "🚔": {
    "description": "oncoming police car",
    "names": [
      "oncoming_police_car"
    ],
    "tags": []
  },
  "🚒": {
    "description": "fire engine",
    "names": [
      "fire_engine"
    ],
    "tags": []
  },
  "🚑": {
    "description": "ambulance",
    "names": [
      "ambulance"
    ],
    "tags": []
  },
  "🚐": {
    "description": "minibus",
    "names": [
      "minibus"
    ],
    "tags": []
  },
  "🚲": {
    "description": "bicycle",
    "names": [
      "bike"
    ],
    "tags": [
      "bicycle"
    ]
  },
  "🚡": {
    "description": "aerial tramway",
    "names": [
      "aerial_tramway"
    ],
    "tags": []
  },
  "🚟": {
    "description": "suspension railway",
    "names": [
      "suspension_railway"
    ],
    "tags": []
  },
  "🚠": {
    "description": "mountain cableway",
    "names": [
      "mountain_cableway"
    ],
    "tags": []
  },
  "🚜": {
    "description": "tractor",
    "names": [
      "tractor"
    ],
    "tags": []
  },
  "💈": {
    "description": "barber pole",
    "names": [
      "barber"
    ],
    "tags": []
  },
  "🚏": {
    "description": "bus stop",
    "names": [
      "busstop"
    ],
    "tags": []
  },
  "🎫": {
    "description": "ticket",
    "names": [
      "ticket"
    ],
    "tags": []
  },
  "🚦": {
    "description": "vertical traffic light",
    "names": [
      "vertical_traffic_light"
    ],
    "tags": [
      "semaphore"
    ]
  },
  "🚥": {
    "description": "horizontal traffic light",
    "names": [
      "traffic_light"
    ],
    "tags": []
  },
  "⚠️": {
    "description": "warning sign",
    "names": [
      "warning"
    ],
    "tags": [
      "wip"
    ]
  },
  "🚧": {
    "description": "construction sign",
    "names": [
      "construction"
    ],
    "tags": [
      "wip"
    ]
  },
  "🔰": {
    "description": "japanese symbol for beginner",
    "names": [
      "beginner"
    ],
    "tags": []
  },
  "⛽": {
    "description": "fuel pump",
    "names": [
      "fuelpump"
    ],
    "tags": []
  },
  "🏮": {
    "description": "izakaya lantern",
    "names": [
      "izakaya_lantern",
      "lantern"
    ],
    "tags": []
  },
  "🎰": {
    "description": "slot machine",
    "names": [
      "slot_machine"
    ],
    "tags": []
  },
  "♨️": {
    "description": "hot springs",
    "names": [
      "hotsprings"
    ],
    "tags": []
  },
  "🗿": {
    "description": "moyai",
    "names": [
      "moyai"
    ],
    "tags": [
      "stone"
    ]
  },
  "🎪": {
    "description": "circus tent",
    "names": [
      "circus_tent"
    ],
    "tags": []
  },
  "🎭": {
    "description": "performing arts",
    "names": [
      "performing_arts"
    ],
    "tags": [
      "theater",
      "drama"
    ]
  },
  "📍": {
    "description": "round pushpin",
    "names": [
      "round_pushpin"
    ],
    "tags": [
      "location"
    ]
  },
  "🚩": {
    "description": "triangular flag on post",
    "names": [
      "triangular_flag_on_post"
    ],
    "tags": []
  },
  "🇯🇵": {
    "description": "regional indicator symbol letter j + regional indicator symbol letter p",
    "names": [
      "jp"
    ],
    "tags": [
      "japan"
    ]
  },
  "🇰🇷": {
    "description": "regional indicator symbol letter k + regional indicator symbol letter r",
    "names": [
      "kr"
    ],
    "tags": [
      "korea"
    ]
  },
  "🇩🇪": {
    "description": "regional indicator symbol letter d + regional indicator symbol letter e",
    "names": [
      "de"
    ],
    "tags": [
      "flag",
      "germany"
    ]
  },
  "🇨🇳": {
    "description": "regional indicator symbol letter c + regional indicator symbol letter n",
    "names": [
      "cn"
    ],
    "tags": [
      "china"
    ]
  },
  "🇺🇸": {
    "description": "regional indicator symbol letter u + regional indicator symbol letter s",
    "names": [
      "us"
    ],
    "tags": [
      "flag",
      "united",
      "america"
    ]
  },
  "🇫🇷": {
    "description": "regional indicator symbol letter f + regional indicator symbol letter r",
    "names": [
      "fr"
    ],
    "tags": [
      "france",
      "french"
    ]
  },
  "🇪🇸": {
    "description": "regional indicator symbol letter e + regional indicator symbol letter s",
    "names": [
      "es"
    ],
    "tags": [
      "spain"
    ]
  },
  "🇮🇹": {
    "description": "regional indicator symbol letter i + regional indicator symbol letter t",
    "names": [
      "it"
    ],
    "tags": [
      "italy"
    ]
  },
  "🇷🇺": {
    "description": "regional indicator symbol letter r + regional indicator symbol letter u",
    "names": [
      "ru"
    ],
    "tags": [
      "russia"
    ]
  },
  "🇬🇧": {
    "description": "regional indicator symbol letter g + regional indicator symbol letter b",
    "names": [
      "gb",
      "uk"
    ],
    "tags": [
      "flag",
      "british"
    ]
  },
  "1️⃣": {
    "description": "digit one + combining enclosing keycap",
    "names": [
      "one"
    ],
    "tags": []
  },
  "2️⃣": {
    "description": "digit two + combining enclosing keycap",
    "names": [
      "two"
    ],
    "tags": []
  },
  "3️⃣": {
    "description": "digit three + combining enclosing keycap",
    "names": [
      "three"
    ],
    "tags": []
  },
  "4️⃣": {
    "description": "digit four + combining enclosing keycap",
    "names": [
      "four"
    ],
    "tags": []
  },
  "5️⃣": {
    "description": "digit five + combining enclosing keycap",
    "names": [
      "five"
    ],
    "tags": []
  },
  "6️⃣": {
    "description": "digit six + combining enclosing keycap",
    "names": [
      "six"
    ],
    "tags": []
  },
  "7️⃣": {
    "description": "digit seven + combining enclosing keycap",
    "names": [
      "seven"
    ],
    "tags": []
  },
  "8️⃣": {
    "description": "digit eight + combining enclosing keycap",
    "names": [
      "eight"
    ],
    "tags": []
  },
  "9️⃣": {
    "description": "digit nine + combining enclosing keycap",
    "names": [
      "nine"
    ],
    "tags": []
  },
  "0️⃣": {
    "description": "digit zero + combining enclosing keycap",
    "names": [
      "zero"
    ],
    "tags": []
  },
  "🔟": {
    "description": "keycap ten",
    "names": [
      "keycap_ten"
    ],
    "tags": []
  },
  "🔢": {
    "description": "input symbol for numbers",
    "names": [
      "1234"
    ],
    "tags": [
      "numbers"
    ]
  },
  "#️⃣": {
    "description": "number sign + combining enclosing keycap",
    "names": [
      "hash"
    ],
    "tags": [
      "number"
    ]
  },
  "🔣": {
    "description": "input symbol for symbols",
    "names": [
      "symbols"
    ],
    "tags": []
  },
  "⬆️": {
    "description": "upwards black arrow",
    "names": [
      "arrow_up"
    ],
    "tags": []
  },
  "⬇️": {
    "description": "downwards black arrow",
    "names": [
      "arrow_down"
    ],
    "tags": []
  },
  "⬅️": {
    "description": "leftwards black arrow",
    "names": [
      "arrow_left"
    ],
    "tags": []
  },
  "➡️": {
    "description": "black rightwards arrow",
    "names": [
      "arrow_right"
    ],
    "tags": []
  },
  "🔠": {
    "description": "input symbol for latin capital letters",
    "names": [
      "capital_abcd"
    ],
    "tags": [
      "letters"
    ]
  },
  "🔡": {
    "description": "input symbol for latin small letters",
    "names": [
      "abcd"
    ],
    "tags": []
  },
  "🔤": {
    "description": "input symbol for latin letters",
    "names": [
      "abc"
    ],
    "tags": [
      "alphabet"
    ]
  },
  "↗️": {
    "description": "north east arrow",
    "names": [
      "arrow_upper_right"
    ],
    "tags": []
  },
  "↖️": {
    "description": "north west arrow",
    "names": [
      "arrow_upper_left"
    ],
    "tags": []
  },
  "↘️": {
    "description": "south east arrow",
    "names": [
      "arrow_lower_right"
    ],
    "tags": []
  },
  "↙️": {
    "description": "south west arrow",
    "names": [
      "arrow_lower_left"
    ],
    "tags": []
  },
  "↔️": {
    "description": "left right arrow",
    "names": [
      "left_right_arrow"
    ],
    "tags": []
  },
  "↕️": {
    "description": "up down arrow",
    "names": [
      "arrow_up_down"
    ],
    "tags": []
  },
  "🔄": {
    "description": "anticlockwise downwards and upwards open circle arrows",
    "names": [
      "arrows_counterclockwise"
    ],
    "tags": [
      "sync"
    ]
  },
  "◀️": {
    "description": "black left-pointing triangle",
    "names": [
      "arrow_backward"
    ],
    "tags": []
  },
  "▶️": {
    "description": "black right-pointing triangle",
    "names": [
      "arrow_forward"
    ],
    "tags": []
  },
  "🔼": {
    "description": "up-pointing small red triangle",
    "names": [
      "arrow_up_small"
    ],
    "tags": []
  },
  "🔽": {
    "description": "down-pointing small red triangle",
    "names": [
      "arrow_down_small"
    ],
    "tags": []
  },
  "↩️": {
    "description": "leftwards arrow with hook",
    "names": [
      "leftwards_arrow_with_hook"
    ],
    "tags": [
      "return"
    ]
  },
  "↪️": {
    "description": "rightwards arrow with hook",
    "names": [
      "arrow_right_hook"
    ],
    "tags": []
  },
  "ℹ️": {
    "description": "information source",
    "names": [
      "information_source"
    ],
    "tags": []
  },
  "⏪": {
    "description": "black left-pointing double triangle",
    "names": [
      "rewind"
    ],
    "tags": []
  },
  "⏩": {
    "description": "black right-pointing double triangle",
    "names": [
      "fast_forward"
    ],
    "tags": []
  },
  "⏫": {
    "description": "black up-pointing double triangle",
    "names": [
      "arrow_double_up"
    ],
    "tags": []
  },
  "⏬": {
    "description": "black down-pointing double triangle",
    "names": [
      "arrow_double_down"
    ],
    "tags": []
  },
  "⤵️": {
    "description": "arrow pointing rightwards then curving downwards",
    "names": [
      "arrow_heading_down"
    ],
    "tags": []
  },
  "⤴️": {
    "description": "arrow pointing rightwards then curving upwards",
    "names": [
      "arrow_heading_up"
    ],
    "tags": []
  },
  "🆗": {
    "description": "squared ok",
    "names": [
      "ok"
    ],
    "tags": [
      "yes"
    ]
  },
  "🔀": {
    "description": "twisted rightwards arrows",
    "names": [
      "twisted_rightwards_arrows"
    ],
    "tags": [
      "shuffle"
    ]
  },
  "🔁": {
    "description": "clockwise rightwards and leftwards open circle arrows",
    "names": [
      "repeat"
    ],
    "tags": [
      "loop"
    ]
  },
  "🔂": {
    "description": "clockwise rightwards and leftwards open circle arrows with circled one overlay",
    "names": [
      "repeat_one"
    ],
    "tags": []
  },
  "🆕": {
    "description": "squared new",
    "names": [
      "new"
    ],
    "tags": [
      "fresh"
    ]
  },
  "🆙": {
    "description": "squared up with exclamation mark",
    "names": [
      "up"
    ],
    "tags": []
  },
  "🆒": {
    "description": "squared cool",
    "names": [
      "cool"
    ],
    "tags": []
  },
  "🆓": {
    "description": "squared free",
    "names": [
      "free"
    ],
    "tags": []
  },
  "🆖": {
    "description": "squared ng",
    "names": [
      "ng"
    ],
    "tags": []
  },
  "📶": {
    "description": "antenna with bars",
    "names": [
      "signal_strength"
    ],
    "tags": [
      "wifi"
    ]
  },
  "🎦": {
    "description": "cinema",
    "names": [
      "cinema"
    ],
    "tags": [
      "film",
      "movie"
    ]
  },
  "🈁": {
    "description": "squared katakana koko",
    "names": [
      "koko"
    ],
    "tags": []
  },
  "🈯": {
    "description": "squared cjk unified ideograph-6307",
    "names": [
      "u6307"
    ],
    "tags": []
  },
  "🈳": {
    "description": "squared cjk unified ideograph-7a7a",
    "names": [
      "u7a7a"
    ],
    "tags": []
  },
  "🈵": {
    "description": "squared cjk unified ideograph-6e80",
    "names": [
      "u6e80"
    ],
    "tags": []
  },
  "🈴": {
    "description": "squared cjk unified ideograph-5408",
    "names": [
      "u5408"
    ],
    "tags": []
  },
  "🈲": {
    "description": "squared cjk unified ideograph-7981",
    "names": [
      "u7981"
    ],
    "tags": []
  },
  "🉐": {
    "description": "circled ideograph advantage",
    "names": [
      "ideograph_advantage"
    ],
    "tags": []
  },
  "🈹": {
    "description": "squared cjk unified ideograph-5272",
    "names": [
      "u5272"
    ],
    "tags": []
  },
  "🈺": {
    "description": "squared cjk unified ideograph-55b6",
    "names": [
      "u55b6"
    ],
    "tags": []
  },
  "🈶": {
    "description": "squared cjk unified ideograph-6709",
    "names": [
      "u6709"
    ],
    "tags": []
  },
  "🈚": {
    "description": "squared cjk unified ideograph-7121",
    "names": [
      "u7121"
    ],
    "tags": []
  },
  "🚻": {
    "description": "restroom",
    "names": [
      "restroom"
    ],
    "tags": [
      "toilet"
    ]
  },
  "🚹": {
    "description": "mens symbol",
    "names": [
      "mens"
    ],
    "tags": []
  },
  "🚺": {
    "description": "womens symbol",
    "names": [
      "womens"
    ],
    "tags": []
  },
  "🚼": {
    "description": "baby symbol",
    "names": [
      "baby_symbol"
    ],
    "tags": []
  },
  "🚾": {
    "description": "water closet",
    "names": [
      "wc"
    ],
    "tags": [
      "toilet",
      "restroom"
    ]
  },
  "🚰": {
    "description": "potable water symbol",
    "names": [
      "potable_water"
    ],
    "tags": []
  },
  "🚮": {
    "description": "put litter in its place symbol",
    "names": [
      "put_litter_in_its_place"
    ],
    "tags": []
  },
  "🅿️": {
    "description": "negative squared latin capital letter p",
    "names": [
      "parking"
    ],
    "tags": []
  },
  "♿": {
    "description": "wheelchair symbol",
    "names": [
      "wheelchair"
    ],
    "tags": [
      "accessibility"
    ]
  },
  "🚭": {
    "description": "no smoking symbol",
    "names": [
      "no_smoking"
    ],
    "tags": []
  },
  "🈷️": {
    "description": "squared cjk unified ideograph-6708",
    "names": [
      "u6708"
    ],
    "tags": []
  },
  "🈸": {
    "description": "squared cjk unified ideograph-7533",
    "names": [
      "u7533"
    ],
    "tags": []
  },
  "🈂️": {
    "description": "squared katakana sa",
    "names": [
      "sa"
    ],
    "tags": []
  },
  "Ⓜ️": {
    "description": "circled latin capital letter m",
    "names": [
      "m"
    ],
    "tags": []
  },
  "🛂": {
    "description": "passport control",
    "names": [
      "passport_control"
    ],
    "tags": []
  },
  "🛄": {
    "description": "baggage claim",
    "names": [
      "baggage_claim"
    ],
    "tags": [
      "airport"
    ]
  },
  "🛅": {
    "description": "left luggage",
    "names": [
      "left_luggage"
    ],
    "tags": []
  },
  "🛃": {
    "description": "customs",
    "names": [
      "customs"
    ],
    "tags": []
  },
  "🉑": {
    "description": "circled ideograph accept",
    "names": [
      "accept"
    ],
    "tags": []
  },
  "㊙️": {
    "description": "circled ideograph secret",
    "names": [
      "secret"
    ],
    "tags": []
  },
  "㊗️": {
    "description": "circled ideograph congratulation",
    "names": [
      "congratulations"
    ],
    "tags": []
  },
  "🆑": {
    "description": "squared cl",
    "names": [
      "cl"
    ],
    "tags": []
  },
  "🆘": {
    "description": "squared sos",
    "names": [
      "sos"
    ],
    "tags": [
      "help",
      "emergency"
    ]
  },
  "🆔": {
    "description": "squared id",
    "names": [
      "id"
    ],
    "tags": []
  },
  "🚫": {
    "description": "no entry sign",
    "names": [
      "no_entry_sign"
    ],
    "tags": [
      "block",
      "forbidden"
    ]
  },
  "🔞": {
    "description": "no one under eighteen symbol",
    "names": [
      "underage"
    ],
    "tags": []
  },
  "📵": {
    "description": "no mobile phones",
    "names": [
      "no_mobile_phones"
    ],
    "tags": []
  },
  "🚯": {
    "description": "do not litter symbol",
    "names": [
      "do_not_litter"
    ],
    "tags": []
  },
  "🚱": {
    "description": "non-potable water symbol",
    "names": [
      "non-potable_water"
    ],
    "tags": []
  },
  "🚳": {
    "description": "no bicycles",
    "names": [
      "no_bicycles"
    ],
    "tags": []
  },
  "🚷": {
    "description": "no pedestrians",
    "names": [
      "no_pedestrians"
    ],
    "tags": []
  },
  "🚸": {
    "description": "children crossing",
    "names": [
      "children_crossing"
    ],
    "tags": []
  },
  "⛔": {
    "description": "no entry",
    "names": [
      "no_entry"
    ],
    "tags": [
      "limit"
    ]
  },
  "✳️": {
    "description": "eight spoked asterisk",
    "names": [
      "eight_spoked_asterisk"
    ],
    "tags": []
  },
  "❇️": {
    "description": "sparkle",
    "names": [
      "sparkle"
    ],
    "tags": []
  },
  "❎": {
    "description": "negative squared cross mark",
    "names": [
      "negative_squared_cross_mark"
    ],
    "tags": []
  },
  "✅": {
    "description": "white heavy check mark",
    "names": [
      "white_check_mark"
    ],
    "tags": []
  },
  "✴️": {
    "description": "eight pointed black star",
    "names": [
      "eight_pointed_black_star"
    ],
    "tags": []
  },
  "💟": {
    "description": "heart decoration",
    "names": [
      "heart_decoration"
    ],
    "tags": []
  },
  "🆚": {
    "description": "squared vs",
    "names": [
      "vs"
    ],
    "tags": []
  },
  "📳": {
    "description": "vibration mode",
    "names": [
      "vibration_mode"
    ],
    "tags": []
  },
  "📴": {
    "description": "mobile phone off",
    "names": [
      "mobile_phone_off"
    ],
    "tags": [
      "mute",
      "off"
    ]
  },
  "🅰️": {
    "description": "negative squared latin capital letter a",
    "names": [
      "a"
    ],
    "tags": []
  },
  "🅱️": {
    "description": "negative squared latin capital letter b",
    "names": [
      "b"
    ],
    "tags": []
  },
  "🆎": {
    "description": "negative squared ab",
    "names": [
      "ab"
    ],
    "tags": []
  },
  "🅾️": {
    "description": "negative squared latin capital letter o",
    "names": [
      "o2"
    ],
    "tags": []
  },
  "💠": {
    "description": "diamond shape with a dot inside",
    "names": [
      "diamond_shape_with_a_dot_inside"
    ],
    "tags": []
  },
  "➿": {
    "description": "double curly loop",
    "names": [
      "loop"
    ],
    "tags": []
  },
  "♻️": {
    "description": "black universal recycling symbol",
    "names": [
      "recycle"
    ],
    "tags": [
      "environment",
      "green"
    ]
  },
  "♈": {
    "description": "aries",
    "names": [
      "aries"
    ],
    "tags": []
  },
  "♉": {
    "description": "taurus",
    "names": [
      "taurus"
    ],
    "tags": []
  },
  "♊": {
    "description": "gemini",
    "names": [
      "gemini"
    ],
    "tags": []
  },
  "♋": {
    "description": "cancer",
    "names": [
      "cancer"
    ],
    "tags": []
  },
  "♌": {
    "description": "leo",
    "names": [
      "leo"
    ],
    "tags": []
  },
  "♍": {
    "description": "virgo",
    "names": [
      "virgo"
    ],
    "tags": []
  },
  "♎": {
    "description": "libra",
    "names": [
      "libra"
    ],
    "tags": []
  },
  "♏": {
    "description": "scorpius",
    "names": [
      "scorpius"
    ],
    "tags": []
  },
  "♐": {
    "description": "sagittarius",
    "names": [
      "sagittarius"
    ],
    "tags": []
  },
  "♑": {
    "description": "capricorn",
    "names": [
      "capricorn"
    ],
    "tags": []
  },
  "♒": {
    "description": "aquarius",
    "names": [
      "aquarius"
    ],
    "tags": []
  },
  "♓": {
    "description": "pisces",
    "names": [
      "pisces"
    ],
    "tags": []
  },
  "⛎": {
    "description": "ophiuchus",
    "names": [
      "ophiuchus"
    ],
    "tags": []
  },
  "🔯": {
    "description": "six pointed star with middle dot",
    "names": [
      "six_pointed_star"
    ],
    "tags": []
  },
  "🏧": {
    "description": "automated teller machine",
    "names": [
      "atm"
    ],
    "tags": []
  },
  "💹": {
    "description": "chart with upwards trend and yen sign",
    "names": [
      "chart"
    ],
    "tags": []
  },
  "💲": {
    "description": "heavy dollar sign",
    "names": [
      "heavy_dollar_sign"
    ],
    "tags": []
  },
  "💱": {
    "description": "currency exchange",
    "names": [
      "currency_exchange"
    ],
    "tags": []
  },
  "©️": {
    "description": "copyright sign",
    "names": [
      "copyright"
    ],
    "tags": []
  },
  "®️": {
    "description": "registered sign",
    "names": [
      "registered"
    ],
    "tags": []
  },
  "™️": {
    "description": "trade mark sign",
    "names": [
      "tm"
    ],
    "tags": [
      "trademark"
    ]
  },
  "❌": {
    "description": "cross mark",
    "names": [
      "x"
    ],
    "tags": []
  },
  "‼️": {
    "description": "double exclamation mark",
    "names": [
      "bangbang"
    ],
    "tags": []
  },
  "⁉️": {
    "description": "exclamation question mark",
    "names": [
      "interrobang"
    ],
    "tags": []
  },
  "❗": {
    "description": "heavy exclamation mark symbol",
    "names": [
      "exclamation",
      "heavy_exclamation_mark"
    ],
    "tags": [
      "bang"
    ]
  },
  "❓": {
    "description": "black question mark ornament",
    "names": [
      "question"
    ],
    "tags": [
      "confused"
    ]
  },
  "❕": {
    "description": "white exclamation mark ornament",
    "names": [
      "grey_exclamation"
    ],
    "tags": []
  },
  "❔": {
    "description": "white question mark ornament",
    "names": [
      "grey_question"
    ],
    "tags": []
  },
  "⭕": {
    "description": "heavy large circle",
    "names": [
      "o"
    ],
    "tags": []
  },
  "🔝": {
    "description": "top with upwards arrow above",
    "names": [
      "top"
    ],
    "tags": []
  },
  "🔚": {
    "description": "end with leftwards arrow above",
    "names": [
      "end"
    ],
    "tags": []
  },
  "🔙": {
    "description": "back with leftwards arrow above",
    "names": [
      "back"
    ],
    "tags": []
  },
  "🔛": {
    "description": "on with exclamation mark with left right arrow above",
    "names": [
      "on"
    ],
    "tags": []
  },
  "🔜": {
    "description": "soon with rightwards arrow above",
    "names": [
      "soon"
    ],
    "tags": []
  },
  "🔃": {
    "description": "clockwise downwards and upwards open circle arrows",
    "names": [
      "arrows_clockwise"
    ],
    "tags": []
  },
  "🕛": {
    "description": "clock face twelve oclock",
    "names": [
      "clock12"
    ],
    "tags": []
  },
  "🕧": {
    "description": "clock face twelve-thirty",
    "names": [
      "clock1230"
    ],
    "tags": []
  },
  "🕐": {
    "description": "clock face one oclock",
    "names": [
      "clock1"
    ],
    "tags": []
  },
  "🕜": {
    "description": "clock face one-thirty",
    "names": [
      "clock130"
    ],
    "tags": []
  },
  "🕑": {
    "description": "clock face two oclock",
    "names": [
      "clock2"
    ],
    "tags": []
  },
  "🕝": {
    "description": "clock face two-thirty",
    "names": [
      "clock230"
    ],
    "tags": []
  },
  "🕒": {
    "description": "clock face three oclock",
    "names": [
      "clock3"
    ],
    "tags": []
  },
  "🕞": {
    "description": "clock face three-thirty",
    "names": [
      "clock330"
    ],
    "tags": []
  },
  "🕓": {
    "description": "clock face four oclock",
    "names": [
      "clock4"
    ],
    "tags": []
  },
  "🕟": {
    "description": "clock face four-thirty",
    "names": [
      "clock430"
    ],
    "tags": []
  },
  "🕔": {
    "description": "clock face five oclock",
    "names": [
      "clock5"
    ],
    "tags": []
  },
  "🕠": {
    "description": "clock face five-thirty",
    "names": [
      "clock530"
    ],
    "tags": []
  },
  "🕕": {
    "description": "clock face six oclock",
    "names": [
      "clock6"
    ],
    "tags": []
  },
  "🕖": {
    "description": "clock face seven oclock",
    "names": [
      "clock7"
    ],
    "tags": []
  },
  "🕗": {
    "description": "clock face eight oclock",
    "names": [
      "clock8"
    ],
    "tags": []
  },
  "🕘": {
    "description": "clock face nine oclock",
    "names": [
      "clock9"
    ],
    "tags": []
  },
  "🕙": {
    "description": "clock face ten oclock",
    "names": [
      "clock10"
    ],
    "tags": []
  },
  "🕚": {
    "description": "clock face eleven oclock",
    "names": [
      "clock11"
    ],
    "tags": []
  },
  "🕡": {
    "description": "clock face six-thirty",
    "names": [
      "clock630"
    ],
    "tags": []
  },
  "🕢": {
    "description": "clock face seven-thirty",
    "names": [
      "clock730"
    ],
    "tags": []
  },
  "🕣": {
    "description": "clock face eight-thirty",
    "names": [
      "clock830"
    ],
    "tags": []
  },
  "🕤": {
    "description": "clock face nine-thirty",
    "names": [
      "clock930"
    ],
    "tags": []
  },
  "🕥": {
    "description": "clock face ten-thirty",
    "names": [
      "clock1030"
    ],
    "tags": []
  },
  "🕦": {
    "description": "clock face eleven-thirty",
    "names": [
      "clock1130"
    ],
    "tags": []
  },
  "✖️": {
    "description": "heavy multiplication x",
    "names": [
      "heavy_multiplication_x"
    ],
    "tags": []
  },
  "➕": {
    "description": "heavy plus sign",
    "names": [
      "heavy_plus_sign"
    ],
    "tags": []
  },
  "➖": {
    "description": "heavy minus sign",
    "names": [
      "heavy_minus_sign"
    ],
    "tags": []
  },
  "➗": {
    "description": "heavy division sign",
    "names": [
      "heavy_division_sign"
    ],
    "tags": []
  },
  "♠️": {
    "description": "black spade suit",
    "names": [
      "spades"
    ],
    "tags": []
  },
  "♥️": {
    "description": "black heart suit",
    "names": [
      "hearts"
    ],
    "tags": []
  },
  "♣️": {
    "description": "black club suit",
    "names": [
      "clubs"
    ],
    "tags": []
  },
  "♦️": {
    "description": "black diamond suit",
    "names": [
      "diamonds"
    ],
    "tags": []
  },
  "💮": {
    "description": "white flower",
    "names": [
      "white_flower"
    ],
    "tags": []
  },
  "💯": {
    "description": "hundred points symbol",
    "names": [
      "100"
    ],
    "tags": [
      "score",
      "perfect"
    ]
  },
  "✔️": {
    "description": "heavy check mark",
    "names": [
      "heavy_check_mark"
    ],
    "tags": []
  },
  "☑️": {
    "description": "ballot box with check",
    "names": [
      "ballot_box_with_check"
    ],
    "tags": []
  },
  "🔘": {
    "description": "radio button",
    "names": [
      "radio_button"
    ],
    "tags": []
  },
  "🔗": {
    "description": "link symbol",
    "names": [
      "link"
    ],
    "tags": []
  },
  "➰": {
    "description": "curly loop",
    "names": [
      "curly_loop"
    ],
    "tags": []
  },
  "〰️": {
    "description": "wavy dash",
    "names": [
      "wavy_dash"
    ],
    "tags": []
  },
  "〽️": {
    "description": "part alternation mark",
    "names": [
      "part_alternation_mark"
    ],
    "tags": []
  },
  "🔱": {
    "description": "trident emblem",
    "names": [
      "trident"
    ],
    "tags": []
  },
  "◼️": {
    "description": "black medium square",
    "names": [
      "black_medium_square"
    ],
    "tags": []
  },
  "◻️": {
    "description": "white medium square",
    "names": [
      "white_medium_square"
    ],
    "tags": []
  },
  "◾": {
    "description": "black medium small square",
    "names": [
      "black_medium_small_square"
    ],
    "tags": []
  },
  "◽": {
    "description": "white medium small square",
    "names": [
      "white_medium_small_square"
    ],
    "tags": []
  },
  "▪️": {
    "description": "black small square",
    "names": [
      "black_small_square"
    ],
    "tags": []
  },
  "▫️": {
    "description": "white small square",
    "names": [
      "white_small_square"
    ],
    "tags": []
  },
  "🔺": {
    "description": "up-pointing red triangle",
    "names": [
      "small_red_triangle"
    ],
    "tags": []
  },
  "🔲": {
    "description": "black square button",
    "names": [
      "black_square_button"
    ],
    "tags": []
  },
  "🔳": {
    "description": "white square button",
    "names": [
      "white_square_button"
    ],
    "tags": []
  },
  "⚫": {
    "description": "medium black circle",
    "names": [
      "black_circle"
    ],
    "tags": []
  },
  "⚪": {
    "description": "medium white circle",
    "names": [
      "white_circle"
    ],
    "tags": []
  },
  "🔴": {
    "description": "large red circle",
    "names": [
      "red_circle"
    ],
    "tags": []
  },
  "🔵": {
    "description": "large blue circle",
    "names": [
      "large_blue_circle"
    ],
    "tags": []
  },
  "🔻": {
    "description": "down-pointing red triangle",
    "names": [
      "small_red_triangle_down"
    ],
    "tags": []
  },
  "⬜": {
    "description": "white large square",
    "names": [
      "white_large_square"
    ],
    "tags": []
  },
  "⬛": {
    "description": "black large square",
    "names": [
      "black_large_square"
    ],
    "tags": []
  },
  "🔶": {
    "description": "large orange diamond",
    "names": [
      "large_orange_diamond"
    ],
    "tags": []
  },
  "🔷": {
    "description": "large blue diamond",
    "names": [
      "large_blue_diamond"
    ],
    "tags": []
  },
  "🔸": {
    "description": "small orange diamond",
    "names": [
      "small_orange_diamond"
    ],
    "tags": []
  },
  "🔹": {
    "description": "small blue diamond",
    "names": [
      "small_blue_diamond"
    ],
    "tags": []
  }
}

},{}],166:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module gemoji
 * @fileoverview GitHub emoji: gemoji.
 */

'use strict';

/* eslint-env commonjs */

/*
 * Data.
 */

var data = require('./data/gemoji.json');

/*
 * Dictionaries.
 */

var named = {};

var gemoji = {
    'unicode': data,
    'name': named
};

/**
 * Transform an emoji.
 *
 * @param {string} character - Unicode emoji to extend.
 */
function enhanceEmoji(character) {
    var information = data[character];
    var names = information.names;
    var index = 0; // first must be skipped.
    var length = names.length;

    /*
     * Add the main `name`.
     */

    information.name = names[0];

    /*
     * Add the emoji to the object too.
     */

    information.emoji = character;

    /*
     * Add the main `name` to `named`.
     */

    named[names[0]] = information;

    /*
     * If the emoji is known by other names,
     * add those to the map too.
     */

    while (++index < length) {
        named[names[index]] = information;
    }
}

/*
 * Transform all emoji.
 */

var emoji;

for (emoji in data) {
    enhanceEmoji(emoji);
}

/*
 * Expose.
 */

module.exports = gemoji;

},{"./data/gemoji.json":165}],167:[function(require,module,exports){
var bind = require('function-bind');

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

},{"function-bind":164}],168:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module hast-to-hyperscript
 * @fileoverview Transform HAST to something else through
 *   a hyperscript DSL.
 */

'use strict';

/* eslint-env commonjs */

/*
 * Dependencies.
 */

var paramCase = require('kebab-case');
var information = require('property-information');
var spaces = require('space-separated-tokens');
var commas = require('comma-separated-tokens');
var is = require('unist-util-is');

/**
 * Check if `h` is `virtual-dom/h`.  It’s the only
 * hyperscript “compatible” interface needing `attributes`.
 *
 * @param {Function} h - Hyperscript interface.
 * @return {boolean} - Whether `h` is `virtual-dom/h`.
 */
function vdom(h) {
    try {
        return h('div').type === 'VirtualNode';
    } catch (e) { /* Empty */ }

    /* istanbul ignore next */
    return false;
}

/**
 * Check if `h` is `hyperscript`.  It doesn’t accept
 * `class` as an attribute, it must be added through the
 * `selector`.
 *
 * @param {Function} h - Hyperscript interface.
 * @return {boolean} - Whether `h` is `hyperscript`.
 */
function hyperscript(h) {
    return h && h.context && h.cleanup;
}

/**
 * Check if `h` is `react.createElement`.  It doesn’t accept
 * `class` as an attribute, it must be added through the
 * `selector`.
 *
 * @param {Function} h - Hyperscript interface.
 * @return {boolean} - Whether `h` is `hyperscript`.
 */
function react(h) {
    var node = h && h('div');

    return node && node._store && node.key == null;
}

/**
 * Add `name` and its `value` to `props`.
 *
 * @param {Object} props - Attributes.
 * @param {string} name - Property name.
 * @param {*} value - Property value.
 * @param {Object} ctx - Hypertext info.
 */
function addAttribute(props, name, value, ctx) {
    var info = information(name) || {};

    /* Ignore nully, `false`, `NaN`, and falsey known
     * booleans. */
    if (
        value == null ||
        value === false ||
        value !== value ||
        (info.boolean && !value)
    ) {
        return;
    }

    name = info.name || paramCase(name);

    if (info.boolean) {
        /* Treat `true` and truthy known booleans. */
        value = '';
    } else if (typeof value === 'object' && 'length' in value) {
        /* Accept `array`.  Most props are space-separater. */
        value = (info.commaSeparated ? commas : spaces).stringify(value);
    }

    value = String(value || '');

    if (
        ctx.vdom &&
        info.name !== 'class' &&
        (info.mustUseAttribute || !info.name)
    ) {
        if (!props.attributes) {
            props.attributes = {};
        }

        props.attributes[name] = value;

        return;
    }

    props[info.propertyName || name] = value;
}

/**
 * Transform a HAST node through a hyperscript interface
 * to *anything*!
 *
 * @param {Function} h - Hyperscript interface.
 * @param {HASTElementNode} node - Element node.
 * @param {Object} ctx - Hypertext info.
 * @throws {Error} - If `node` is node an element.
 * @return {*} - Result of `h`.
 */
function toH(h, node, ctx) {
    var selector = node.tagName;
    var properties;
    var attributes;
    var children;
    var property;
    var elements;
    var length;
    var index;
    var value;

    properties = node.properties;
    attributes = {};

    for (property in properties) {
        addAttribute(attributes, property, properties[property], ctx);
    }

    if (ctx.vdom) {
        selector = selector.toUpperCase();
    }

    if (ctx.hyperscript && attributes.id) {
        selector += '#' + attributes.id;
        delete attributes.id;
    }

    if ((ctx.hyperscript || ctx.vdom) && attributes.className) {
        selector += '.' + spaces.parse(attributes.className).join('.');
        delete attributes.className;
    }

    if (ctx.prefix) {
        ctx.key++;
        attributes.key = ctx.prefix + ctx.key;
    }

    elements = [];
    children = node.children || [];
    length = children.length;
    index = -1;

    while (++index < length) {
        value = children[index];

        if (is('element', value)) {
            elements.push(toH(h, value, ctx));
        } else if (is('text', value)) {
            elements.push(value.value);
        }
    }

    /* Ensure no React warnings are triggered for
     * void elements having children passed in. */
    if (!elements.length) {
        elements = undefined;
    }

    return h(selector, attributes, elements);
}

/**
 * Wrapper around `toH`.
 *
 * @param {Function} h - Hyperscript interface.
 * @param {HASTElementNode} node - Element node.
 * @param {string?} [prefix] - Unique identifier.
 * @throws {Error} - If `node` is node an element.
 * @return {*} - Result of `h`.
 */
function wrapper(h, node, prefix) {
    if (typeof h !== 'function') {
        throw new Error('h is not a function');
    }

    if (!is('element', node)) {
        throw new Error('Expected element, not `' + node + '`');
    }

    if (prefix == null) {
        prefix = react(h) || vdom(h) ? 'h-' : false;
    }

    return toH(h, node, {
        prefix: prefix,
        key: 0,
        react: react(h),
        vdom: vdom(h),
        hyperscript: hyperscript(h)
    });
}

/*
 * Expose.
 */

module.exports = wrapper;

},{"comma-separated-tokens":44,"kebab-case":193,"property-information":209,"space-separated-tokens":333,"unist-util-is":348}],169:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module hdast:sanitize
 * @fileoverview Sanitize HAST.
 */

'use strict';

/* Expose. */
module.exports = require('./lib/index');

},{"./lib/index":171}],170:[function(require,module,exports){
module.exports={
  "strip": [
    "script"
  ],
  "clobberPrefix": "user-content-",
  "clobber": [
    "name",
    "id"
  ],
  "ancestors": {
    "li": [
      "ol",
      "ul"
    ],
    "tbody": [
      "table"
    ],
    "tfoot": [
      "table"
    ],
    "thead": [
      "table"
    ],
    "td": [
      "table"
    ],
    "th": [
      "table"
    ],
    "tr": [
      "table"
    ]
  },
  "protocols": {
    "href": [
      "http",
      "https",
      "mailto"
    ],
    "cite": [
      "http",
      "https"
    ],
    "src": [
      "http",
      "https"
    ],
    "longDesc": [
      "http",
      "https"
    ]
  },
  "tagNames": [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "h7",
    "h8",
    "br",
    "b",
    "i",
    "strong",
    "em",
    "a",
    "pre",
    "code",
    "img",
    "tt",
    "div",
    "ins",
    "del",
    "sup",
    "sub",
    "p",
    "ol",
    "ul",
    "table",
    "thead",
    "tbody",
    "tfoot",
    "blockquote",
    "dl",
    "dt",
    "dd",
    "kbd",
    "q",
    "samp",
    "var",
    "hr",
    "ruby",
    "rt",
    "rp",
    "li",
    "tr",
    "td",
    "th",
    "s",
    "strike",
    "summary",
    "details"
  ],
  "attributes": {
    "a": [
      "href"
    ],
    "img": [
      "src",
      "longDesc"
    ],
    "div": [
      "itemScope",
      "itemType"
    ],
    "blockquote": [
      "cite"
    ],
    "del": [
      "cite"
    ],
    "ins": [
      "cite"
    ],
    "q": [
      "cite"
    ],
    "*": [
      "abbr",
      "accept",
      "acceptCharset",
      "accessKey",
      "action",
      "align",
      "alt",
      "axis",
      "border",
      "cellPadding",
      "cellSpacing",
      "char",
      "charoff",
      "charSet",
      "checked",
      "clear",
      "cols",
      "colSpan",
      "color",
      "compact",
      "coords",
      "dateTime",
      "dir",
      "disabled",
      "encType",
      "htmlFor",
      "frame",
      "headers",
      "height",
      "hrefLang",
      "hspace",
      "isMap",
      "id",
      "label",
      "lang",
      "maxLength",
      "media",
      "method",
      "multiple",
      "name",
      "nohref",
      "noshade",
      "nowrap",
      "open",
      "prompt",
      "readOnly",
      "rel",
      "rev",
      "rows",
      "rowSpan",
      "rules",
      "scope",
      "selected",
      "shape",
      "size",
      "span",
      "start",
      "summary",
      "tabIndex",
      "target",
      "title",
      "type",
      "useMap",
      "valign",
      "value",
      "vspace",
      "width",
      "itemProp"
    ]
  }
}

},{}],171:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module hdast:sanitize
 * @fileoverview Sanitize HAST.
 */

'use strict';

/* Dependencies. */
var has = require('has');
var xtend = require('xtend');
var defaults = require('./github');

/* Expose. */
module.exports = wrapper;

/* Schema. */
var NODES = {
  'root': {children: all},
  'element': {
    tagName: handleTagName,
    properties: handleProperties,
    children: all
  },
  'text': {value: handleValue},
  '*': {
    data: allow,
    position: allow
  }
};

/**
 * Sanitize `node`, according to `schema`.
 *
 * @param {Node} node - HAST node to sanitize.
 * @param {Object} [schema] - Schema to use.
 *   Defaults to `github`.
 * @return {Node} - Sanitized HAST node.
 */
function wrapper(node, schema) {
  var ctx = {type: 'root', children: []};
  var replace;

  if (!node || typeof node !== 'object' || !node.type) {
    return ctx;
  }

  replace = one(xtend(defaults, schema || {}), node, []);

  if (!replace) {
    return ctx;
  }

  if ('length' in replace) {
    if (replace.length === 1) {
      return replace[0];
    }

    ctx.children = replace;

    return ctx;
  }

  return replace;
}

/**
 * Sanitize `node`.
 *
 * @param {Object} schema - Configuration.
 * @param {Node} node - HAST node to sanitize.
 * @param {Array.<string>} stack - Element stack.
 * @return {Node?|Array.<Node>} - Clean node(s).
 */
function one(schema, node, stack) {
  var type = node && node.type;
  var replacement = {type: node.type};
  var replace = true;
  var allowed;
  var result;
  var key;

  if (!has(NODES, type)) {
    replace = false;
  } else {
    allowed = xtend(NODES[type], NODES['*']);

    for (key in allowed) {
      result = allowed[key](schema, node[key], node, stack);

      if (result === false) {
        replace = false;

        /* Set the non-safe value. */
        replacement[key] = node[key];
      } else if (result != null) {
        replacement[key] = result;
      }
    }
  }

  if (!replace) {
    if (
      !replacement.children ||
      !replacement.children.length ||
      schema.strip.indexOf(replacement.tagName) !== -1
    ) {
      return null;
    }

    return replacement.children;
  }

  return replacement;
}

/**
 * Sanitize `children`.
 *
 * @param {Object} schema - Configuration.
 * @param {Array.<Node>} children - HAST nodes.
 * @param {Node} node - Parent.
 * @param {Array.<string>} stack - Element stack.
 * @return {Array.<Node>} - Clean nodes.
 */
function all(schema, children, node, stack) {
  var nodes = children || [];
  var length = nodes.length || 0;
  var results = [];
  var index = -1;
  var result;

  stack = stack.concat(node.tagName);

  while (++index < length) {
    result = one(schema, nodes[index], stack);

    if (result) {
      if ('length' in result) {
        results = results.concat(result);
      } else {
        results.push(result);
      }
    }
  }

  return results;
}

/**
 * Sanitize `properties`.
 *
 * @param {Object} schema - Configuration.
 * @param {Object} properties - Element `properties`.
 * @param {Node} node - Context.
 * @param {Array.<string>} stack - Element stack.
 * @return {Object} - Clean properties.
 */
function handleProperties(schema, properties, node, stack) {
  var name = handleTagName(schema, node.tagName, node, stack);
  var attrs = schema.attributes;
  var props = properties || {};
  var result = {};
  var allowed;
  var prop;
  var value;

  allowed = has(attrs, name) ? attrs[name] : [];
  allowed = [].concat(allowed, attrs['*']);

  for (prop in props) {
    value = props[prop];

    if (
      allowed.indexOf(prop) === -1 &&
      !(data(prop) && allowed.indexOf('data*') !== -1)
    ) {
      continue;
    }

    if (value && typeof value === 'object' && 'length' in value) {
      value = handlePropertyValues(schema, value, prop);
    } else {
      value = handlePropertyValue(schema, value, prop);
    }

    if (value != null) {
      result[prop] = value;
    }
  }

  return result;
}

/**
 * Sanitize a property value which is a list.
 *
 * @param {Object} schema - Configuration.
 * @param {Array.<*>} values - List of values.
 * @param {string} prop - Key at which `values` live.
 * @return {Array.<number|boolean|string>} - Clean values.
 */
function handlePropertyValues(schema, values, prop) {
  var length = values.length;
  var result = [];
  var index = -1;
  var value;

  while (++index < length) {
    value = handlePropertyValue(schema, values[index], prop);

    if (value != null) {
      result.push(value);
    }
  }

  return result;
}

/**
 * Sanitize a property value.
 *
 * @param {Object} schema - Configuration.
 * @param {*} value - Value.
 * @param {string} prop - Key at which `value` live.
 * @return {number|boolean|string?} - Clean value.
 */
function handlePropertyValue(schema, value, prop) {
  if (
    typeof value !== 'boolean' &&
    typeof value !== 'number' &&
    typeof value !== 'string'
  ) {
    return null;
  }

  if (!handleProtocol(schema, value, prop)) {
    return null;
  }

  if (schema.clobber.indexOf(prop) !== -1) {
    value = schema.clobberPrefix + value;
  }

  return value;
}

/**
 * Check whether `value` is a safe URL.
 *
 * @param {Object} schema - Configuration.
 * @param {*} value - Value.
 * @param {string} prop - Key at which `value` live.
 * @return {boolean} - Whether `value` is safe.
 */
function handleProtocol(schema, value, prop) {
  var protocols = schema.protocols;
  var protocol;
  var first;
  var colon;
  var length;
  var index;

  protocols = has(protocols, prop) ? protocols[prop].concat() : [];

  if (!protocols.length) {
    return true;
  }

  value = String(value);
  first = value.charAt(0);

  if (first === '#' || first === '/') {
    return true;
  }

  colon = value.indexOf(':');

  if (colon === -1) {
    return true;
  }

  length = protocols.length;
  index = -1;

  while (++index < length) {
    protocol = protocols[index];

    if (
      colon === protocol.length &&
      value.slice(0, protocol.length) === protocol
    ) {
      return true;
    }
  }

  index = value.indexOf('?');

  if (index !== -1 && colon > index) {
    return true;
  }

  index = value.indexOf('#');

  if (index !== -1 && colon > index) {
    return true;
  }

  return false;
}

/**
 * Sanitize `tagName`.
 *
 * @param {Object} schema - Configuration.
 * @param {*} tagName - Tag-name of element.
 * @param {Node} node - HAST node to sanitize.
 * @param {Array.<string>} stack - Element stack.
 * @return {string|boolean?} - `false`, if `tagName`
 *   represents an unsage element, a string to use
 *   as a tag-name otherwise.
 */
function handleTagName(schema, tagName, node, stack) {
  var name = typeof tagName === 'string' ? tagName : null;
  var ancestors = schema.ancestors;
  var length;
  var index;

  if (!name || name === '*' || schema.tagNames.indexOf(name) === -1) {
    return false;
  }

  ancestors = has(ancestors, name) ? ancestors[name] : [];

  /* Some nodes can break out of their context if they
   * don’t have a certain ancestor. */
  if (ancestors.length) {
    length = ancestors.length + 1;
    index = -1;

    while (++index < length) {
      if (!ancestors[index]) {
        return false;
      }

      if (stack.indexOf(ancestors[index]) !== -1) {
        break;
      }
    }
  }

  return name;
}

/* Sanitize `value`. */
function handleValue(schema, value) {
  return typeof value === 'string' ? value : '';
}

/* Allow `value`. */
function allow(schema, value) {
  return value;
}

/* Check if `prop` is a data property. */
function data(prop) {
  return prop.length > 4 && prop.slice(0, 4).toLowerCase() === 'data';
}

},{"./github":170,"has":167,"xtend":375}],172:[function(require,module,exports){
module.exports = function(hljs) {
  var VAR = {
    className: 'variable',
    variants: [
      {begin: /\$[\w\d#@][\w\d_]*/},
      {begin: /\$\{(.*?)}/}
    ]
  };
  var QUOTE_STRING = {
    className: 'string',
    begin: /"/, end: /"/,
    contains: [
      hljs.BACKSLASH_ESCAPE,
      VAR,
      {
        className: 'variable',
        begin: /\$\(/, end: /\)/,
        contains: [hljs.BACKSLASH_ESCAPE]
      }
    ]
  };
  var APOS_STRING = {
    className: 'string',
    begin: /'/, end: /'/
  };

  return {
    aliases: ['sh', 'zsh'],
    lexemes: /-?[a-z\._]+/,
    keywords: {
      keyword:
        'if then else elif fi for while in do done case esac function',
      literal:
        'true false',
      built_in:
        // Shell built-ins
        // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
        'break cd continue eval exec exit export getopts hash pwd readonly return shift test times ' +
        'trap umask unset ' +
        // Bash built-ins
        'alias bind builtin caller command declare echo enable help let local logout mapfile printf ' +
        'read readarray source type typeset ulimit unalias ' +
        // Shell modifiers
        'set shopt ' +
        // Zsh built-ins
        'autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles ' +
        'compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate ' +
        'fc fg float functions getcap getln history integer jobs kill limit log noglob popd print ' +
        'pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit ' +
        'unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof ' +
        'zpty zregexparse zsocket zstyle ztcp',
      _:
        '-ne -eq -lt -gt -f -d -e -s -l -a' // relevance booster
    },
    contains: [
      {
        className: 'meta',
        begin: /^#![^\n]+sh\s*$/,
        relevance: 10
      },
      {
        className: 'function',
        begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
        returnBegin: true,
        contains: [hljs.inherit(hljs.TITLE_MODE, {begin: /\w[\w\d_]*/})],
        relevance: 0
      },
      hljs.HASH_COMMENT_MODE,
      QUOTE_STRING,
      APOS_STRING,
      VAR
    ]
  };
};
},{}],173:[function(require,module,exports){
module.exports = function(hljs) {
  var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
  var RULE = {
    begin: /[A-Z\_\.\-]+\s*:/, returnBegin: true, end: ';', endsWithParent: true,
    contains: [
      {
        className: 'attribute',
        begin: /\S/, end: ':', excludeEnd: true,
        starts: {
          endsWithParent: true, excludeEnd: true,
          contains: [
            {
              begin: /[\w-]+\(/, returnBegin: true,
              contains: [
                {
                  className: 'built_in',
                  begin: /[\w-]+/
                },
                {
                  begin: /\(/, end: /\)/,
                  contains: [
                    hljs.APOS_STRING_MODE,
                    hljs.QUOTE_STRING_MODE
                  ]
                }
              ]
            },
            hljs.CSS_NUMBER_MODE,
            hljs.QUOTE_STRING_MODE,
            hljs.APOS_STRING_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            {
              className: 'number', begin: '#[0-9A-Fa-f]+'
            },
            {
              className: 'meta', begin: '!important'
            }
          ]
        }
      }
    ]
  };

  return {
    case_insensitive: true,
    illegal: /[=\/|'\$]/,
    contains: [
      hljs.C_BLOCK_COMMENT_MODE,
      {
        className: 'selector-id', begin: /#[A-Za-z0-9_-]+/
      },
      {
        className: 'selector-class', begin: /\.[A-Za-z0-9_-]+/
      },
      {
        className: 'selector-attr',
        begin: /\[/, end: /\]/,
        illegal: '$'
      },
      {
        className: 'selector-pseudo',
        begin: /:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/
      },
      {
        begin: '@(font-face|page)',
        lexemes: '[a-z-]+',
        keywords: 'font-face page'
      },
      {
        begin: '@', end: '[{;]', // at_rule eating first "{" is a good thing
                                 // because it doesn’t let it to be parsed as
                                 // a rule set but instead drops parser into
                                 // the default mode which is how it should be.
        illegal: /:/, // break on Less variables @var: ...
        contains: [
          {
            className: 'keyword',
            begin: /\w+/
          },
          {
            begin: /\s/, endsWithParent: true, excludeEnd: true,
            relevance: 0,
            contains: [
              hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE,
              hljs.CSS_NUMBER_MODE
            ]
          }
        ]
      },
      {
        className: 'selector-tag', begin: IDENT_RE,
        relevance: 0
      },
      {
        begin: '{', end: '}',
        illegal: /\S/,
        contains: [
          hljs.C_BLOCK_COMMENT_MODE,
          RULE,
        ]
      }
    ]
  };
};
},{}],174:[function(require,module,exports){
module.exports = function(hljs) {
  var IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
  var KEYWORDS = {
    keyword:
      'in of if for while finally var new function do return void else break catch ' +
      'instanceof with throw case default try this switch continue typeof delete ' +
      'let yield const export super debugger as async await static ' +
      // ECMAScript 6 modules import
      'import from as'
    ,
    literal:
      'true false null undefined NaN Infinity',
    built_in:
      'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +
      'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +
      'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +
      'TypeError URIError Number Math Date String RegExp Array Float32Array ' +
      'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +
      'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +
      'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect ' +
      'Promise'
  };
  var EXPRESSIONS;
  var NUMBER = {
    className: 'number',
    variants: [
      { begin: '\\b(0[bB][01]+)' },
      { begin: '\\b(0[oO][0-7]+)' },
      { begin: hljs.C_NUMBER_RE }
    ],
    relevance: 0
  };
  var SUBST = {
    className: 'subst',
    begin: '\\$\\{', end: '\\}',
    keywords: KEYWORDS,
    contains: []  // defined later
  };
  var TEMPLATE_STRING = {
    className: 'string',
    begin: '`', end: '`',
    contains: [
      hljs.BACKSLASH_ESCAPE,
      SUBST
    ]
  };
  SUBST.contains = [
    hljs.APOS_STRING_MODE,
    hljs.QUOTE_STRING_MODE,
    TEMPLATE_STRING,
    NUMBER,
    hljs.REGEXP_MODE
  ]
  var PARAMS_CONTAINS = SUBST.contains.concat([
    hljs.C_BLOCK_COMMENT_MODE,
    hljs.C_LINE_COMMENT_MODE
  ]);

  return {
    aliases: ['js', 'jsx'],
    keywords: KEYWORDS,
    contains: [
      {
        className: 'meta',
        relevance: 10,
        begin: /^\s*['"]use (strict|asm)['"]/
      },
      {
        className: 'meta',
        begin: /^#!/, end: /$/
      },
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      TEMPLATE_STRING,
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      NUMBER,
      { // object attr container
        begin: /[{,]\s*/, relevance: 0,
        contains: [
          {
            begin: IDENT_RE + '\\s*:', returnBegin: true,
            relevance: 0,
            contains: [{className: 'attr', begin: IDENT_RE, relevance: 0}]
          }
        ]
      },
      { // "value" container
        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
        keywords: 'return throw case',
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.REGEXP_MODE,
          {
            className: 'function',
            begin: '(\\(.*?\\)|' + IDENT_RE + ')\\s*=>', returnBegin: true,
            end: '\\s*=>',
            contains: [
              {
                className: 'params',
                variants: [
                  {
                    begin: IDENT_RE
                  },
                  {
                    begin: /\(\s*\)/,
                  },
                  {
                    begin: /\(/, end: /\)/,
                    excludeBegin: true, excludeEnd: true,
                    keywords: KEYWORDS,
                    contains: PARAMS_CONTAINS
                  }
                ]
              }
            ]
          },
          { // E4X / JSX
            begin: /</, end: /(\/\w+|\w+\/)>/,
            subLanguage: 'xml',
            contains: [
              {begin: /<\w+\s*\/>/, skip: true},
              {
                begin: /<\w+/, end: /(\/\w+|\w+\/)>/, skip: true,
                contains: [
                  {begin: /<\w+\s*\/>/, skip: true},
                  'self'
                ]
              }
            ]
          }
        ],
        relevance: 0
      },
      {
        className: 'function',
        beginKeywords: 'function', end: /\{/, excludeEnd: true,
        contains: [
          hljs.inherit(hljs.TITLE_MODE, {begin: IDENT_RE}),
          {
            className: 'params',
            begin: /\(/, end: /\)/,
            excludeBegin: true,
            excludeEnd: true,
            contains: PARAMS_CONTAINS
          }
        ],
        illegal: /\[|%/
      },
      {
        begin: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
      },
      hljs.METHOD_GUARD,
      { // ES6 class
        className: 'class',
        beginKeywords: 'class', end: /[{;=]/, excludeEnd: true,
        illegal: /[:"\[\]]/,
        contains: [
          {beginKeywords: 'extends'},
          hljs.UNDERSCORE_TITLE_MODE
        ]
      },
      {
        beginKeywords: 'constructor', end: /\{/, excludeEnd: true
      }
    ],
    illegal: /#(?!!)/
  };
};
},{}],175:[function(require,module,exports){
module.exports = function(hljs) {
  var LITERALS = {literal: 'true false null'};
  var TYPES = [
    hljs.QUOTE_STRING_MODE,
    hljs.C_NUMBER_MODE
  ];
  var VALUE_CONTAINER = {
    end: ',', endsWithParent: true, excludeEnd: true,
    contains: TYPES,
    keywords: LITERALS
  };
  var OBJECT = {
    begin: '{', end: '}',
    contains: [
      {
        className: 'attr',
        begin: /"/, end: /"/,
        contains: [hljs.BACKSLASH_ESCAPE],
        illegal: '\\n',
      },
      hljs.inherit(VALUE_CONTAINER, {begin: /:/})
    ],
    illegal: '\\S'
  };
  var ARRAY = {
    begin: '\\[', end: '\\]',
    contains: [hljs.inherit(VALUE_CONTAINER)], // inherit is a workaround for a bug that makes shared modes with endsWithParent compile only the ending of one of the parents
    illegal: '\\S'
  };
  TYPES.splice(TYPES.length, 0, OBJECT, ARRAY);
  return {
    contains: TYPES,
    keywords: LITERALS,
    illegal: '\\S'
  };
};
},{}],176:[function(require,module,exports){
module.exports = function(hljs) {
  var IDENT_RE        = '[\\w-]+'; // yes, Less identifiers may begin with a digit
  var INTERP_IDENT_RE = '(' + IDENT_RE + '|@{' + IDENT_RE + '})';

  /* Generic Modes */

  var RULES = [], VALUE = []; // forward def. for recursive modes

  var STRING_MODE = function(c) { return {
    // Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)
    className: 'string', begin: '~?' + c + '.*?' + c
  };};

  var IDENT_MODE = function(name, begin, relevance) { return {
    className: name, begin: begin, relevance: relevance
  };};

  var PARENS_MODE = {
    // used only to properly balance nested parens inside mixin call, def. arg list
    begin: '\\(', end: '\\)', contains: VALUE, relevance: 0
  };

  // generic Less highlighter (used almost everywhere except selectors):
  VALUE.push(
    hljs.C_LINE_COMMENT_MODE,
    hljs.C_BLOCK_COMMENT_MODE,
    STRING_MODE("'"),
    STRING_MODE('"'),
    hljs.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(
    {
      begin: '(url|data-uri)\\(',
      starts: {className: 'string', end: '[\\)\\n]', excludeEnd: true}
    },
    IDENT_MODE('number', '#[0-9A-Fa-f]+\\b'),
    PARENS_MODE,
    IDENT_MODE('variable', '@@?' + IDENT_RE, 10),
    IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),
    IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string
    { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):
      className: 'attribute', begin: IDENT_RE + '\\s*:', end: ':', returnBegin: true, excludeEnd: true
    },
    {
      className: 'meta',
      begin: '!important'
    }
  );

  var VALUE_WITH_RULESETS = VALUE.concat({
    begin: '{', end: '}', contains: RULES
  });

  var MIXIN_GUARD_MODE = {
    beginKeywords: 'when', endsWithParent: true,
    contains: [{beginKeywords: 'and not'}].concat(VALUE) // using this form to override VALUE’s 'function' match
  };

  /* Rule-Level Modes */

  var RULE_MODE = {
    begin: INTERP_IDENT_RE + '\\s*:', returnBegin: true, end: '[;}]',
    relevance: 0,
    contains: [
      {
        className: 'attribute',
        begin: INTERP_IDENT_RE, end: ':', excludeEnd: true,
        starts: {
          endsWithParent: true, illegal: '[<=$]',
          relevance: 0,
          contains: VALUE
        }
      }
    ]
  };

  var AT_RULE_MODE = {
    className: 'keyword',
    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b',
    starts: {end: '[;{}]', returnEnd: true, contains: VALUE, relevance: 0}
  };

  // variable definitions and calls
  var VAR_RULE_MODE = {
    className: 'variable',
    variants: [
      // using more strict pattern for higher relevance to increase chances of Less detection.
      // this is *the only* Less specific statement used in most of the sources, so...
      // (we’ll still often loose to the css-parser unless there's '//' comment,
      // simply because 1 variable just can't beat 99 properties :)
      {begin: '@' + IDENT_RE + '\\s*:', relevance: 15},
      {begin: '@' + IDENT_RE}
    ],
    starts: {end: '[;}]', returnEnd: true, contains: VALUE_WITH_RULESETS}
  };

  var SELECTOR_MODE = {
    // first parse unambiguous selectors (i.e. those not starting with tag)
    // then fall into the scary lookahead-discriminator variant.
    // this mode also handles mixin definitions and calls
    variants: [{
      begin: '[\\.#:&\\[>]', end: '[;{}]'  // mixin calls end with ';'
      }, {
      begin: INTERP_IDENT_RE, end: '{'
    }],
    returnBegin: true,
    returnEnd:   true,
    illegal: '[<=\'$"]',
    relevance: 0,
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      MIXIN_GUARD_MODE,
      IDENT_MODE('keyword',  'all\\b'),
      IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),     // otherwise it’s identified as tag
      IDENT_MODE('selector-tag',  INTERP_IDENT_RE + '%?', 0), // '%' for more consistent coloring of @keyframes "tags"
      IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),
      IDENT_MODE('selector-class', '\\.' + INTERP_IDENT_RE, 0),
      IDENT_MODE('selector-tag',  '&', 0),
      {className: 'selector-attr', begin: '\\[', end: '\\]'},
      {className: 'selector-pseudo', begin: /:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/},
      {begin: '\\(', end: '\\)', contains: VALUE_WITH_RULESETS}, // argument list of parametric mixins
      {begin: '!important'} // eat !important after mixin call or it will be colored as tag
    ]
  };

  RULES.push(
    hljs.C_LINE_COMMENT_MODE,
    hljs.C_BLOCK_COMMENT_MODE,
    AT_RULE_MODE,
    VAR_RULE_MODE,
    RULE_MODE,
    SELECTOR_MODE
  );

  return {
    case_insensitive: true,
    illegal: '[=>\'/<($"]',
    contains: RULES
  };
};
},{}],177:[function(require,module,exports){
module.exports = function(hljs) {
  return {
    aliases: ['md', 'mkdown', 'mkd'],
    contains: [
      // highlight headers
      {
        className: 'section',
        variants: [
          { begin: '^#{1,6}', end: '$' },
          { begin: '^.+?\\n[=-]{2,}$' }
        ]
      },
      // inline html
      {
        begin: '<', end: '>',
        subLanguage: 'xml',
        relevance: 0
      },
      // lists (indicators only)
      {
        className: 'bullet',
        begin: '^([*+-]|(\\d+\\.))\\s+'
      },
      // strong segments
      {
        className: 'strong',
        begin: '[*_]{2}.+?[*_]{2}'
      },
      // emphasis segments
      {
        className: 'emphasis',
        variants: [
          { begin: '\\*.+?\\*' },
          { begin: '_.+?_'
          , relevance: 0
          }
        ]
      },
      // blockquotes
      {
        className: 'quote',
        begin: '^>\\s+', end: '$'
      },
      // code snippets
      {
        className: 'code',
        variants: [
          {
            begin: '^```\w*\s*$', end: '^```\s*$'
          },
          {
            begin: '`.+?`'
          },
          {
            begin: '^( {4}|\t)', end: '$',
            relevance: 0
          }
        ]
      },
      // horizontal rules
      {
        begin: '^[-\\*]{3,}', end: '$'
      },
      // using links - title and link
      {
        begin: '\\[.+?\\][\\(\\[].*?[\\)\\]]',
        returnBegin: true,
        contains: [
          {
            className: 'string',
            begin: '\\[', end: '\\]',
            excludeBegin: true,
            returnEnd: true,
            relevance: 0
          },
          {
            className: 'link',
            begin: '\\]\\(', end: '\\)',
            excludeBegin: true, excludeEnd: true
          },
          {
            className: 'symbol',
            begin: '\\]\\[', end: '\\]',
            excludeBegin: true, excludeEnd: true
          }
        ],
        relevance: 10
      },
      {
        begin: /^\[[^\n]+\]:/,
        returnBegin: true,
        contains: [
          {
            className: 'symbol',
            begin: /\[/, end: /\]/,
            excludeBegin: true, excludeEnd: true
          },
          {
            className: 'link',
            begin: /:\s*/, end: /$/,
            excludeBegin: true
          }
        ]
      }
    ]
  };
};
},{}],178:[function(require,module,exports){
module.exports = function(hljs) {
  var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
  var VARIABLE = {
    className: 'variable',
    begin: '(\\$' + IDENT_RE + ')\\b'
  };
  var HEXCOLOR = {
    className: 'number', begin: '#[0-9A-Fa-f]+'
  };
  var DEF_INTERNALS = {
    className: 'attribute',
    begin: '[A-Z\\_\\.\\-]+', end: ':',
    excludeEnd: true,
    illegal: '[^\\s]',
    starts: {
      endsWithParent: true, excludeEnd: true,
      contains: [
        HEXCOLOR,
        hljs.CSS_NUMBER_MODE,
        hljs.QUOTE_STRING_MODE,
        hljs.APOS_STRING_MODE,
        hljs.C_BLOCK_COMMENT_MODE,
        {
          className: 'meta', begin: '!important'
        }
      ]
    }
  };
  return {
    case_insensitive: true,
    illegal: '[=/|\']',
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      {
        className: 'selector-id', begin: '\\#[A-Za-z0-9_-]+',
        relevance: 0
      },
      {
        className: 'selector-class', begin: '\\.[A-Za-z0-9_-]+',
        relevance: 0
      },
      {
        className: 'selector-attr', begin: '\\[', end: '\\]',
        illegal: '$'
      },
      {
        className: 'selector-tag', // begin: IDENT_RE, end: '[,|\\s]'
        begin: '\\b(a|abbr|acronym|address|area|article|aside|audio|b|base|big|blockquote|body|br|button|canvas|caption|cite|code|col|colgroup|command|datalist|dd|del|details|dfn|div|dl|dt|em|embed|fieldset|figcaption|figure|footer|form|frame|frameset|(h[1-6])|head|header|hgroup|hr|html|i|iframe|img|input|ins|kbd|keygen|label|legend|li|link|map|mark|meta|meter|nav|noframes|noscript|object|ol|optgroup|option|output|p|param|pre|progress|q|rp|rt|ruby|samp|script|section|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|time|title|tr|tt|ul|var|video)\\b',
        relevance: 0
      },
      {
        begin: ':(visited|valid|root|right|required|read-write|read-only|out-range|optional|only-of-type|only-child|nth-of-type|nth-last-of-type|nth-last-child|nth-child|not|link|left|last-of-type|last-child|lang|invalid|indeterminate|in-range|hover|focus|first-of-type|first-line|first-letter|first-child|first|enabled|empty|disabled|default|checked|before|after|active)'
      },
      {
        begin: '::(after|before|choices|first-letter|first-line|repeat-index|repeat-item|selection|value)'
      },
      VARIABLE,
      {
        className: 'attribute',
        begin: '\\b(z-index|word-wrap|word-spacing|word-break|width|widows|white-space|visibility|vertical-align|unicode-bidi|transition-timing-function|transition-property|transition-duration|transition-delay|transition|transform-style|transform-origin|transform|top|text-underline-position|text-transform|text-shadow|text-rendering|text-overflow|text-indent|text-decoration-style|text-decoration-line|text-decoration-color|text-decoration|text-align-last|text-align|tab-size|table-layout|right|resize|quotes|position|pointer-events|perspective-origin|perspective|page-break-inside|page-break-before|page-break-after|padding-top|padding-right|padding-left|padding-bottom|padding|overflow-y|overflow-x|overflow-wrap|overflow|outline-width|outline-style|outline-offset|outline-color|outline|orphans|order|opacity|object-position|object-fit|normal|none|nav-up|nav-right|nav-left|nav-index|nav-down|min-width|min-height|max-width|max-height|mask|marks|margin-top|margin-right|margin-left|margin-bottom|margin|list-style-type|list-style-position|list-style-image|list-style|line-height|letter-spacing|left|justify-content|initial|inherit|ime-mode|image-orientation|image-resolution|image-rendering|icon|hyphens|height|font-weight|font-variant-ligatures|font-variant|font-style|font-stretch|font-size-adjust|font-size|font-language-override|font-kerning|font-feature-settings|font-family|font|float|flex-wrap|flex-shrink|flex-grow|flex-flow|flex-direction|flex-basis|flex|filter|empty-cells|display|direction|cursor|counter-reset|counter-increment|content|column-width|column-span|column-rule-width|column-rule-style|column-rule-color|column-rule|column-gap|column-fill|column-count|columns|color|clip-path|clip|clear|caption-side|break-inside|break-before|break-after|box-sizing|box-shadow|box-decoration-break|bottom|border-width|border-top-width|border-top-style|border-top-right-radius|border-top-left-radius|border-top-color|border-top|border-style|border-spacing|border-right-width|border-right-style|border-right-color|border-right|border-radius|border-left-width|border-left-style|border-left-color|border-left|border-image-width|border-image-source|border-image-slice|border-image-repeat|border-image-outset|border-image|border-color|border-collapse|border-bottom-width|border-bottom-style|border-bottom-right-radius|border-bottom-left-radius|border-bottom-color|border-bottom|border|background-size|background-repeat|background-position|background-origin|background-image|background-color|background-clip|background-attachment|background-blend-mode|background|backface-visibility|auto|animation-timing-function|animation-play-state|animation-name|animation-iteration-count|animation-fill-mode|animation-duration|animation-direction|animation-delay|animation|align-self|align-items|align-content)\\b',
        illegal: '[^\\s]'
      },
      {
        begin: '\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b'
      },
      {
        begin: ':', end: ';',
        contains: [
          VARIABLE,
          HEXCOLOR,
          hljs.CSS_NUMBER_MODE,
          hljs.QUOTE_STRING_MODE,
          hljs.APOS_STRING_MODE,
          {
            className: 'meta', begin: '!important'
          }
        ]
      },
      {
        begin: '@', end: '[{;]',
        keywords: 'mixin include extend for if else each while charset import debug media page content font-face namespace warn',
        contains: [
          VARIABLE,
          hljs.QUOTE_STRING_MODE,
          hljs.APOS_STRING_MODE,
          HEXCOLOR,
          hljs.CSS_NUMBER_MODE,
          {
            begin: '\\s[A-Za-z0-9_.-]+',
            relevance: 0
          }
        ]
      }
    ]
  };
};
},{}],179:[function(require,module,exports){
module.exports = function(hljs) {

  var VARIABLE = {
    className: 'variable',
    begin: '\\$' + hljs.IDENT_RE
  };

  var HEX_COLOR = {
    className: 'number',
    begin: '#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})'
  };

  var AT_KEYWORDS = [
    'charset',
    'css',
    'debug',
    'extend',
    'font-face',
    'for',
    'import',
    'include',
    'media',
    'mixin',
    'page',
    'warn',
    'while'
  ];

  var PSEUDO_SELECTORS = [
    'after',
    'before',
    'first-letter',
    'first-line',
    'active',
    'first-child',
    'focus',
    'hover',
    'lang',
    'link',
    'visited'
  ];

  var TAGS = [
    'a',
    'abbr',
    'address',
    'article',
    'aside',
    'audio',
    'b',
    'blockquote',
    'body',
    'button',
    'canvas',
    'caption',
    'cite',
    'code',
    'dd',
    'del',
    'details',
    'dfn',
    'div',
    'dl',
    'dt',
    'em',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'form',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'header',
    'hgroup',
    'html',
    'i',
    'iframe',
    'img',
    'input',
    'ins',
    'kbd',
    'label',
    'legend',
    'li',
    'mark',
    'menu',
    'nav',
    'object',
    'ol',
    'p',
    'q',
    'quote',
    'samp',
    'section',
    'span',
    'strong',
    'summary',
    'sup',
    'table',
    'tbody',
    'td',
    'textarea',
    'tfoot',
    'th',
    'thead',
    'time',
    'tr',
    'ul',
    'var',
    'video'
  ];

  var TAG_END = '[\\.\\s\\n\\[\\:,]';

  var ATTRIBUTES = [
    'align-content',
    'align-items',
    'align-self',
    'animation',
    'animation-delay',
    'animation-direction',
    'animation-duration',
    'animation-fill-mode',
    'animation-iteration-count',
    'animation-name',
    'animation-play-state',
    'animation-timing-function',
    'auto',
    'backface-visibility',
    'background',
    'background-attachment',
    'background-clip',
    'background-color',
    'background-image',
    'background-origin',
    'background-position',
    'background-repeat',
    'background-size',
    'border',
    'border-bottom',
    'border-bottom-color',
    'border-bottom-left-radius',
    'border-bottom-right-radius',
    'border-bottom-style',
    'border-bottom-width',
    'border-collapse',
    'border-color',
    'border-image',
    'border-image-outset',
    'border-image-repeat',
    'border-image-slice',
    'border-image-source',
    'border-image-width',
    'border-left',
    'border-left-color',
    'border-left-style',
    'border-left-width',
    'border-radius',
    'border-right',
    'border-right-color',
    'border-right-style',
    'border-right-width',
    'border-spacing',
    'border-style',
    'border-top',
    'border-top-color',
    'border-top-left-radius',
    'border-top-right-radius',
    'border-top-style',
    'border-top-width',
    'border-width',
    'bottom',
    'box-decoration-break',
    'box-shadow',
    'box-sizing',
    'break-after',
    'break-before',
    'break-inside',
    'caption-side',
    'clear',
    'clip',
    'clip-path',
    'color',
    'column-count',
    'column-fill',
    'column-gap',
    'column-rule',
    'column-rule-color',
    'column-rule-style',
    'column-rule-width',
    'column-span',
    'column-width',
    'columns',
    'content',
    'counter-increment',
    'counter-reset',
    'cursor',
    'direction',
    'display',
    'empty-cells',
    'filter',
    'flex',
    'flex-basis',
    'flex-direction',
    'flex-flow',
    'flex-grow',
    'flex-shrink',
    'flex-wrap',
    'float',
    'font',
    'font-family',
    'font-feature-settings',
    'font-kerning',
    'font-language-override',
    'font-size',
    'font-size-adjust',
    'font-stretch',
    'font-style',
    'font-variant',
    'font-variant-ligatures',
    'font-weight',
    'height',
    'hyphens',
    'icon',
    'image-orientation',
    'image-rendering',
    'image-resolution',
    'ime-mode',
    'inherit',
    'initial',
    'justify-content',
    'left',
    'letter-spacing',
    'line-height',
    'list-style',
    'list-style-image',
    'list-style-position',
    'list-style-type',
    'margin',
    'margin-bottom',
    'margin-left',
    'margin-right',
    'margin-top',
    'marks',
    'mask',
    'max-height',
    'max-width',
    'min-height',
    'min-width',
    'nav-down',
    'nav-index',
    'nav-left',
    'nav-right',
    'nav-up',
    'none',
    'normal',
    'object-fit',
    'object-position',
    'opacity',
    'order',
    'orphans',
    'outline',
    'outline-color',
    'outline-offset',
    'outline-style',
    'outline-width',
    'overflow',
    'overflow-wrap',
    'overflow-x',
    'overflow-y',
    'padding',
    'padding-bottom',
    'padding-left',
    'padding-right',
    'padding-top',
    'page-break-after',
    'page-break-before',
    'page-break-inside',
    'perspective',
    'perspective-origin',
    'pointer-events',
    'position',
    'quotes',
    'resize',
    'right',
    'tab-size',
    'table-layout',
    'text-align',
    'text-align-last',
    'text-decoration',
    'text-decoration-color',
    'text-decoration-line',
    'text-decoration-style',
    'text-indent',
    'text-overflow',
    'text-rendering',
    'text-shadow',
    'text-transform',
    'text-underline-position',
    'top',
    'transform',
    'transform-origin',
    'transform-style',
    'transition',
    'transition-delay',
    'transition-duration',
    'transition-property',
    'transition-timing-function',
    'unicode-bidi',
    'vertical-align',
    'visibility',
    'white-space',
    'widows',
    'width',
    'word-break',
    'word-spacing',
    'word-wrap',
    'z-index'
  ];

  // illegals
  var ILLEGAL = [
    '\\?',
    '(\\bReturn\\b)', // monkey
    '(\\bEnd\\b)', // monkey
    '(\\bend\\b)', // vbscript
    '(\\bdef\\b)', // gradle
    ';', // a whole lot of languages
    '#\\s', // markdown
    '\\*\\s', // markdown
    '===\\s', // markdown
    '\\|',
    '%', // prolog
  ];

  return {
    aliases: ['styl'],
    case_insensitive: false,
    keywords: 'if else for in',
    illegal: '(' + ILLEGAL.join('|') + ')',
    contains: [

      // strings
      hljs.QUOTE_STRING_MODE,
      hljs.APOS_STRING_MODE,

      // comments
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,

      // hex colors
      HEX_COLOR,

      // class tag
      {
        begin: '\\.[a-zA-Z][a-zA-Z0-9_-]*' + TAG_END,
        returnBegin: true,
        contains: [
          {className: 'selector-class', begin: '\\.[a-zA-Z][a-zA-Z0-9_-]*'}
        ]
      },

      // id tag
      {
        begin: '\\#[a-zA-Z][a-zA-Z0-9_-]*' + TAG_END,
        returnBegin: true,
        contains: [
          {className: 'selector-id', begin: '\\#[a-zA-Z][a-zA-Z0-9_-]*'}
        ]
      },

      // tags
      {
        begin: '\\b(' + TAGS.join('|') + ')' + TAG_END,
        returnBegin: true,
        contains: [
          {className: 'selector-tag', begin: '\\b[a-zA-Z][a-zA-Z0-9_-]*'}
        ]
      },

      // psuedo selectors
      {
        begin: '&?:?:\\b(' + PSEUDO_SELECTORS.join('|') + ')' + TAG_END
      },

      // @ keywords
      {
        begin: '\@(' + AT_KEYWORDS.join('|') + ')\\b'
      },

      // variables
      VARIABLE,

      // dimension
      hljs.CSS_NUMBER_MODE,

      // number
      hljs.NUMBER_MODE,

      // functions
      //  - only from beginning of line + whitespace
      {
        className: 'function',
        begin: '^[a-zA-Z][a-zA-Z0-9_\-]*\\(.*\\)',
        illegal: '[\\n]',
        returnBegin: true,
        contains: [
          {className: 'title', begin: '\\b[a-zA-Z][a-zA-Z0-9_\-]*'},
          {
            className: 'params',
            begin: /\(/,
            end: /\)/,
            contains: [
              HEX_COLOR,
              VARIABLE,
              hljs.APOS_STRING_MODE,
              hljs.CSS_NUMBER_MODE,
              hljs.NUMBER_MODE,
              hljs.QUOTE_STRING_MODE
            ]
          }
        ]
      },

      // attributes
      //  - only from beginning of line + whitespace
      //  - must have whitespace after it
      {
        className: 'attribute',
        begin: '\\b(' + ATTRIBUTES.reverse().join('|') + ')\\b',
        starts: {
          // value container
          end: /;|$/,
          contains: [
            HEX_COLOR,
            VARIABLE,
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE,
            hljs.CSS_NUMBER_MODE,
            hljs.NUMBER_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ],
          illegal: /\./,
          relevance: 0
        }
      }
    ]
  };
};
},{}],180:[function(require,module,exports){
module.exports = function(hljs) {
  var KEYWORDS = {
    keyword:
      'in if for while finally var new function do return void else break catch ' +
      'instanceof with throw case default try this switch continue typeof delete ' +
      'let yield const class public private protected get set super ' +
      'static implements enum export import declare type namespace abstract',
    literal:
      'true false null undefined NaN Infinity',
    built_in:
      'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent ' +
      'encodeURI encodeURIComponent escape unescape Object Function Boolean Error ' +
      'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError ' +
      'TypeError URIError Number Math Date String RegExp Array Float32Array ' +
      'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array ' +
      'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require ' +
      'module console window document any number boolean string void'
  };

  return {
    aliases: ['ts'],
    keywords: KEYWORDS,
    contains: [
      {
        className: 'meta',
        begin: /^\s*['"]use strict['"]/
      },
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      { // template string
        className: 'string',
        begin: '`', end: '`',
        contains: [
          hljs.BACKSLASH_ESCAPE,
          {
            className: 'subst',
            begin: '\\$\\{', end: '\\}'
          }
        ]
      },
      hljs.C_LINE_COMMENT_MODE,
      hljs.C_BLOCK_COMMENT_MODE,
      {
        className: 'number',
        variants: [
          { begin: '\\b(0[bB][01]+)' },
          { begin: '\\b(0[oO][0-7]+)' },
          { begin: hljs.C_NUMBER_RE }
        ],
        relevance: 0
      },
      { // "value" container
        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
        keywords: 'return throw case',
        contains: [
          hljs.C_LINE_COMMENT_MODE,
          hljs.C_BLOCK_COMMENT_MODE,
          hljs.REGEXP_MODE
        ],
        relevance: 0
      },
      {
        className: 'function',
        begin: 'function', end: /[\{;]/, excludeEnd: true,
        keywords: KEYWORDS,
        contains: [
          'self',
          hljs.inherit(hljs.TITLE_MODE, {begin: /[A-Za-z$_][0-9A-Za-z$_]*/}),
          {
            className: 'params',
            begin: /\(/, end: /\)/,
            excludeBegin: true,
            excludeEnd: true,
            keywords: KEYWORDS,
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ],
            illegal: /["'\(]/
          }
        ],
        illegal: /%/,
        relevance: 0 // () => {} is more typical in TypeScript
      },
      {
        beginKeywords: 'constructor', end: /\{/, excludeEnd: true
      },
      { // prevent references like module.id from being higlighted as module definitions
        begin: /module\./,
        keywords: {built_in: 'module'},
        relevance: 0
      },
      {
        beginKeywords: 'module', end: /\{/, excludeEnd: true
      },
      {
        beginKeywords: 'interface', end: /\{/, excludeEnd: true,
        keywords: 'interface extends'
      },
      {
        begin: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
      },
      {
        begin: '\\.' + hljs.IDENT_RE, relevance: 0 // hack: prevents detection of keywords after dots
      }
    ]
  };
};
},{}],181:[function(require,module,exports){
module.exports = function(hljs) {
  var XML_IDENT_RE = '[A-Za-z0-9\\._:-]+';
  var TAG_INTERNALS = {
    endsWithParent: true,
    illegal: /</,
    relevance: 0,
    contains: [
      {
        className: 'attr',
        begin: XML_IDENT_RE,
        relevance: 0
      },
      {
        begin: /=\s*/,
        relevance: 0,
        contains: [
          {
            className: 'string',
            endsParent: true,
            variants: [
              {begin: /"/, end: /"/},
              {begin: /'/, end: /'/},
              {begin: /[^\s"'=<>`]+/}
            ]
          }
        ]
      }
    ]
  };
  return {
    aliases: ['html', 'xhtml', 'rss', 'atom', 'xjb', 'xsd', 'xsl', 'plist'],
    case_insensitive: true,
    contains: [
      {
        className: 'meta',
        begin: '<!DOCTYPE', end: '>',
        relevance: 10,
        contains: [{begin: '\\[', end: '\\]'}]
      },
      hljs.COMMENT(
        '<!--',
        '-->',
        {
          relevance: 10
        }
      ),
      {
        begin: '<\\!\\[CDATA\\[', end: '\\]\\]>',
        relevance: 10
      },
      {
        begin: /<\?(php)?/, end: /\?>/,
        subLanguage: 'php',
        contains: [{begin: '/\\*', end: '\\*/', skip: true}]
      },
      {
        className: 'tag',
        /*
        The lookahead pattern (?=...) ensures that 'begin' only matches
        '<style' as a single word, followed by a whitespace or an
        ending braket. The '$' is needed for the lexeme to be recognized
        by hljs.subMode() that tests lexemes outside the stream.
        */
        begin: '<style(?=\\s|>|$)', end: '>',
        keywords: {name: 'style'},
        contains: [TAG_INTERNALS],
        starts: {
          end: '</style>', returnEnd: true,
          subLanguage: ['css', 'xml']
        }
      },
      {
        className: 'tag',
        // See the comment in the <style tag about the lookahead pattern
        begin: '<script(?=\\s|>|$)', end: '>',
        keywords: {name: 'script'},
        contains: [TAG_INTERNALS],
        starts: {
          end: '\<\/script\>', returnEnd: true,
          subLanguage: ['actionscript', 'javascript', 'handlebars', 'xml']
        }
      },
      {
        className: 'meta',
        variants: [
          {begin: /<\?xml/, end: /\?>/, relevance: 10},
          {begin: /<\?\w+/, end: /\?>/}
        ]
      },
      {
        className: 'tag',
        begin: '</?', end: '/?>',
        contains: [
          {
            className: 'name', begin: /[^\/><\s]+/, relevance: 0
          },
          TAG_INTERNALS
        ]
      }
    ]
  };
};
},{}],182:[function(require,module,exports){
(function (global){
'use strict';

/*global window, global*/

var root = typeof window !== 'undefined' ?
    window : typeof global !== 'undefined' ?
    global : {};

module.exports = Individual;

function Individual(key, value) {
    if (key in root) {
        return root[key];
    }

    root[key] = value;

    return value;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],183:[function(require,module,exports){
'use strict';

var Individual = require('./index.js');

module.exports = OneVersion;

function OneVersion(moduleName, version, defaultValue) {
    var key = '__INDIVIDUAL_ONE_VERSION_' + moduleName;
    var enforceKey = key + '_ENFORCE_SINGLETON';

    var versionValue = Individual(enforceKey, version);

    if (versionValue !== version) {
        throw new Error('Can only have one copy of ' +
            moduleName + '.\n' +
            'You already have version ' + versionValue +
            ' installed.\n' +
            'This means you cannot install version ' + version);
    }

    return Individual(key, defaultValue);
}

},{"./index.js":182}],184:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],185:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module is-alphabetical
 * @fileoverview Check if a character is alphabetical.
 */

'use strict';

/* eslint-env commonjs */

/* Expose. */
module.exports = alphabetical;

/**
 * Check whether the given character code, or the character
 * code at the first character, is alphabetical.
 *
 * @param {string|number} character
 * @return {boolean} - Whether `character` is alphabetical.
 */
function alphabetical(character) {
  var code = typeof character === 'string' ?
    character.charCodeAt(0) : character;

  return (code >= 97 && code <= 122) || /* a-z */
    (code >= 65 && code <= 90); /* A-Z */
}

},{}],186:[function(require,module,exports){
'use strict';
module.exports = function (str) {
	if (typeof str !== 'string') {
		throw new TypeError('Expected a string');
	}

	return !/[^0-9a-z\xDF-\xFF]/.test(str.toLowerCase());
};

},{}],187:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module is-alphanumerical
 * @fileoverview Check if a character is alphanumerical.
 */

'use strict';

/* eslint-env commonjs */

/* Dependencies. */
var alphabetical = require('is-alphabetical');
var decimal = require('is-decimal');

/* Expose. */
module.exports = alphanumerical;

/**
 * Check whether the given character code, or the character
 * code at the first character, is alphanumerical.
 *
 * @param {string|number} character
 * @return {boolean} - Whether `character` is alphanumerical.
 */
function alphanumerical(character) {
  return alphabetical(character) || decimal(character);
}

},{"is-alphabetical":185,"is-decimal":189}],188:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],189:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module is-decimal
 * @fileoverview Check if a character is decimal.
 */

'use strict';

/* eslint-env commonjs */

/* Expose. */
module.exports = decimal;

/**
 * Check whether the given character code, or the character
 * code at the first character, is decimal.
 *
 * @param {string|number} character
 * @return {boolean} - Whether `character` is decimal.
 */
function decimal(character) {
  var code = typeof character === 'string' ?
    character.charCodeAt(0) : character;

  return code >= 48 && code <= 57; /* 0-9 */
}

},{}],190:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module is-hexadecimal
 * @fileoverview Check if a character is hexadecimal.
 */

'use strict';

/* eslint-env commonjs */

/* Expose. */
module.exports = hexadecimal;

/**
 * Check whether the given character code, or the character
 * code at the first character, is hexadecimal.
 *
 * @param {string|number} character
 * @return {boolean} - Whether `character` is hexadecimal.
 */
function hexadecimal(character) {
  var code = typeof character === 'string' ?
    character.charCodeAt(0) : character;

  return (code >= 97 /* a */ && code <= 102 /* z */) ||
    (code >= 65 /* A */ && code <= 70 /* Z */) ||
    (code >= 48 /* A */ && code <= 57 /* Z */);
}

},{}],191:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module is-whitespace-character
 * @fileoverview Check if a character is a whitespace character.
 */

'use strict';

/* eslint-env commonjs */

/* Expose. */
module.exports = whitespace;

/* Methods. */
var fromCode = String.fromCharCode;

/* Constants. */
var re = /\s/;

/**
 * Check whether the given character code, or the character
 * code at the first character, is a whitespace character.
 *
 * @param {string|number} character
 * @return {boolean} - Whether `character` is a whitespaces character.
 */
function whitespace(character) {
  return re.test(
    typeof character === 'number' ? fromCode(character) : character.charAt(0)
  );
}

},{}],192:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module is-word-character
 * @fileoverview Check if a character is a word character.
 */

'use strict';

/* eslint-env commonjs */

/* Expose. */
module.exports = wordCharacter;

/* Methods. */
var fromCode = String.fromCharCode;

/* Constants. */
var re = /\w/;

/**
 * Check whether the given character code, or the character
 * code at the first character, is a word character.
 *
 * @param {string|number} character
 * @return {boolean} - Whether `character` is a word character.
 */
function wordCharacter(character) {
  return re.test(
    typeof character === 'number' ? fromCode(character) : character.charAt(0)
  );
}

},{}],193:[function(require,module,exports){
'use strict';
var KEBAB_REGEX = /[A-Z\u00C0-\u00D6\u00D8-\u00DE]/g;
var REVERSE_REGEX = /-[a-z\u00E0-\u00F6\u00F8-\u00FE]/g;

module.exports = exports = function kebabCase(str) {
	return str.replace(KEBAB_REGEX, function (match) {
		return '-' + match.toLowerCase();
	});
};

exports.reverse = function (str) {
	return str.replace(REVERSE_REGEX, function (match) {
		return match.slice(1).toUpperCase();
	});
};

},{}],194:[function(require,module,exports){
'use strict';

/**
 * Get the count of the longest repeating streak of
 * `character` in `value`.
 *
 * @example
 *   longestStreak('` foo `` bar `', '`') // 2
 *
 * @param {string} value - Content, coerced to string.
 * @param {string} character - Single character to look
 *   for.
 * @return {number} - Number of characters at the place
 *   where `character` occurs in its longest streak in
 *   `value`.
 * @throws {Error} - when `character` is not a single
 *   character.
 */
function longestStreak(value, character) {
    var count = 0;
    var maximum = 0;
    var index = -1;
    var length;

    value = String(value);
    length = value.length;

    if (typeof character !== 'string' || character.length !== 1) {
        throw new Error('Expected character');
    }

    while (++index < length) {
        if (value.charAt(index) === character) {
            count++;

            if (count > maximum) {
                maximum = count;
            }
        } else {
            count = 0;
        }
    }

    return maximum;
}

/*
 * Expose.
 */

module.exports = longestStreak;

},{}],195:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module lowlight:lowlight
 * @fileoverview Virtual syntax highlighting for virtual
 *   DOMs and non-HTML things.
 */

'use strict';

/* Dependencies. */
var high = require('highlight.js/lib/highlight.js');

/* The lowlight interface, which has to be compatible
 * with highlight.js, as this object is passed to
 * highlight.js syntaxes. */

/** High constructor. */
function High() {}

High.prototype = high;

/* Expose. */
var low = new High(); // Ha!

module.exports = low;

low.highlight = highlight;
low.highlightAuto = autoHighlight;
low.registerLanguage = registerLanguage;
low.getLanguage = getLanguage;

/* Methods. */
var inherit = high.inherit;

/* Constants. */
var DEFAULT_PREFIX = 'hljs-';
var KEY_INSENSITIVE = 'case_insensitive';
var EMPTY = '';

/* Constant characters. */
var C_SPACE = ' ';
var C_PIPE = '|';

/* Constant types. */
var T_ELEMENT = 'element';
var T_TEXT = 'text';
var T_SPAN = 'span';

/* Maps of syntaxes. */
var languageNames = [];
var languages = {};
var aliases = {};

/* Methods. */
var own = {}.hasOwnProperty;

/**
 * Highlighting with language detection.  Accepts a string
 * with the code to highlight.  Returns an object with the
 * following properties:
 *
 * - language (detected language)
 * - relevance (int)
 * - value (an HTML string with highlighting markup)
 * - secondBest (object with the same structure for
 *   second-best heuristically detected language, may
 *   be absent).
 *
 * @param {string} value - Source to highlight.
 * @param {Object?} [options={}] - Configuration.
 * @param {string} [options.prefix='hljs-'] - Highlight
 *   prefix.
 * @param {Array.<string>} [options.subset] - List of
 *   allowed languages.
 * @return {Object} - Highlighted `value`.
 */
function autoHighlight(value, options) {
  var settings = options || {};
  var prefix = settings.prefix;
  var subset = settings.subset || languageNames;
  var length = subset.length;
  var index = -1;
  var result;
  var secondBest;
  var current;
  var name;

  if (prefix === null || prefix === undefined) {
    prefix = DEFAULT_PREFIX;
  }

  if (typeof value !== 'string') {
    throw new Error('Expected `string` for value, got `' + value + '`');
  }

  secondBest = normalize({});
  result = normalize({});

  while (++index < length) {
    name = subset[index];

    if (!getLanguage(name)) {
      continue;
    }

    current = normalize(coreHighlight(name, value, false, prefix));

    current.language = name;

    if (current.relevance > secondBest.relevance) {
      secondBest = current;
    }

    if (current.relevance > result.relevance) {
      secondBest = result;
      result = current;
    }
  }

  if (secondBest.language) {
    result.secondBest = secondBest;
  }

  return result;
}

/**
 * Highlighting `value` in the language `language`.
 *
 * @param {string} language - Language name.
 * @param {string} value - Source to highlight.
 * @param {Object?} [options={}] - Configuration.
 * @param {string} [options.prefix='hljs-'] - Highlight
 *   prefix.
 * @return {Object} - Highlighted `value`.
*/
function highlight(language, value, options) {
  var settings = options || {};
  var prefix = settings.prefix;

  if (prefix === null || prefix === undefined) {
    prefix = DEFAULT_PREFIX;
  }

  return normalize(coreHighlight(language, value, true, prefix));
}

/**
 * Register a language.
 *
 * @param {string} name - Name of language.
 * @param {Function} syntax - Syntax constructor.
 */
function registerLanguage(name, syntax) {
  var lang = languages[name] = syntax(low);
  var values = lang.aliases;
  var length = values && values.length;
  var index = -1;

  languageNames.push(name);

  while (++index < length) {
    aliases[values[index]] = name;
  }
}

/**
 * Core highlighting function.  Accepts a language name, or
 * an alias, and a string with the code to highlight.
 * Returns an object with the following properties:
 *
 * @param {string} name - Language name.
 * @param {string} value - Source to highlight.
 * @param {boolean} [ignore=false] - Whether to ignore
 *   illegals.
 * @param {string?} [prefix] - Highlight prefix.
 * @param {boolean} [continuation] - Whether to continue
 *   processing with `continuation`.
 * @return {Object} - Highlighted `value`.
*/
function coreHighlight(name, value, ignore, prefix, continuation) {
  var continuations = {};
  var stack = [];
  var modeBuffer = EMPTY;
  var relevance = 0;
  var language;
  var top;
  var current;
  var currentChildren;
  var offset;
  var count;
  var match;
  var children;

  if (typeof name !== 'string') {
    throw new Error('Expected `string` for name, got `' + name + '`');
  }

  if (typeof value !== 'string') {
    throw new Error('Expected `string` for value, got `' + value + '`');
  }

  language = getLanguage(name);
  current = top = continuation || language;
  currentChildren = children = [];

  if (!language) {
    throw new Error('Unknown language: `' + name + '` is not registered');
  }

  compileLanguage(language);

  try {
    offset = top.terminators.lastIndex = 0;
    match = top.terminators.exec(value);

    while (match) {
      count = processLexeme(
        value.substr(offset, match.index - offset),
        match[0]
      );

      offset = top.terminators.lastIndex = match.index + count;
      match = top.terminators.exec(value);
    }

    processLexeme(value.substr(offset));
    current = top;

    while (current.parent) {
      if (current.className) {
        pop();
      }

      current = current.parent;
    }

    return {
      relevance: relevance,
      value: currentChildren,
      language: name,
      top: top
    };
  } catch (err) {
    /* istanbul ignore if - Catch-all  */
    if (err.message.indexOf('Illegal') === -1) {
      throw err;
    }

    return {relevance: 0, value: addText(value, [])};
  }

  /* Process a lexeme.  Returns next position. */
  function processLexeme(buffer, lexeme) {
    var newMode;
    var endMode;
    var origin;

    modeBuffer += buffer;

    if (lexeme === undefined) {
      addSiblings(processBuffer(), currentChildren);

      return 0;
    }

    newMode = subMode(lexeme, top);

    if (newMode) {
      addSiblings(processBuffer(), currentChildren);

      startNewMode(newMode, lexeme);

      return newMode.returnBegin ? 0 : lexeme.length;
    }

    endMode = endOfMode(top, lexeme);

    if (endMode) {
      origin = top;

      if (!(origin.returnEnd || origin.excludeEnd)) {
        modeBuffer += lexeme;
      }

      addSiblings(processBuffer(), currentChildren);

      /* Close open modes. */
      do {
        if (top.className) {
          pop();
        }

        relevance += top.relevance;
        top = top.parent;
      } while (top !== endMode.parent);

      if (origin.excludeEnd) {
        addText(lexeme, currentChildren);
      }

      modeBuffer = EMPTY;

      if (endMode.starts) {
        startNewMode(endMode.starts, EMPTY);
      }

      return origin.returnEnd ? 0 : lexeme.length;
    }

    if (isIllegal(lexeme, top)) {
      throw new Error(
        'Illegal lexeme "' + lexeme + '" for mode "' +
        (top.className || '<unnamed>') + '"'
      );
    }

    /* Parser should not reach this point as all
     * types of lexemes should be caught earlier,
     * but if it does due to some bug make sure it
     * advances at least one character forward to
     * prevent infinite looping. */
    modeBuffer += lexeme;

    return lexeme.length || /* istanbul ignore next */ 1;
  }

  /* Start a new mode with a `lexeme` to process. */
  function startNewMode(mode, lexeme) {
    var node;

    if (mode.className) {
      node = build(mode.className, []);
    }

    if (mode.returnBegin) {
      modeBuffer = EMPTY;
    } else if (mode.excludeBegin) {
      addText(lexeme, currentChildren);

      modeBuffer = EMPTY;
    } else {
      modeBuffer = lexeme;
    }

    /* Enter a new mode. */
    if (node) {
      currentChildren.push(node);
      stack.push(currentChildren);
      currentChildren = node.children;
    }

    top = Object.create(mode, {parent: {value: top}});
  }

  /* Process the buffer. */
  function processBuffer() {
    var result = top.subLanguage === undefined ? processKeywords() : processSubLanguage();
    modeBuffer = EMPTY;
    return result;
  }

  /* Process a sublanguage (returns a list of nodes). */
  function processSubLanguage() {
    var explicit = typeof top.subLanguage === 'string';
    var subvalue;

    /* istanbul ignore if - support non-loaded sublanguages */
    if (explicit && !languages[top.subLanguage]) {
      return addText(modeBuffer, []);
    }

    if (explicit) {
      subvalue = coreHighlight(
        top.subLanguage,
        modeBuffer,
        true,
        prefix,
        continuations[top.subLanguage]
      );
    } else {
      subvalue = autoHighlight(modeBuffer, {
        subset: top.subLanguage.length ? top.subLanguage : undefined,
        prefix: prefix
      });
    }

    /* Counting embedded language score towards the
     * host language may be disabled with zeroing the
     * containing mode relevance.  Usecase in point is
     * Markdown that allows XML everywhere and makes
     * every XML snippet to have a much larger Markdown
     * score. */
    if (top.relevance > 0) {
      relevance += subvalue.relevance;
    }

    if (explicit) {
      continuations[top.subLanguage] = subvalue.top;
    }

    return [build(subvalue.language, subvalue.value, true)];
  }

  /* Process keywords. Returns nodes. */
  function processKeywords() {
    var nodes = [];
    var lastIndex;
    var keyword;
    var node;
    var submatch;

    if (!top.keywords) {
      return addText(modeBuffer, nodes);
    }

    lastIndex = 0;

    top.lexemesRe.lastIndex = 0;

    keyword = top.lexemesRe.exec(modeBuffer);

    while (keyword) {
      addText(modeBuffer.substr(lastIndex, keyword.index - lastIndex), nodes);

      submatch = keywordMatch(top, keyword);

      if (submatch) {
        relevance += submatch[1];

        node = build(submatch[0], []);

        nodes.push(node);

        addText(keyword[0], node.children);
      } else {
        addText(keyword[0], nodes);
      }

      lastIndex = top.lexemesRe.lastIndex;
      keyword = top.lexemesRe.exec(modeBuffer);
    }

    addText(modeBuffer.substr(lastIndex), nodes);

    return nodes;
  }

  /* Add siblings. */
  function addSiblings(siblings, nodes) {
    var length = siblings.length;
    var index = -1;
    var sibling;

    while (++index < length) {
      sibling = siblings[index];

      if (sibling.type === T_TEXT) {
        addText(sibling.value, nodes);
      } else {
        nodes.push(sibling);
      }
    }
  }

  /* Add a text. */
  function addText(value, nodes) {
    var tail;

    if (value) {
      tail = nodes[nodes.length - 1];

      if (tail && tail.type === T_TEXT) {
        tail.value += value;
      } else {
        nodes.push(buildText(value));
      }
    }

    return nodes;
  }

  /* Build a text. */
  function buildText(value) {
    return {type: T_TEXT, value: value};
  }

  /* Build a span. */
  function build(name, contents, noPrefix) {
    return {
      type: T_ELEMENT,
      tagName: T_SPAN,
      properties: {
        className: [(noPrefix ? EMPTY : prefix) + name]
      },
      children: contents
    };
  }

  /* Check if the first word in `keywords` is a keyword. */
  function keywordMatch(mode, keywords) {
    var keyword = keywords[0];

    if (language[KEY_INSENSITIVE]) {
      keyword = keyword.toLowerCase();
    }

    return own.call(mode.keywords, keyword) && mode.keywords[keyword];
  }

  /* Check if `lexeme` is illegal according to `mode`. */
  function isIllegal(lexeme, mode) {
    return !ignore && test(mode.illegalRe, lexeme);
  }

  /* Check if `lexeme` ends `mode`. */
  function endOfMode(mode, lexeme) {
    if (test(mode.endRe, lexeme)) {
      while (mode.endsParent && mode.parent) {
        mode = mode.parent;
      }
      return mode;
    }

    if (mode.endsWithParent) {
      return endOfMode(mode.parent, lexeme);
    }
  }

  /* Check a sub-mode. */
  function subMode(lexeme, mode) {
    var values = mode.contains;
    var length = values.length;
    var index = -1;

    while (++index < length) {
      if (test(values[index].beginRe, lexeme)) {
        return values[index];
      }
    }
  }

  /* Exit the current context. */
  function pop() {
    /* istanbul ignore next - removed in hljs 9.3 */
    currentChildren = stack.pop() || children;
  }
}

/* Compile a language. */
function compileLanguage(language) {
  compileMode(language);
  return;

  /* Compile a language mode, optionally with a parent. */
  function compileMode(mode, parent) {
    var compiledKeywords = {};
    var expandedContains = [];
    var terminators;

    if (mode.compiled) {
      return;
    }

    mode.compiled = true;

    mode.keywords = mode.keywords || mode.beginKeywords;

    if (mode.keywords) {
      if (typeof mode.keywords === 'string') {
        flatten('keyword', mode.keywords);
      } else {
        Object.keys(mode.keywords).forEach(function (className) {
          flatten(className, mode.keywords[className]);
        });
      }

      mode.keywords = compiledKeywords;
    }

    mode.lexemesRe = langRe(mode.lexemes || /\w+/, true);

    if (parent) {
      if (mode.beginKeywords) {
        mode.begin = '\\b(' + mode.beginKeywords.split(C_SPACE).join(C_PIPE) + ')\\b';
      }

      if (!mode.begin) {
        mode.begin = /\B|\b/;
      }

      mode.beginRe = langRe(mode.begin);

      if (!mode.end && !mode.endsWithParent) {
        mode.end = /\B|\b/;
      }

      if (mode.end) {
        mode.endRe = langRe(mode.end);
      }

      mode.terminatorEnd = source(mode.end) || EMPTY;

      if (mode.endsWithParent && parent.terminatorEnd) {
        mode.terminatorEnd += (mode.end ? C_PIPE : EMPTY) + parent.terminatorEnd;
      }
    }

    if (mode.illegal) {
      mode.illegalRe = langRe(mode.illegal);
    }

    if (mode.relevance === undefined) {
      mode.relevance = 1;
    }

    if (!mode.contains) {
      mode.contains = [];
    }

    mode.contains.forEach(function (c) {
      if (c.variants) {
        c.variants.forEach(function (v) {
          expandedContains.push(inherit(c, v));
        });
      } else {
        expandedContains.push(c === 'self' ? mode : c);
      }
    });

    mode.contains = expandedContains;

    mode.contains.forEach(function (c) {
      compileMode(c, mode);
    });

    if (mode.starts) {
      compileMode(mode.starts, parent);
    }

    terminators =
      mode.contains.map(function (c) {
        return c.beginKeywords ? '\\.?(' + c.begin + ')\\.?' : c.begin;
      })
      .concat([mode.terminatorEnd, mode.illegal])
      .map(source)
      .filter(Boolean);

    mode.terminators = terminators.length ?
      langRe(terminators.join(C_PIPE), true) :
      {exec: execNoop};

    return;

    /* Flatten a classname. */
    function flatten(className, value) {
      var pairs;
      var pair;
      var index;
      var length;

      if (language[KEY_INSENSITIVE]) {
        value = value.toLowerCase();
      }

      pairs = value.split(C_SPACE);
      length = pairs.length;
      index = -1;

      while (++index < length) {
        pair = pairs[index].split(C_PIPE);

        compiledKeywords[pair[0]] = [
          className,
          pair[1] ? Number(pair[1]) : 1
        ];
      }
    }
  }

  /* Create a regex for `value`. */
  function langRe(value, global) {
    return new RegExp(
      source(value),
      'm' + (language[KEY_INSENSITIVE] ? 'i' : '') +
      (global ? 'g' : '')
    );
  }

  /* Get the source of an expression or string. */
  function source(re) {
    return (re && re.source) || re;
  }
}

/* Normalize a syntax result. */
function normalize(result) {
  return {
    relevance: result.relevance || 0,
    language: result.language || null,
    value: result.value || []
  };
}

/* Check if `expression` matches `lexeme`. */
function test(expression, lexeme) {
  var match = expression && expression.exec(lexeme);
  return match && match.index === 0;
}

/* No-op exec. */
function execNoop() {
  return null;
}

/* Get a language by `name`. */
function getLanguage(name) {
  name = name.toLowerCase();

  return languages[name] || languages[aliases[name]];
}

},{"highlight.js/lib/highlight.js":196}],196:[function(require,module,exports){
/*
Syntax highlighting with language autodetection.
https://highlightjs.org/
*/

(function(factory) {

  // Find the global object for export to both the browser and web workers.
  var globalObject = typeof window === 'object' && window ||
                     typeof self === 'object' && self;

  // Setup highlight.js for different environments. First is Node.js or
  // CommonJS.
  if(typeof exports !== 'undefined') {
    factory(exports);
  } else if(globalObject) {
    // Export hljs globally even when using AMD for cases when this script
    // is loaded with others that may still expect a global hljs.
    globalObject.hljs = factory({});

    // Finally register the global hljs with AMD.
    if(typeof define === 'function' && define.amd) {
      define([], function() {
        return globalObject.hljs;
      });
    }
  }

}(function(hljs) {
  // Convenience variables for build-in objects
  var ArrayProto = [],
      objectKeys = Object.keys;

  // Global internal variables used within the highlight.js library.
  var languages = {},
      aliases   = {};

  // Regular expressions used throughout the highlight.js library.
  var noHighlightRe    = /^(no-?highlight|plain|text)$/i,
      languagePrefixRe = /\blang(?:uage)?-([\w-]+)\b/i,
      fixMarkupRe      = /((^(<[^>]+>|\t|)+|(?:\n)))/gm;

  var spanEndTag = '</span>';

  // Global options used when within external APIs. This is modified when
  // calling the `hljs.configure` function.
  var options = {
    classPrefix: 'hljs-',
    tabReplace: null,
    useBR: false,
    languages: undefined
  };

  // Object map that is used to escape some common HTML characters.
  var escapeRegexMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;'
  };

  /* Utility functions */

  function escape(value) {
    return value.replace(/[&<>]/gm, function(character) {
      return escapeRegexMap[character];
    });
  }

  function tag(node) {
    return node.nodeName.toLowerCase();
  }

  function testRe(re, lexeme) {
    var match = re && re.exec(lexeme);
    return match && match.index === 0;
  }

  function isNotHighlighted(language) {
    return noHighlightRe.test(language);
  }

  function blockLanguage(block) {
    var i, match, length, _class;
    var classes = block.className + ' ';

    classes += block.parentNode ? block.parentNode.className : '';

    // language-* takes precedence over non-prefixed class names.
    match = languagePrefixRe.exec(classes);
    if (match) {
      return getLanguage(match[1]) ? match[1] : 'no-highlight';
    }

    classes = classes.split(/\s+/);

    for (i = 0, length = classes.length; i < length; i++) {
      _class = classes[i]

      if (isNotHighlighted(_class) || getLanguage(_class)) {
        return _class;
      }
    }
  }

  function inherit(parent, obj) {
    var key;
    var result = {};

    for (key in parent)
      result[key] = parent[key];
    if (obj)
      for (key in obj)
        result[key] = obj[key];
    return result;
  }

  /* Stream merging */

  function nodeStream(node) {
    var result = [];
    (function _nodeStream(node, offset) {
      for (var child = node.firstChild; child; child = child.nextSibling) {
        if (child.nodeType === 3)
          offset += child.nodeValue.length;
        else if (child.nodeType === 1) {
          result.push({
            event: 'start',
            offset: offset,
            node: child
          });
          offset = _nodeStream(child, offset);
          // Prevent void elements from having an end tag that would actually
          // double them in the output. There are more void elements in HTML
          // but we list only those realistically expected in code display.
          if (!tag(child).match(/br|hr|img|input/)) {
            result.push({
              event: 'stop',
              offset: offset,
              node: child
            });
          }
        }
      }
      return offset;
    })(node, 0);
    return result;
  }

  function mergeStreams(original, highlighted, value) {
    var processed = 0;
    var result = '';
    var nodeStack = [];

    function selectStream() {
      if (!original.length || !highlighted.length) {
        return original.length ? original : highlighted;
      }
      if (original[0].offset !== highlighted[0].offset) {
        return (original[0].offset < highlighted[0].offset) ? original : highlighted;
      }

      /*
      To avoid starting the stream just before it should stop the order is
      ensured that original always starts first and closes last:

      if (event1 == 'start' && event2 == 'start')
        return original;
      if (event1 == 'start' && event2 == 'stop')
        return highlighted;
      if (event1 == 'stop' && event2 == 'start')
        return original;
      if (event1 == 'stop' && event2 == 'stop')
        return highlighted;

      ... which is collapsed to:
      */
      return highlighted[0].event === 'start' ? original : highlighted;
    }

    function open(node) {
      function attr_str(a) {return ' ' + a.nodeName + '="' + escape(a.value) + '"';}
      result += '<' + tag(node) + ArrayProto.map.call(node.attributes, attr_str).join('') + '>';
    }

    function close(node) {
      result += '</' + tag(node) + '>';
    }

    function render(event) {
      (event.event === 'start' ? open : close)(event.node);
    }

    while (original.length || highlighted.length) {
      var stream = selectStream();
      result += escape(value.substr(processed, stream[0].offset - processed));
      processed = stream[0].offset;
      if (stream === original) {
        /*
        On any opening or closing tag of the original markup we first close
        the entire highlighted node stack, then render the original tag along
        with all the following original tags at the same offset and then
        reopen all the tags on the highlighted stack.
        */
        nodeStack.reverse().forEach(close);
        do {
          render(stream.splice(0, 1)[0]);
          stream = selectStream();
        } while (stream === original && stream.length && stream[0].offset === processed);
        nodeStack.reverse().forEach(open);
      } else {
        if (stream[0].event === 'start') {
          nodeStack.push(stream[0].node);
        } else {
          nodeStack.pop();
        }
        render(stream.splice(0, 1)[0]);
      }
    }
    return result + escape(value.substr(processed));
  }

  /* Initialization */

  function compileLanguage(language) {

    function reStr(re) {
        return (re && re.source) || re;
    }

    function langRe(value, global) {
      return new RegExp(
        reStr(value),
        'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')
      );
    }

    function compileMode(mode, parent) {
      if (mode.compiled)
        return;
      mode.compiled = true;

      mode.keywords = mode.keywords || mode.beginKeywords;
      if (mode.keywords) {
        var compiled_keywords = {};

        var flatten = function(className, str) {
          if (language.case_insensitive) {
            str = str.toLowerCase();
          }
          str.split(' ').forEach(function(kw) {
            var pair = kw.split('|');
            compiled_keywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1];
          });
        };

        if (typeof mode.keywords === 'string') { // string
          flatten('keyword', mode.keywords);
        } else {
          objectKeys(mode.keywords).forEach(function (className) {
            flatten(className, mode.keywords[className]);
          });
        }
        mode.keywords = compiled_keywords;
      }
      mode.lexemesRe = langRe(mode.lexemes || /\w+/, true);

      if (parent) {
        if (mode.beginKeywords) {
          mode.begin = '\\b(' + mode.beginKeywords.split(' ').join('|') + ')\\b';
        }
        if (!mode.begin)
          mode.begin = /\B|\b/;
        mode.beginRe = langRe(mode.begin);
        if (!mode.end && !mode.endsWithParent)
          mode.end = /\B|\b/;
        if (mode.end)
          mode.endRe = langRe(mode.end);
        mode.terminator_end = reStr(mode.end) || '';
        if (mode.endsWithParent && parent.terminator_end)
          mode.terminator_end += (mode.end ? '|' : '') + parent.terminator_end;
      }
      if (mode.illegal)
        mode.illegalRe = langRe(mode.illegal);
      if (mode.relevance == null)
        mode.relevance = 1;
      if (!mode.contains) {
        mode.contains = [];
      }
      var expanded_contains = [];
      mode.contains.forEach(function(c) {
        if (c.variants) {
          c.variants.forEach(function(v) {expanded_contains.push(inherit(c, v));});
        } else {
          expanded_contains.push(c === 'self' ? mode : c);
        }
      });
      mode.contains = expanded_contains;
      mode.contains.forEach(function(c) {compileMode(c, mode);});

      if (mode.starts) {
        compileMode(mode.starts, parent);
      }

      var terminators =
        mode.contains.map(function(c) {
          return c.beginKeywords ? '\\.?(' + c.begin + ')\\.?' : c.begin;
        })
        .concat([mode.terminator_end, mode.illegal])
        .map(reStr)
        .filter(Boolean);
      mode.terminators = terminators.length ? langRe(terminators.join('|'), true) : {exec: function(/*s*/) {return null;}};
    }

    compileMode(language);
  }

  /*
  Core highlighting function. Accepts a language name, or an alias, and a
  string with the code to highlight. Returns an object with the following
  properties:

  - relevance (int)
  - value (an HTML string with highlighting markup)

  */
  function highlight(name, value, ignore_illegals, continuation) {

    function subMode(lexeme, mode) {
      var i, length;

      for (i = 0, length = mode.contains.length; i < length; i++) {
        if (testRe(mode.contains[i].beginRe, lexeme)) {
          return mode.contains[i];
        }
      }
    }

    function endOfMode(mode, lexeme) {
      if (testRe(mode.endRe, lexeme)) {
        while (mode.endsParent && mode.parent) {
          mode = mode.parent;
        }
        return mode;
      }
      if (mode.endsWithParent) {
        return endOfMode(mode.parent, lexeme);
      }
    }

    function isIllegal(lexeme, mode) {
      return !ignore_illegals && testRe(mode.illegalRe, lexeme);
    }

    function keywordMatch(mode, match) {
      var match_str = language.case_insensitive ? match[0].toLowerCase() : match[0];
      return mode.keywords.hasOwnProperty(match_str) && mode.keywords[match_str];
    }

    function buildSpan(classname, insideSpan, leaveOpen, noPrefix) {
      var classPrefix = noPrefix ? '' : options.classPrefix,
          openSpan    = '<span class="' + classPrefix,
          closeSpan   = leaveOpen ? '' : spanEndTag

      openSpan += classname + '">';

      return openSpan + insideSpan + closeSpan;
    }

    function processKeywords() {
      var keyword_match, last_index, match, result;

      if (!top.keywords)
        return escape(mode_buffer);

      result = '';
      last_index = 0;
      top.lexemesRe.lastIndex = 0;
      match = top.lexemesRe.exec(mode_buffer);

      while (match) {
        result += escape(mode_buffer.substr(last_index, match.index - last_index));
        keyword_match = keywordMatch(top, match);
        if (keyword_match) {
          relevance += keyword_match[1];
          result += buildSpan(keyword_match[0], escape(match[0]));
        } else {
          result += escape(match[0]);
        }
        last_index = top.lexemesRe.lastIndex;
        match = top.lexemesRe.exec(mode_buffer);
      }
      return result + escape(mode_buffer.substr(last_index));
    }

    function processSubLanguage() {
      var explicit = typeof top.subLanguage === 'string';
      if (explicit && !languages[top.subLanguage]) {
        return escape(mode_buffer);
      }

      var result = explicit ?
                   highlight(top.subLanguage, mode_buffer, true, continuations[top.subLanguage]) :
                   highlightAuto(mode_buffer, top.subLanguage.length ? top.subLanguage : undefined);

      // Counting embedded language score towards the host language may be disabled
      // with zeroing the containing mode relevance. Usecase in point is Markdown that
      // allows XML everywhere and makes every XML snippet to have a much larger Markdown
      // score.
      if (top.relevance > 0) {
        relevance += result.relevance;
      }
      if (explicit) {
        continuations[top.subLanguage] = result.top;
      }
      return buildSpan(result.language, result.value, false, true);
    }

    function processBuffer() {
      result += (top.subLanguage != null ? processSubLanguage() : processKeywords());
      mode_buffer = '';
    }

    function startNewMode(mode) {
      result += mode.className? buildSpan(mode.className, '', true): '';
      top = Object.create(mode, {parent: {value: top}});
    }

    function processLexeme(buffer, lexeme) {

      mode_buffer += buffer;

      if (lexeme == null) {
        processBuffer();
        return 0;
      }

      var new_mode = subMode(lexeme, top);
      if (new_mode) {
        if (new_mode.skip) {
          mode_buffer += lexeme;
        } else {
          if (new_mode.excludeBegin) {
            mode_buffer += lexeme;
          }
          processBuffer();
          if (!new_mode.returnBegin && !new_mode.excludeBegin) {
            mode_buffer = lexeme;
          }
        }
        startNewMode(new_mode, lexeme);
        return new_mode.returnBegin ? 0 : lexeme.length;
      }

      var end_mode = endOfMode(top, lexeme);
      if (end_mode) {
        var origin = top;
        if (origin.skip) {
          mode_buffer += lexeme;
        } else {
          if (!(origin.returnEnd || origin.excludeEnd)) {
            mode_buffer += lexeme;
          }
          processBuffer();
          if (origin.excludeEnd) {
            mode_buffer = lexeme;
          }
        }
        do {
          if (top.className) {
            result += spanEndTag;
          }
          if (!top.skip) {
            relevance += top.relevance;
          }
          top = top.parent;
        } while (top !== end_mode.parent);
        if (end_mode.starts) {
          startNewMode(end_mode.starts, '');
        }
        return origin.returnEnd ? 0 : lexeme.length;
      }

      if (isIllegal(lexeme, top))
        throw new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.className || '<unnamed>') + '"');

      /*
      Parser should not reach this point as all types of lexemes should be caught
      earlier, but if it does due to some bug make sure it advances at least one
      character forward to prevent infinite looping.
      */
      mode_buffer += lexeme;
      return lexeme.length || 1;
    }

    var language = getLanguage(name);
    if (!language) {
      throw new Error('Unknown language: "' + name + '"');
    }

    compileLanguage(language);
    var top = continuation || language;
    var continuations = {}; // keep continuations for sub-languages
    var result = '', current;
    for(current = top; current !== language; current = current.parent) {
      if (current.className) {
        result = buildSpan(current.className, '', true) + result;
      }
    }
    var mode_buffer = '';
    var relevance = 0;
    try {
      var match, count, index = 0;
      while (true) {
        top.terminators.lastIndex = index;
        match = top.terminators.exec(value);
        if (!match)
          break;
        count = processLexeme(value.substr(index, match.index - index), match[0]);
        index = match.index + count;
      }
      processLexeme(value.substr(index));
      for(current = top; current.parent; current = current.parent) { // close dangling modes
        if (current.className) {
          result += spanEndTag;
        }
      }
      return {
        relevance: relevance,
        value: result,
        language: name,
        top: top
      };
    } catch (e) {
      if (e.message && e.message.indexOf('Illegal') !== -1) {
        return {
          relevance: 0,
          value: escape(value)
        };
      } else {
        throw e;
      }
    }
  }

  /*
  Highlighting with language detection. Accepts a string with the code to
  highlight. Returns an object with the following properties:

  - language (detected language)
  - relevance (int)
  - value (an HTML string with highlighting markup)
  - second_best (object with the same structure for second-best heuristically
    detected language, may be absent)

  */
  function highlightAuto(text, languageSubset) {
    languageSubset = languageSubset || options.languages || objectKeys(languages);
    var result = {
      relevance: 0,
      value: escape(text)
    };
    var second_best = result;
    languageSubset.filter(getLanguage).forEach(function(name) {
      var current = highlight(name, text, false);
      current.language = name;
      if (current.relevance > second_best.relevance) {
        second_best = current;
      }
      if (current.relevance > result.relevance) {
        second_best = result;
        result = current;
      }
    });
    if (second_best.language) {
      result.second_best = second_best;
    }
    return result;
  }

  /*
  Post-processing of the highlighted markup:

  - replace TABs with something more useful
  - replace real line-breaks with '<br>' for non-pre containers

  */
  function fixMarkup(value) {
    return !(options.tabReplace || options.useBR)
      ? value
      : value.replace(fixMarkupRe, function(match, p1) {
          if (options.useBR && match === '\n') {
            return '<br>';
          } else if (options.tabReplace) {
            return p1.replace(/\t/g, options.tabReplace);
          }
      });
  }

  function buildClassName(prevClassName, currentLang, resultLang) {
    var language = currentLang ? aliases[currentLang] : resultLang,
        result   = [prevClassName.trim()];

    if (!prevClassName.match(/\bhljs\b/)) {
      result.push('hljs');
    }

    if (prevClassName.indexOf(language) === -1) {
      result.push(language);
    }

    return result.join(' ').trim();
  }

  /*
  Applies highlighting to a DOM node containing code. Accepts a DOM node and
  two optional parameters for fixMarkup.
  */
  function highlightBlock(block) {
    var node, originalStream, result, resultNode, text;
    var language = blockLanguage(block);

    if (isNotHighlighted(language))
        return;

    if (options.useBR) {
      node = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
      node.innerHTML = block.innerHTML.replace(/\n/g, '').replace(/<br[ \/]*>/g, '\n');
    } else {
      node = block;
    }
    text = node.textContent;
    result = language ? highlight(language, text, true) : highlightAuto(text);

    originalStream = nodeStream(node);
    if (originalStream.length) {
      resultNode = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');
      resultNode.innerHTML = result.value;
      result.value = mergeStreams(originalStream, nodeStream(resultNode), text);
    }
    result.value = fixMarkup(result.value);

    block.innerHTML = result.value;
    block.className = buildClassName(block.className, language, result.language);
    block.result = {
      language: result.language,
      re: result.relevance
    };
    if (result.second_best) {
      block.second_best = {
        language: result.second_best.language,
        re: result.second_best.relevance
      };
    }
  }

  /*
  Updates highlight.js global options with values passed in the form of an object.
  */
  function configure(user_options) {
    options = inherit(options, user_options);
  }

  /*
  Applies highlighting to all <pre><code>..</code></pre> blocks on a page.
  */
  function initHighlighting() {
    if (initHighlighting.called)
      return;
    initHighlighting.called = true;

    var blocks = document.querySelectorAll('pre code');
    ArrayProto.forEach.call(blocks, highlightBlock);
  }

  /*
  Attaches highlighting to the page load event.
  */
  function initHighlightingOnLoad() {
    addEventListener('DOMContentLoaded', initHighlighting, false);
    addEventListener('load', initHighlighting, false);
  }

  function registerLanguage(name, language) {
    var lang = languages[name] = language(hljs);
    if (lang.aliases) {
      lang.aliases.forEach(function(alias) {aliases[alias] = name;});
    }
  }

  function listLanguages() {
    return objectKeys(languages);
  }

  function getLanguage(name) {
    name = (name || '').toLowerCase();
    return languages[name] || languages[aliases[name]];
  }

  /* Interface definition */

  hljs.highlight = highlight;
  hljs.highlightAuto = highlightAuto;
  hljs.fixMarkup = fixMarkup;
  hljs.highlightBlock = highlightBlock;
  hljs.configure = configure;
  hljs.initHighlighting = initHighlighting;
  hljs.initHighlightingOnLoad = initHighlightingOnLoad;
  hljs.registerLanguage = registerLanguage;
  hljs.listLanguages = listLanguages;
  hljs.getLanguage = getLanguage;
  hljs.inherit = inherit;

  // Common regexps
  hljs.IDENT_RE = '[a-zA-Z]\\w*';
  hljs.UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\w*';
  hljs.NUMBER_RE = '\\b\\d+(\\.\\d+)?';
  hljs.C_NUMBER_RE = '(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)'; // 0x..., 0..., decimal, float
  hljs.BINARY_NUMBER_RE = '\\b(0b[01]+)'; // 0b...
  hljs.RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';

  // Common modes
  hljs.BACKSLASH_ESCAPE = {
    begin: '\\\\[\\s\\S]', relevance: 0
  };
  hljs.APOS_STRING_MODE = {
    className: 'string',
    begin: '\'', end: '\'',
    illegal: '\\n',
    contains: [hljs.BACKSLASH_ESCAPE]
  };
  hljs.QUOTE_STRING_MODE = {
    className: 'string',
    begin: '"', end: '"',
    illegal: '\\n',
    contains: [hljs.BACKSLASH_ESCAPE]
  };
  hljs.PHRASAL_WORDS_MODE = {
    begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|like)\b/
  };
  hljs.COMMENT = function (begin, end, inherits) {
    var mode = hljs.inherit(
      {
        className: 'comment',
        begin: begin, end: end,
        contains: []
      },
      inherits || {}
    );
    mode.contains.push(hljs.PHRASAL_WORDS_MODE);
    mode.contains.push({
      className: 'doctag',
      begin: '(?:TODO|FIXME|NOTE|BUG|XXX):',
      relevance: 0
    });
    return mode;
  };
  hljs.C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$');
  hljs.C_BLOCK_COMMENT_MODE = hljs.COMMENT('/\\*', '\\*/');
  hljs.HASH_COMMENT_MODE = hljs.COMMENT('#', '$');
  hljs.NUMBER_MODE = {
    className: 'number',
    begin: hljs.NUMBER_RE,
    relevance: 0
  };
  hljs.C_NUMBER_MODE = {
    className: 'number',
    begin: hljs.C_NUMBER_RE,
    relevance: 0
  };
  hljs.BINARY_NUMBER_MODE = {
    className: 'number',
    begin: hljs.BINARY_NUMBER_RE,
    relevance: 0
  };
  hljs.CSS_NUMBER_MODE = {
    className: 'number',
    begin: hljs.NUMBER_RE + '(' +
      '%|em|ex|ch|rem'  +
      '|vw|vh|vmin|vmax' +
      '|cm|mm|in|pt|pc|px' +
      '|deg|grad|rad|turn' +
      '|s|ms' +
      '|Hz|kHz' +
      '|dpi|dpcm|dppx' +
      ')?',
    relevance: 0
  };
  hljs.REGEXP_MODE = {
    className: 'regexp',
    begin: /\//, end: /\/[gimuy]*/,
    illegal: /\n/,
    contains: [
      hljs.BACKSLASH_ESCAPE,
      {
        begin: /\[/, end: /\]/,
        relevance: 0,
        contains: [hljs.BACKSLASH_ESCAPE]
      }
    ]
  };
  hljs.TITLE_MODE = {
    className: 'title',
    begin: hljs.IDENT_RE,
    relevance: 0
  };
  hljs.UNDERSCORE_TITLE_MODE = {
    className: 'title',
    begin: hljs.UNDERSCORE_IDENT_RE,
    relevance: 0
  };
  hljs.METHOD_GUARD = {
    // excludes method names from keyword processing
    begin: '\\.\\s*' + hljs.UNDERSCORE_IDENT_RE,
    relevance: 0
  };

  return hljs;
}));

},{}],197:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module markdown-escapes
 * @fileoverview List of escapable characters in markdown.
 */

'use strict';

/* eslint-env commonjs */

/* Expose. */
module.exports = escapes;

/* Characters. */
var defaults = [
  '\\',
  '`',
  '*',
  '{',
  '}',
  '[',
  ']',
  '(',
  ')',
  '#',
  '+',
  '-',
  '.',
  '!',
  '_',
  '>'
];

var gfm = defaults.concat(['~', '|']);

var commonmark = gfm.concat([
  '\n',
  '"',
  '$',
  '%',
  '&',
  '\'',
  ',',
  '/',
  ':',
  ';',
  '<',
  '=',
  '?',
  '@',
  '^'
]);

/* Expose characters. */
escapes.default = defaults;
escapes.gfm = gfm;
escapes.commonmark = commonmark;

/**
 * Get markdown escapes.
 *
 * @param {Object?} [options] - Configuration.
 * @return {Array.<string>} - Escapes.
 */
function escapes(options) {
  var settings = options || {};

  if (settings.commonmark) {
    return commonmark;
  }

  return settings.gfm ? gfm : defaults;
}

},{}],198:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2014 Titus Wormer
 * @license MIT
 * @module markdown-table
 * @fileoverview Count syllables in English words.
 */

'use strict';

/* Expose `markdownTable`. */
module.exports = markdownTable;

/* Expressions. */
var EXPRESSION_DOT = /\./;
var EXPRESSION_LAST_DOT = /\.[^.]*$/;

/* Allowed alignment values. */
var LEFT = 'l';
var RIGHT = 'r';
var CENTER = 'c';
var DOT = '.';
var NULL = '';

var ALLIGNMENT = [LEFT, RIGHT, CENTER, DOT, NULL];

/* Characters. */
var COLON = ':';
var DASH = '-';
var PIPE = '|';
var SPACE = ' ';
var NEW_LINE = '\n';

/**
 * Create a table from a matrix of strings.
 *
 * @param {Array.<Array.<string>>} table
 * @param {Object?} options
 * @param {boolean?} [options.rule=true]
 * @param {string?} [options.delimiter=" | "]
 * @param {string?} [options.start="| "]
 * @param {string?} [options.end=" |"]
 * @param {Array.<string>?} options.align
 * @param {function(string)?} options.stringLength
 * @return {string} Pretty table
 */
function markdownTable(table, options) {
  var settings = options || {};
  var delimiter = settings.delimiter;
  var start = settings.start;
  var end = settings.end;
  var alignment = settings.align;
  var calculateStringLength = settings.stringLength || lengthNoop;
  var cellCount = 0;
  var rowIndex = -1;
  var rowLength = table.length;
  var sizes = [];
  var align;
  var rule;
  var rows;
  var row;
  var cells;
  var index;
  var position;
  var size;
  var value;
  var spacing;
  var before;
  var after;

  alignment = alignment ? alignment.concat() : [];

  if (delimiter === null || delimiter === undefined) {
    delimiter = SPACE + PIPE + SPACE;
  }

  if (start === null || start === undefined) {
    start = PIPE + SPACE;
  }

  if (end === null || end === undefined) {
    end = SPACE + PIPE;
  }

  while (++rowIndex < rowLength) {
    row = table[rowIndex];

    index = -1;

    if (row.length > cellCount) {
      cellCount = row.length;
    }

    while (++index < cellCount) {
      position = row[index] ? dotindex(row[index]) : null;

      if (!sizes[index]) {
        sizes[index] = 3;
      }

      if (position > sizes[index]) {
        sizes[index] = position;
      }
    }
  }

  if (typeof alignment === 'string') {
    alignment = pad(cellCount, alignment).split('');
  }

  /* Make sure only valid alignments are used. */
  index = -1;

  while (++index < cellCount) {
    align = alignment[index];

    if (typeof align === 'string') {
      align = align.charAt(0).toLowerCase();
    }

    if (ALLIGNMENT.indexOf(align) === -1) {
      align = NULL;
    }

    alignment[index] = align;
  }

  rowIndex = -1;
  rows = [];

  while (++rowIndex < rowLength) {
    row = table[rowIndex];

    index = -1;
    cells = [];

    while (++index < cellCount) {
      value = row[index];

      if (value === null || value === undefined) {
        value = '';
      } else {
        value = String(value);
      }

      if (alignment[index] === DOT) {
        position = dotindex(value);

        size = sizes[index] +
          (EXPRESSION_DOT.test(value) ? 0 : 1) -
          (calculateStringLength(value) - position);

        cells[index] = value + pad(size - 1);
      } else {
        cells[index] = value;
      }
    }

    rows[rowIndex] = cells;
  }

  sizes = [];
  rowIndex = -1;

  while (++rowIndex < rowLength) {
    cells = rows[rowIndex];

    index = -1;

    while (++index < cellCount) {
      value = cells[index];

      if (!sizes[index]) {
        sizes[index] = 3;
      }

      size = calculateStringLength(value);

      if (size > sizes[index]) {
        sizes[index] = size;
      }
    }
  }

  rowIndex = -1;

  while (++rowIndex < rowLength) {
    cells = rows[rowIndex];

    index = -1;

    while (++index < cellCount) {
      value = cells[index];

      position = sizes[index] - (calculateStringLength(value) || 0);
      spacing = pad(position);

      if (alignment[index] === RIGHT || alignment[index] === DOT) {
        value = spacing + value;
      } else if (alignment[index] === CENTER) {
        position /= 2;

        if (position % 1 === 0) {
          before = position;
          after = position;
        } else {
          before = position + 0.5;
          after = position - 0.5;
        }

        value = pad(before) + value + pad(after);
      } else {
        value += spacing;
      }

      cells[index] = value;
    }

    rows[rowIndex] = cells.join(delimiter);
  }

  if (settings.rule !== false) {
    index = -1;
    rule = [];

    while (++index < cellCount) {
      align = alignment[index];

      /* When `align` is left, don't add colons. */
      value = align === RIGHT || align === NULL ? DASH : COLON;
      value += pad(sizes[index] - 2, DASH);
      value += align !== LEFT && align !== NULL ? COLON : DASH;

      rule[index] = value;
    }

    rows.splice(1, 0, rule.join(delimiter));
  }

  return start + rows.join(end + NEW_LINE + start) + end;
}

/**
 * Get the length of `value`.
 *
 * @param {string} value
 * @return {number}
 */
function lengthNoop(value) {
  return String(value).length;
}

/**
 * Get a string consisting of `length` `character`s.
 *
 * @param {number} length
 * @param {string} [character=' ']
 * @return {string}
 */
function pad(length, character) {
  return Array(length + 1).join(character || SPACE);
}

/**
 * Get the position of the last dot in `value`.
 *
 * @param {string} value
 * @return {number}
 */
function dotindex(value) {
  var match = EXPRESSION_LAST_DOT.exec(value);

  return match ? match.index + 1 : value.length;
}

},{}],199:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module mdast:util:compact
 * @fileoverview Make an MDAST tree compact.
 */

'use strict';

/* eslint-env commonjs */

/* Dependencies. */
var visit = require('unist-util-visit');
var modify = require('unist-util-modify-children');

/* Expose. */
module.exports = compact;

/**
 * Make an MDAST tree compact by merging adjacent text
 * nodes.
 *
 * @param {Node} tree - Node.
 * @return {Node} - Node without `position`s.
 */
function compact(tree, commonmark) {
  var modifier = modify(iterator);

  visit(tree, visitor);

  return tree;

  function visitor(node) {
    if (node.children) {
      modifier(node);
    }
  }

  function iterator(child, index, parent) {
    var siblings = parent.children;
    var prev = index && siblings[index - 1];

    if (
      prev &&
      child.type === prev.type &&
      mergeable(prev, commonmark) &&
      mergeable(child, commonmark)
    ) {
      if (child.value) {
        prev.value += child.value;
      }

      if (child.children) {
        prev.children = prev.children.concat(child.children);
      }

      siblings.splice(index, 1);

      if (prev.position && child.position) {
        prev.position.end = child.position.end;
      }

      return index;
    }
  }
}

function mergeable(node, commonmark) {
  var start;
  var end;

  if (node.type === 'text') {
    if (!node.position) {
      return true;
    }

    start = node.position.start;
    end = node.position.end;

    /* Only merge nodes which occupy the same size as their `value`. */
    return start.line !== end.line ||
      end.column - start.column === node.value.length;
  }

  return commonmark && node.type === 'blockquote';
}

},{"unist-util-modify-children":349,"unist-util-visit":353}],200:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015-2016 Titus Wormer. All rights reserved.
 * @license MIT
 * @module mdast:util:definitions
 * @fileoverview Get a definition in `node` by `identifier`.
 */

'use strict';

/*
 * Dependencies.
 */

var visit = require('unist-util-visit');

/**
 * Factory to get a node from the given definition-cache.
 *
 * @private
 * @param {Object.<string, Node>} cache - Definitions.
 * @return {function(string): Node?} - Getter, bound to
 *   `cache`.
 */
function getterFactory(cache) {
    /**
     * Get a node from the bound definition-cache.
     *
     * @private
     * @param {string} identifier - Identifier of
     *   definition.
     * @return {Node?} - Definition, if found.
     */
    function getter(identifier) {
        return (identifier && cache[identifier.toUpperCase()]) || null;
    }

    return getter;
}

/**
 * Gather all definitions in `node`
 *
 * @private
 * @param {Node} node - (Grand)parent of definitions.
 * @return {Object.<string, Node>} - Map of found
 *   definitions by their identifier.
 */
function gather(node) {
    var cache = {};

    if (!node || !node.type) {
        throw new Error('mdast-util-definitions expected node');
    }

    /**
     * Add `definition` to `cache` if it has an identifier.
     *
     * @param {Node} definition - Definition node.
     */
    function check(definition) {
        cache[definition.identifier.toUpperCase()] = definition;
    }

    visit(node, 'definition', check);

    return cache;
}

/**
 * Get a definition in `node` by `identifier`.
 *
 * Supports weird keys (like `__proto__`).
 *
 * @example
 *   var ast = remark.parse('[example]: http://example.com "Example"');
 *   var getDefinition = getDefinitionFactory(ast);
 *   getDefinition('example');
 *   // {type: 'definition', 'title': 'Example', ...}
 *
 * @param {Node} node - (Grand)parent of definitions.
 * @return {function(string): Node?} - Getter.
 */
function getDefinitionFactory(node) {
    return getterFactory(gather(node));
}

/*
 * Expose
 */

module.exports = getDefinitionFactory;

},{"unist-util-visit":353}],201:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module mdast:to-hast
 * @fileoverview Transform MDAST to HAST.
 */

'use strict';

/* eslint-env commonjs */

/* Dependencies. */
var visit = require('unist-util-visit');
var position = require('unist-util-position');
var definitions = require('mdast-util-definitions');
var collapse = require('collapse-white-space');
var normalize = require('normalize-uri');
var trimLines = require('trim-lines');
var detab = require('detab');
var trim = require('trim');
var xtend = require('xtend');
var u = require('unist-builder');

/* Compilers. */
var handlers = {};

/**
 * Wrap `nodes` with newlines between each entry.
 * Optionally adds newlines at the start and end.
 *
 * @param {Array.<Node>} nodes - Nodes to wrap.
 * @param {boolean} loose - Whether to inject newlines at
 *   the start, and end (in case nodes has entries).
 * @return {Array.<Node>} - Wrapped nodes.
 */
function wrapInLines(nodes, loose) {
    var result = [];
    var index = -1;
    var length = nodes.length;

    if (loose) {
        result.push(u('text', '\n'));
    }

    while (++index < length) {
        if (index) {
            result.push(u('text', '\n'));
        }

        result.push(nodes[index]);
    }

    if (loose && nodes.length) {
        result.push(u('text', '\n'));
    }

    return result;
}

/**
 * Return the content of a reference without definition
 * as markdown.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @param {Node?} [definition] - Definition node.
 * @return {Array.<string>?} - Node, list of nodes, or nothing.
 */
function failsafe(h, node, definition) {
    var subtype = node.referenceType;

    if (subtype !== 'collapsed' && subtype !== 'full' && !definition) {
        if (node.type === 'imageReference') {
            return u('text', '![' + node.alt + ']');
        }

        return [u('text', '[')].concat(all(h, node), u('text', ']'));
    }
}

/**
 * Transform all footnote definitions, if any.
 *
 * @param {Function} h - Hyperscript DSL.
 * @return {Node?} - Compiled footnotes, if any.
 */
function generateFootnotes(h) {
    var footnotes = h.footnotes;
    var length = footnotes.length;
    var index = -1;
    var listItems = [];
    var def;

    if (!length) {
        return null;
    }

    while (++index < length) {
        def = footnotes[index];

        listItems[index] = {
            type: 'listItem',
            data: { hProperties: { id: 'fn-' + def.identifier } },
            children: def.children.concat({
                type: 'link',
                url: '#fnref-' + def.identifier,
                data: { hProperties: { className: ['footnote-backref'] } },
                children: [{
                    type: 'text',
                    value: '↩'
                }]
            }),
            position: def.position
        };
    }

    return h(null, 'div', {
        className: ['footnotes']
    }, wrapInLines([
        thematicBreak(h),
        list(h, {
            type: 'list',
            ordered: true,
            children: listItems
        })
    ], true));
}

/**
 * Transform an unknown node.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function unknown(h, node) {
    if ('value' in node) {
        return h.wrap(node, u('text', node.value));
    }

    return h(node, 'div', all(h, node));
}

/**
 * Visit a node.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Object} node - Node.
 * @param {Object?} [parent] - `node`s parent.
 * @return {Node} - HAST node.
 * @throws {Error} - When `node` is not an MDAST node.
 */
function one(h, node, parent) {
    var type = node && node.type;
    var fn = handlers[type];

    /* Fail on non-nodes. */
    if (!type) {
        throw new Error('Expected node, got `' + node + '`');
    }

    return (typeof fn === 'function' ? fn : unknown)(h, node, parent);
}

/**
 * Transform the children of `parent`.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} parent - Parent to visit.
 * @return {Array.<Node>} - HAST nodes.
 */
function all(h, parent) {
    var nodes = parent.children || [];
    var length = nodes.length;
    var values = [];
    var index = -1;
    var result;
    var head;

    while (++index < length) {
        result = one(h, nodes[index], parent);

        if (result) {
            if (index && nodes[index - 1].type === 'break') {
                if (result.value) {
                    result.value = trim.left(result.value);
                }

                head = result.children && result.children[0];

                if (head && head.value) {
                    head.value = trim.left(head.value);
                }
            }

            values = values.concat(result);
        }
    }

    return values;
}

/**
 * Transform a `root`.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function root(h, node) {
    return h.wrap(node, u('root', wrapInLines(all(h, node))));
}

/**
 * Transform a block quote.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function blockquote(h, node) {
    return h(node, 'blockquote', wrapInLines(all(h, node), true));
}

/**
 * Transform an inline footnote.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function footnote(h, node) {
    var footnotes = h.footnotes;
    var index = -1;
    var length = footnotes.length;
    var identifiers = [];
    var identifier;

    while (++index < length) {
        identifiers[index] = footnotes[index].identifier;
    }

    identifier = 1;

    while (identifiers.indexOf(String(identifier)) !== -1) {
        identifier++;
    }

    identifier = String(identifier);

    footnotes.push({
        type: 'footnoteDefinition',
        identifier: identifier,
        children: node.children,
        position: node.position
    });

    return footnoteReference(h, {
        type: 'footnoteReference',
        identifier: identifier,
        position: node.position
    });
}

/**
 * Transform a list.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function list(h, node) {
    var props = {};

    if (typeof node.start === 'number' && node.start !== 1) {
        props.start = node.start;
    }

    return h(
        node,
        node.ordered ? 'ol' : 'ul',
        props,
        wrapInLines(all(h, node), true)
    );
}

/**
 * Transform a list-item.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @param {Node} parent - Parent of `node`.
 * @return {Node} - HAST node.
 */
function listItem(h, node, parent) {
    var head = node.children[0];
    var single;
    var result;
    var container;

    single = (!parent || !parent.loose) &&
        node.children.length === 1 &&
        head.children;

    result = all(h, single ? head : node);

    if (typeof node.checked === 'boolean') {
        if (!single && head.type !== 'paragraph') {
            result.unshift(h(null, 'p', []));
        }

        container = single ? result : result[0].children;

        if (container.length) {
            container.unshift(u('text', ' '));
        }

        container.unshift(h(null, 'input', {
            type: 'checkbox',
            checked: node.checked,
            disabled: true
        }));
    }

    if (!single && result.length) {
        result = wrapInLines(result, true);
    }

    return h(node, 'li', result);
}

/**
 * Transform a heading.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function heading(h, node) {
    return h(node, 'h' + node.depth, all(h, node));
}

/**
 * Transform a paragraph.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function paragraph(h, node) {
    return h(node, 'p', all(h, node));
}

/**
 * Transform a code block.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function code(h, node) {
    var value = node.value ? detab(node.value + '\n') : '';
    var lang = node.lang && node.lang.match(/^[^\ \t]+(?=[\ \t]|$)/);
    var props = {};

    if (lang) {
        props.className = ['language-' + lang];
    }

    return h(node.position, 'pre', [
        h(node, 'code', props, [u('text', value)])
    ]);
}

/**
 * Transform a table.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function table(h, node) {
    var rows = node.children;
    var index = rows.length;
    var align = node.align;
    var alignLength = align.length;
    var pos;
    var result = [];
    var row;
    var out;
    var name;
    var cell;
    var head;
    var rest;

    while (index--) {
        row = rows[index].children;
        name = index === 0 ? 'th' : 'td';
        pos = alignLength;
        out = [];

        while (pos--) {
            cell = row[pos];
            out[pos] = h(cell, name, {
                align: align[pos]
            }, cell ? wrapInLines(all(h, cell)) : []);
        }

        result[index] = h(rows[index], 'tr', wrapInLines(out, true));
    }

    head = result[0].position;
    rest = {
        start: position.start(result[1]),
        end: position.end(result[result.length - 1])
    };

    return h(node, 'table', wrapInLines([
        h(head, 'thead', wrapInLines([result[0]], true)),
        h(rest, 'tbody', wrapInLines(result.slice(1), true))
    ], true));
}

/**
 * Transform a thematic break / horizontal rule.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function thematicBreak(h, node) {
    return h(node, 'hr');
}

/**
 * Transform inline code.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function inlineCode(h, node) {
    return h(node, 'code', [u('text', collapse(node.value))]);
}

/**
 * Transform importance.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function strong(h, node) {
    return h(node, 'strong', all(h, node));
}

/**
 * Transform emphasis
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function emphasis(h, node) {
    return h(node, 'em', all(h, node));
}

/**
 * Transform deletions.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function strikethrough(h, node) {
    return h(node, 'del', all(h, node));
}

/**
 * Transform an inline break.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Array.<Node>} - HAST nodes.
 */
function hardBreak(h, node) {
    return [h(node, 'br'), u('text', '\n')];
}

/**
 * Transform a link.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function link(h, node) {
    var props = {href: normalize(node.url)};

    if (node.title != null) {
        props.title = node.title
    }

    return h(node, 'a', props, all(h, node));
}

/**
 * Transform an image.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function image(h, node) {
    var props = {
        src: normalize(node.url),
        alt: node.alt
    };

    if (node.title != null) {
        props.title = node.title
    }

    return h(node, 'img', props);
}

/**
 * Transform a reference to a footnote.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function footnoteReference(h, node) {
    var identifier = node.identifier;

    return h(node.position, 'sup', { id: 'fnref-' + identifier }, [
        h(node, 'a', {
            href: '#fn-' + identifier,
            className: ['footnote-ref']
        }, [u('text', identifier)])
    ]);
}

/**
 * Transform a reference to a link.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function linkReference(h, node) {
    var def = h.definition(node.identifier);
    var props = {
        href: normalize((def && def.url) || '')
    };

    if (def && def.title != null) {
        props.title = def.title;
    }

    return failsafe(h, node, def) || h(node, 'a', props, all(h, node));
}

/**
 * Transform a reference to an image.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST node.
 */
function imageReference(h, node) {
    var def = h.definition(node.identifier);
    var props = {
        src: normalize((def && def.url) || ''),
        alt: node.alt
    };

    if (def && def.title != null) {
        props.title = def.title;
    }

    return failsafe(h, node, def) || h(node, 'img', props);
}

/**
 * Transform text.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node} - HAST text node.
 */
function text(h, node) {
    return h.wrap(node, u('text', trimLines(node.value)));
}

/**
 * Return either a `raw` node, in dangerous mode, or
 * nothing.
 *
 * @param {Function} h - Hyperscript DSL.
 * @param {Node} node - Node to compile.
 * @return {Node|null} - Nothing.
 */
function html(h, node) {
    if (h.dangerous) {
        return h.wrap(node, u('raw', node.value));
    }

    return null;
}

/**
 * Return nothing for nodes which are ignored.
 *
 * @return {null} - Nothing.
 */
function ignore() {
    return null;
}

/* Handlers. */
handlers.root = root;
handlers.paragraph = paragraph;
handlers.blockquote = blockquote;
handlers.heading = heading;
handlers.code = code;
handlers.inlineCode = inlineCode;
handlers.yaml = ignore;
handlers.html = html;
handlers.list = list;
handlers.listItem = listItem;
handlers.table = table;
handlers.thematicBreak = thematicBreak;
handlers.break = hardBreak;
handlers.emphasis = emphasis;
handlers.strong = strong;
handlers.delete = strikethrough;
handlers.link = link;
handlers.image = image;
handlers.footnote = footnote;
handlers.linkReference = linkReference;
handlers.imageReference = imageReference;
handlers.footnoteReference = footnoteReference;
handlers.definition = ignore;
handlers.footnoteDefinition = ignore;
handlers.text = text;

/**
 * Factory to transform.
 *
 * @param {Node} tree - MDAST tree.
 * @param {Object?} options - Configuration.
 * @return {Function} - Hyperscript-like DSL.
 */
function factory(tree, options) {
    var dangerous = (options || {}).allowDangerousHTML;

    /**
     * Finalise the created of `right`, a HAST node, from
     * `left`, an MDAST node.
     *
     * @param {Node} left - MDAST node.
     * @param {Node} right - HAST node.
     */
    function wrap(left, right) {
        var data;
        var ctx;

        /* handle `data.hName`, `data.hProperties, `hChildren`. */
        if (left && 'data' in left) {
            data = left.data;

            if (right.type === 'element' && data.hName) {
                right.tagName = data.hName;
            }

            if (right.type === 'element' && data.hProperties) {
                right.properties = xtend(right.properties, data.hProperties);
            }

            if (right.children && data.hChildren) {
                right.children = data.hChildren;
            }
        }

        ctx = left && left.position ? left : {position: left};

        if (!position.generated(ctx)) {
            right.position = {
                start: position.start(ctx),
                end: position.end(ctx)
            };
        }

        return right;
    }

    /**
     * Create an element for a `node`.
     *
     * @param {Node} node - MDAST node to compile for.
     * @param {string} tagName - Proposed tag-name.
     * @param {Object?} [props={}] - Properties.
     * @param {Array.<Node>} children - HAST children.
     */
    function h(node, tagName, props, children) {
        if (
            children == null &&
            typeof props === 'object' &&
            'length' in props
        ) {
            children = props;
            props = {};
        }

        return wrap(node, {
            type: 'element',
            tagName: tagName,
            properties: props || {},
            children: children || []
        });
    }

    h.dangerous = dangerous;
    h.definition = definitions(tree);
    h.footnotes = [];
    h.wrap = wrap;

    visit(tree, 'footnoteDefinition', function (definition) {
        h.footnotes.push(definition);
    });

    return h;
}

/**
 * Transform `tree`, which is an MDAST node, to a HAST node.
 *
 * @param {Node} tree - MDAST Node.
 * @param {Object} [options] - Configuration.
 * @return {Node} - HAST Node.
 */
function toHAST(tree, options) {
    var h = factory(tree, options)
    var node = one(h, tree);
    var footnotes = generateFootnotes(h);

    if (node && node.children && footnotes) {
        node.children = node.children.concat(u('text', '\n'), footnotes);
    }

    return node;
}

/* Expose. */
module.exports = toHAST;

},{"collapse-white-space":43,"detab":158,"mdast-util-definitions":200,"normalize-uri":202,"trim":343,"trim-lines":341,"unist-builder":347,"unist-util-position":350,"unist-util-visit":353,"xtend":375}],202:[function(require,module,exports){
'use strict';

/**
 * Normalize `uri`. This only works when both `encodeURI`
 * and `decodeURI` are available, and when
 * decoding/encoding fails, just returns `uri`.
 *
 * @example
 *   normalizeURI('foo bar'); // 'foo%20bar'
 *   normalizeURI('foo%20bar'); // 'foo%20bar'
 *
 * @param {string} uri - Value with and/or without
 *   encoded, entities.
 * @return {string} - Encoded URI (when encoding succeeds,
 * or `uri`).
 */
function normalizeURI(uri) {
    try {
        uri = encodeURI(decodeURI(uri));
    } catch (exception) { /* empty */ }

    return uri;
}

/*
 * Expose.
 */

module.exports = normalizeURI;

},{}],203:[function(require,module,exports){
'use strict';
/* eslint-disable no-unused-vars */
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (e) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (Object.getOwnPropertySymbols) {
			symbols = Object.getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],204:[function(require,module,exports){
var wrappy = require('wrappy')
module.exports = wrappy(once)
module.exports.strict = wrappy(onceStrict)

once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function () {
      return once(this)
    },
    configurable: true
  })

  Object.defineProperty(Function.prototype, 'onceStrict', {
    value: function () {
      return onceStrict(this)
    },
    configurable: true
  })
})

function once (fn) {
  var f = function () {
    if (f.called) return f.value
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  f.called = false
  return f
}

function onceStrict (fn) {
  var f = function () {
    if (f.called)
      throw new Error(f.onceError)
    f.called = true
    return f.value = fn.apply(this, arguments)
  }
  var name = fn.name || 'Function wrapped with `once`'
  f.onceError = name + " shouldn't be called more than once"
  f.called = false
  return f
}

},{"wrappy":372}],205:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module parse-entities
 * @fileoverview Parse HTML character references: fast, spec-compliant,
 *   positional information.
 */

'use strict';

/* Dependencies. */
var has = require('has');
var characterEntities = require('character-entities');
var legacy = require('character-entities-legacy');
var invalid = require('character-reference-invalid');
var decimal = require('is-decimal');
var hexadecimal = require('is-hexadecimal');
var alphanumerical = require('is-alphanumerical');

/* Expose. */
module.exports = wrapper;

/* Methods. */
var fromCharCode = String.fromCharCode;
var noop = Function.prototype;

/* Characters. */
var REPLACEMENT = '\uFFFD';
var FORM_FEED = '\f';
var AMPERSAND = '&';
var OCTOTHORP = '#';
var SEMICOLON = ';';
var NEWLINE = '\n';
var X_LOWER = 'x';
var X_UPPER = 'X';
var SPACE = ' ';
var LESS_THAN = '<';
var EQUAL = '=';
var EMPTY = '';
var TAB = '\t';

/* Default settings. */
var defaults = {
  warning: null,
  reference: null,
  text: null,
  warningContext: null,
  referenceContext: null,
  textContext: null,
  position: {},
  additional: null,
  attribute: false,
  nonTerminated: true
};

/* Reference types. */
var NAMED = 'named';
var HEXADECIMAL = 'hexadecimal';
var DECIMAL = 'decimal';

/* Map of bases. */
var BASE = {};

BASE[HEXADECIMAL] = 16;
BASE[DECIMAL] = 10;

/* Map of types to tests. Each type of character reference
 * accepts different characters. This test is used to
 * detect whether a reference has ended (as the semicolon
 * is not strictly needed). */
var TESTS = {};

TESTS[NAMED] = alphanumerical;
TESTS[DECIMAL] = decimal;
TESTS[HEXADECIMAL] = hexadecimal;

/* Warning messages. */
var NAMED_NOT_TERMINATED = 1;
var NUMERIC_NOT_TERMINATED = 2;
var NAMED_EMPTY = 3;
var NUMERIC_EMPTY = 4;
var NAMED_UNKNOWN = 5;
var NUMERIC_DISALLOWED = 6;
var NUMERIC_PROHIBITED = 7;

var NUMERIC_REFERENCE = 'Numeric character references';
var NAMED_REFERENCE = 'Named character references';
var TERMINATED = ' must be terminated by a semicolon';
var VOID = ' cannot be empty';

var MESSAGES = {};

MESSAGES[NAMED_NOT_TERMINATED] = NAMED_REFERENCE + TERMINATED;
MESSAGES[NUMERIC_NOT_TERMINATED] = NUMERIC_REFERENCE + TERMINATED;
MESSAGES[NAMED_EMPTY] = NAMED_REFERENCE + VOID;
MESSAGES[NUMERIC_EMPTY] = NUMERIC_REFERENCE + VOID;
MESSAGES[NAMED_UNKNOWN] = NAMED_REFERENCE + ' must be known';
MESSAGES[NUMERIC_DISALLOWED] = NUMERIC_REFERENCE + ' cannot be disallowed';
MESSAGES[NUMERIC_PROHIBITED] = NUMERIC_REFERENCE + ' cannot be outside the ' +
    'permissible Unicode range';

/**
 * Wrap to ensure clean parameters are given to `parse`.
 *
 * @param {string} value - Value with entities.
 * @param {Object?} [options] - Configuration.
 */
function wrapper(value, options) {
  var settings = {};
  var key;

  if (!options) {
    options = {};
  }

  for (key in defaults) {
    settings[key] = options[key] == null ? defaults[key] : options[key];
  }

  if (settings.position.indent || settings.position.start) {
    settings.indent = settings.position.indent || [];
    settings.position = settings.position.start;
  }

  return parse(value, settings);
}

/**
 * Parse entities.
 *
 * @param {string} value - Value to tokenise.
 * @param {Object?} [settings] - Configuration.
 */
function parse(value, settings) {
  var additional = settings.additional;
  var nonTerminated = settings.nonTerminated;
  var handleText = settings.text;
  var handleReference = settings.reference;
  var handleWarning = settings.warning;
  var textContext = settings.textContext;
  var referenceContext = settings.referenceContext;
  var warningContext = settings.warningContext;
  var pos = settings.position;
  var indent = settings.indent || [];
  var length = value.length;
  var index = 0;
  var lines = -1;
  var column = pos.column || 1;
  var line = pos.line || 1;
  var queue = EMPTY;
  var result = [];
  var entityCharacters;
  var terminated;
  var characters;
  var character;
  var reference;
  var following;
  var warning;
  var reason;
  var output;
  var entity;
  var begin;
  var start;
  var type;
  var test;
  var prev;
  var next;
  var diff;
  var end;

  /* Cache the current point. */
  prev = now();

  /* Wrap `handleWarning`. */
  warning = handleWarning ? parseError : noop;

  /* Ensure the algorithm walks over the first character
   * and the end (inclusive). */
  index--;
  length++;

  while (++index < length) {
    /* If the previous character was a newline. */
    if (character === NEWLINE) {
      column = indent[lines] || 1;
    }

    character = at(index);

    /* Handle anything other than an ampersand,
     * including newlines and EOF. */
    if (character !== AMPERSAND) {
      if (character === NEWLINE) {
        line++;
        lines++;
        column = 0;
      }

      if (character) {
        queue += character;
        column++;
      } else {
        flush();
      }
    } else {
      following = at(index + 1);

      /* The behaviour depends on the identity of the next
       * character. */
      if (
        following === TAB ||
        following === NEWLINE ||
        following === FORM_FEED ||
        following === SPACE ||
        following === LESS_THAN ||
        following === AMPERSAND ||
        following === EMPTY ||
        (additional && following === additional)
      ) {
        /* Not a character reference. No characters
         * are consumed, and nothing is returned.
         * This is not an error, either. */
        queue += character;
        column++;

        continue;
      }

      start = begin = end = index + 1;

      /* Numerical entity. */
      if (following !== OCTOTHORP) {
        type = NAMED;
      } else {
        end = ++begin;

        /* The behaviour further depends on the
         * character after the U+0023 NUMBER SIGN. */
        following = at(end);

        if (following === X_LOWER || following === X_UPPER) {
          /* ASCII hex digits. */
          type = HEXADECIMAL;
          end = ++begin;
        } else {
          /* ASCII digits. */
          type = DECIMAL;
        }
      }

      entityCharacters = entity = characters = EMPTY;
      test = TESTS[type];
      end--;

      while (++end < length) {
        following = at(end);

        if (!test(following)) {
          break;
        }

        characters += following;

        /* Check if we can match a legacy named
         * reference.  If so, we cache that as the
         * last viable named reference.  This
         * ensures we do not need to walk backwards
         * later. */
        if (type === NAMED && has(legacy, characters)) {
          entityCharacters = characters;
          entity = legacy[characters];
        }
      }

      terminated = at(end) === SEMICOLON;

      if (terminated) {
        end++;

        if (type === NAMED && has(characterEntities, characters)) {
          entityCharacters = characters;
          entity = characterEntities[characters];
        }
      }

      diff = 1 + end - start;

      if (!terminated && !nonTerminated) {
        /* Empty. */
      } else if (!characters) {
        /* An empty (possible) entity is valid, unless
         * its numeric (thus an ampersand followed by
         * an octothorp). */
        if (type !== NAMED) {
          warning(NUMERIC_EMPTY, diff);
        }
      } else if (type === NAMED) {
        /* An ampersand followed by anything
         * unknown, and not terminated, is invalid. */
        if (terminated && !entity) {
          warning(NAMED_UNKNOWN, 1);
        } else {
          /* If theres something after an entity
           * name which is not known, cap the
           * reference. */
          if (entityCharacters !== characters) {
            end = begin + entityCharacters.length;
            diff = 1 + end - begin;
            terminated = false;
          }

          /* If the reference is not terminated,
           * warn. */
          if (!terminated) {
            reason = entityCharacters ?
              NAMED_NOT_TERMINATED :
              NAMED_EMPTY;

            if (!settings.attribute) {
              warning(reason, diff);
            } else {
              following = at(end);

              if (following === EQUAL) {
                warning(reason, diff);
                entity = null;
              } else if (alphanumerical(following)) {
                entity = null;
              } else {
                warning(reason, diff);
              }
            }
          }
        }

        reference = entity;
      } else {
        if (!terminated) {
          /* All non-terminated numeric entities are
           * not rendered, and trigger a warning. */
          warning(NUMERIC_NOT_TERMINATED, diff);
        }

        /* When terminated and number, parse as
         * either hexadecimal or decimal. */
        reference = parseInt(characters, BASE[type]);

        /* Trigger a warning when the parsed number
         * is prohibited, and replace with
         * replacement character. */
        if (isProhibited(reference)) {
          warning(NUMERIC_PROHIBITED, diff);

          reference = REPLACEMENT;
        } else if (reference in invalid) {
          /* Trigger a warning when the parsed number
           * is disallowed, and replace by an
           * alternative. */
          warning(NUMERIC_DISALLOWED, diff);

          reference = invalid[reference];
        } else {
          /* Parse the number. */
          output = EMPTY;

          /* Trigger a warning when the parsed
           * number should not be used. */
          if (isWarning(reference)) {
            warning(NUMERIC_DISALLOWED, diff);
          }

          /* Stringify the number. */
          if (reference > 0xFFFF) {
            reference -= 0x10000;
            output += fromCharCode((reference >>> (10 & 0x3FF)) | 0xD800);
            reference = 0xDC00 | (reference & 0x3FF);
          }

          reference = output + fromCharCode(reference);
        }
      }

      /* If we could not find a reference, queue the
       * checked characters (as normal characters),
       * and move the pointer to their end. This is
       * possible because we can be certain neither
       * newlines nor ampersands are included. */
      if (!reference) {
        characters = value.slice(start - 1, end);
        queue += characters;
        column += characters.length;
        index = end - 1;
      } else {
        /* Found it! First eat the queued
         * characters as normal text, then eat
         * an entity. */
        flush();

        prev = now();
        index = end - 1;
        column += end - start + 1;
        result.push(reference);
        next = now();
        next.offset++;

        if (handleReference) {
          handleReference.call(referenceContext, reference, {
            start: prev,
            end: next
          }, value.slice(start - 1, end));
        }

        prev = next;
      }
    }
  }

  /* Return the reduced nodes, and any possible warnings. */
  return result.join(EMPTY);

  /**
   * Get current position.
   *
   * @return {Object} - Positional information of a
   *   single point.
   */
  function now() {
    return {
      line: line,
      column: column,
      offset: index + (pos.offset || 0)
    };
  }

  /**
   * “Throw” a parse-error: a warning.
   *
   * @param {number} code - Identifier of reason for
   *   failing.
   * @param {number} offset - Offset in characters from
   *   the current position point at which the
   *   parse-error ocurred, cannot point past newlines.
   */
  function parseError(code, offset) {
    var position = now();

    position.column += offset;
    position.offset += offset;

    handleWarning.call(warningContext, MESSAGES[code], position, code);
  }

  /**
   * Get character at position.
   *
   * @param {number} position - Indice of character in `value`.
   * @return {string} - Character at `position` in
   *   `value`.
   */
  function at(position) {
    return value.charAt(position);
  }

  /**
   * Flush `queue` (normal text). Macro invoked before
   * each entity and at the end of `value`.
   *
   * Does nothing when `queue` is empty.
   */
  function flush() {
    if (queue) {
      result.push(queue);

      if (handleText) {
        handleText.call(textContext, queue, {
          start: prev,
          end: now()
        });
      }

      queue = EMPTY;
    }
  }
}

/**
 * Check whether `character` is outside the permissible
 * unicode range.
 *
 * @param {number} code - Value.
 * @return {boolean} - Whether `character` is an
 *   outside the permissible unicode range.
 */
function isProhibited(code) {
  return (code >= 0xD800 && code <= 0xDFFF) || (code > 0x10FFFF);
}

/**
 * Check whether `character` is disallowed.
 *
 * @param {number} code - Value.
 * @return {boolean} - Whether `character` is disallowed.
 */
function isWarning(code) {
  if (
    (code >= 0x0001 && code <= 0x0008) ||
    code === 0x000B ||
    (code >= 0x000D && code <= 0x001F) ||
    (code >= 0x007F && code <= 0x009F) ||
    (code >= 0xFDD0 && code <= 0xFDEF) ||
    (code & 0xFFFF) === 0xFFFF ||
    (code & 0xFFFF) === 0xFFFE
  ) {
    return true;
  }

  return false;
}

},{"character-entities":40,"character-entities-legacy":38,"character-reference-invalid":42,"has":167,"is-alphanumerical":187,"is-decimal":189,"is-hexadecimal":190}],206:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))

},{"_process":33}],207:[function(require,module,exports){
(function (global){
/*!
 * Platform.js v1.3.1 <http://mths.be/platform>
 * Copyright 2014-2016 Benjamin Tan <https://d10.github.io/>
 * Copyright 2011-2013 John-David Dalton <http://allyoucanleet.com/>
 * Available under MIT license <http://mths.be/mit>
 */
;(function() {
  'use strict';

  /** Used to determine if values are of the language type `Object` */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used as a reference to the global object */
  var root = (objectTypes[typeof window] && window) || this;

  /** Backup possible global object */
  var oldRoot = root;

  /** Detect free variable `exports` */
  var freeExports = objectTypes[typeof exports] && exports;

  /** Detect free variable `module` */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
    root = freeGlobal;
  }

  /**
   * Used as the maximum length of an array-like object.
   * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)
   * for more details.
   */
  var maxSafeInteger = Math.pow(2, 53) - 1;

  /** Opera regexp */
  var reOpera = /\bOpera/;

  /** Possible global object */
  var thisBinding = this;

  /** Used for native method references */
  var objectProto = Object.prototype;

  /** Used to check for own properties of an object */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Used to resolve the internal `[[Class]]` of values */
  var toString = objectProto.toString;

  /*--------------------------------------------------------------------------*/

  /**
   * Capitalizes a string value.
   *
   * @private
   * @param {string} string The string to capitalize.
   * @returns {string} The capitalized string.
   */
  function capitalize(string) {
    string = String(string);
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  /**
   * A utility function to clean up the OS name.
   *
   * @private
   * @param {string} os The OS name to clean up.
   * @param {string} [pattern] A `RegExp` pattern matching the OS name.
   * @param {string} [label] A label for the OS.
   */
  function cleanupOS(os, pattern, label) {
    // platform tokens defined at
    // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx
    // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx
    var data = {
      '6.4':  '10',
      '6.3':  '8.1',
      '6.2':  '8',
      '6.1':  'Server 2008 R2 / 7',
      '6.0':  'Server 2008 / Vista',
      '5.2':  'Server 2003 / XP 64-bit',
      '5.1':  'XP',
      '5.01': '2000 SP1',
      '5.0':  '2000',
      '4.0':  'NT',
      '4.90': 'ME'
    };
    // detect Windows version from platform tokens
    if (pattern && label && /^Win/i.test(os) &&
        (data = data[0/*Opera 9.25 fix*/, /[\d.]+$/.exec(os)])) {
      os = 'Windows ' + data;
    }
    // correct character case and cleanup
    os = String(os);

    if (pattern && label) {
      os = os.replace(RegExp(pattern, 'i'), label);
    }

    os = format(
      os.replace(/ ce$/i, ' CE')
        .replace(/\bhpw/i, 'web')
        .replace(/\bMacintosh\b/, 'Mac OS')
        .replace(/_PowerPC\b/i, ' OS')
        .replace(/\b(OS X) [^ \d]+/i, '$1')
        .replace(/\bMac (OS X)\b/, '$1')
        .replace(/\/(\d)/, ' $1')
        .replace(/_/g, '.')
        .replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, '')
        .replace(/\bx86\.64\b/gi, 'x86_64')
        .replace(/\b(Windows Phone) OS\b/, '$1')
        .split(' on ')[0]
    );

    return os;
  }

  /**
   * An iteration utility for arrays and objects.
   *
   * @private
   * @param {Array|Object} object The object to iterate over.
   * @param {Function} callback The function called per iteration.
   */
  function each(object, callback) {
    var index = -1,
        length = object ? object.length : 0;

    if (typeof length == 'number' && length > -1 && length <= maxSafeInteger) {
      while (++index < length) {
        callback(object[index], index, object);
      }
    } else {
      forOwn(object, callback);
    }
  }

  /**
   * Trim and conditionally capitalize string values.
   *
   * @private
   * @param {string} string The string to format.
   * @returns {string} The formatted string.
   */
  function format(string) {
    string = trim(string);
    return /^(?:webOS|i(?:OS|P))/.test(string)
      ? string
      : capitalize(string);
  }

  /**
   * Iterates over an object's own properties, executing the `callback` for each.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} callback The function executed per own property.
   */
  function forOwn(object, callback) {
    for (var key in object) {
      if (hasOwnProperty.call(object, key)) {
        callback(object[key], key, object);
      }
    }
  }

  /**
   * Gets the internal `[[Class]]` of a value.
   *
   * @private
   * @param {*} value The value.
   * @returns {string} The `[[Class]]`.
   */
  function getClassOf(value) {
    return value == null
      ? capitalize(value)
      : toString.call(value).slice(8, -1);
  }

  /**
   * Host objects can return type values that are different from their actual
   * data type. The objects we are concerned with usually return non-primitive
   * types of "object", "function", or "unknown".
   *
   * @private
   * @param {*} object The owner of the property.
   * @param {string} property The property to check.
   * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.
   */
  function isHostType(object, property) {
    var type = object != null ? typeof object[property] : 'number';
    return !/^(?:boolean|number|string|undefined)$/.test(type) &&
      (type == 'object' ? !!object[property] : true);
  }

  /**
   * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.
   *
   * @private
   * @param {string} string The string to qualify.
   * @returns {string} The qualified string.
   */
  function qualify(string) {
    return String(string).replace(/([ -])(?!$)/g, '$1?');
  }

  /**
   * A bare-bones `Array#reduce` like utility function.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function called per iteration.
   * @returns {*} The accumulated result.
   */
  function reduce(array, callback) {
    var accumulator = null;
    each(array, function(value, index) {
      accumulator = callback(accumulator, value, index, array);
    });
    return accumulator;
  }

  /**
   * Removes leading and trailing whitespace from a string.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} The trimmed string.
   */
  function trim(string) {
    return String(string).replace(/^ +| +$/g, '');
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Creates a new platform object.
   *
   * @memberOf platform
   * @param {Object|string} [ua=navigator.userAgent] The user agent string or
   *  context object.
   * @returns {Object} A platform object.
   */
  function parse(ua) {

    /** The environment context object */
    var context = root;

    /** Used to flag when a custom context is provided */
    var isCustomContext = ua && typeof ua == 'object' && getClassOf(ua) != 'String';

    // juggle arguments
    if (isCustomContext) {
      context = ua;
      ua = null;
    }

    /** Browser navigator object */
    var nav = context.navigator || {};

    /** Browser user agent string */
    var userAgent = nav.userAgent || '';

    ua || (ua = userAgent);

    /** Used to flag when `thisBinding` is the [ModuleScope] */
    var isModuleScope = isCustomContext || thisBinding == oldRoot;

    /** Used to detect if browser is like Chrome */
    var likeChrome = isCustomContext
      ? !!nav.likeChrome
      : /\bChrome\b/.test(ua) && !/internal|\n/i.test(toString.toString());

    /** Internal `[[Class]]` value shortcuts */
    var objectClass = 'Object',
        airRuntimeClass = isCustomContext ? objectClass : 'ScriptBridgingProxyObject',
        enviroClass = isCustomContext ? objectClass : 'Environment',
        javaClass = (isCustomContext && context.java) ? 'JavaPackage' : getClassOf(context.java),
        phantomClass = isCustomContext ? objectClass : 'RuntimeObject';

    /** Detect Java environment */
    var java = /\bJava/.test(javaClass) && context.java;

    /** Detect Rhino */
    var rhino = java && getClassOf(context.environment) == enviroClass;

    /** A character to represent alpha */
    var alpha = java ? 'a' : '\u03b1';

    /** A character to represent beta */
    var beta = java ? 'b' : '\u03b2';

    /** Browser document object */
    var doc = context.document || {};

    /**
     * Detect Opera browser (Presto-based)
     * http://www.howtocreate.co.uk/operaStuff/operaObject.html
     * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini
     */
    var opera = context.operamini || context.opera;

    /** Opera `[[Class]]` */
    var operaClass = reOpera.test(operaClass = (isCustomContext && opera) ? opera['[[Class]]'] : getClassOf(opera))
      ? operaClass
      : (opera = null);

    /*------------------------------------------------------------------------*/

    /** Temporary variable used over the script's lifetime */
    var data;

    /** The CPU architecture */
    var arch = ua;

    /** Platform description array */
    var description = [];

    /** Platform alpha/beta indicator */
    var prerelease = null;

    /** A flag to indicate that environment features should be used to resolve the platform */
    var useFeatures = ua == userAgent;

    /** The browser/environment version */
    var version = useFeatures && opera && typeof opera.version == 'function' && opera.version();

    /** A flag to indicate if the OS ends with "/ Version" */
    var isSpecialCasedOS;

    /* Detectable layout engines (order is important) */
    var layout = getLayout([
      'Trident',
      { 'label': 'WebKit', 'pattern': 'AppleWebKit' },
      'iCab',
      'Presto',
      'NetFront',
      'Tasman',
      'KHTML',
      'Gecko'
    ]);

    /* Detectable browser names (order is important) */
    var name = getName([
      'Adobe AIR',
      'Arora',
      'Avant Browser',
      'Breach',
      'Camino',
      'Epiphany',
      'Fennec',
      'Flock',
      'Galeon',
      'GreenBrowser',
      'iCab',
      'Iceweasel',
      { 'label': 'SRWare Iron', 'pattern': 'Iron' },
      'K-Meleon',
      'Konqueror',
      'Lunascape',
      'Maxthon',
      'Midori',
      'Nook Browser',
      'PhantomJS',
      'Raven',
      'Rekonq',
      'RockMelt',
      'SeaMonkey',
      { 'label': 'Silk', 'pattern': '(?:Cloud9|Silk-Accelerated)' },
      'Sleipnir',
      'SlimBrowser',
      'Sunrise',
      'Swiftfox',
      'WebPositive',
      'Opera Mini',
      { 'label': 'Opera Mini', 'pattern': 'OPiOS' },
      'Opera',
      { 'label': 'Opera', 'pattern': 'OPR' },
      'Chrome',
      { 'label': 'Chrome Mobile', 'pattern': '(?:CriOS|CrMo)' },
      { 'label': 'Firefox', 'pattern': '(?:Firefox|Minefield)' },
      { 'label': 'IE', 'pattern': 'IEMobile' },
      { 'label': 'IE', 'pattern': 'MSIE' },
      'Safari'
    ]);

    /* Detectable products (order is important) */
    var product = getProduct([
      { 'label': 'BlackBerry', 'pattern': 'BB10' },
      'BlackBerry',
      { 'label': 'Galaxy S', 'pattern': 'GT-I9000' },
      { 'label': 'Galaxy S2', 'pattern': 'GT-I9100' },
      { 'label': 'Galaxy S3', 'pattern': 'GT-I9300' },
      { 'label': 'Galaxy S4', 'pattern': 'GT-I9500' },
      'Google TV',
      'Lumia',
      'iPad',
      'iPod',
      'iPhone',
      'Kindle',
      { 'label': 'Kindle Fire', 'pattern': '(?:Cloud9|Silk-Accelerated)' },
      'Nook',
      'PlayBook',
      'PlayStation 4',
      'PlayStation 3',
      'PlayStation Vita',
      'TouchPad',
      'Transformer',
      { 'label': 'Wii U', 'pattern': 'WiiU' },
      'Wii',
      'Xbox One',
      { 'label': 'Xbox 360', 'pattern': 'Xbox' },
      'Xoom'
    ]);

    /* Detectable manufacturers */
    var manufacturer = getManufacturer({
      'Apple': { 'iPad': 1, 'iPhone': 1, 'iPod': 1 },
      'Amazon': { 'Kindle': 1, 'Kindle Fire': 1 },
      'Asus': { 'Transformer': 1 },
      'Barnes & Noble': { 'Nook': 1 },
      'BlackBerry': { 'PlayBook': 1 },
      'Google': { 'Google TV': 1 },
      'HP': { 'TouchPad': 1 },
      'HTC': {},
      'LG': {},
      'Microsoft': { 'Xbox': 1, 'Xbox One': 1 },
      'Motorola': { 'Xoom': 1 },
      'Nintendo': { 'Wii U': 1,  'Wii': 1 },
      'Nokia': { 'Lumia': 1 },
      'Samsung': { 'Galaxy S': 1, 'Galaxy S2': 1, 'Galaxy S3': 1, 'Galaxy S4': 1 },
      'Sony': { 'PlayStation 4': 1, 'PlayStation 3': 1, 'PlayStation Vita': 1 }
    });

    /* Detectable OSes (order is important) */
    var os = getOS([
      'Windows Phone ',
      'Android',
      'CentOS',
      'Debian',
      'Fedora',
      'FreeBSD',
      'Gentoo',
      'Haiku',
      'Kubuntu',
      'Linux Mint',
      'Red Hat',
      'SuSE',
      'Ubuntu',
      'Xubuntu',
      'Cygwin',
      'Symbian OS',
      'hpwOS',
      'webOS ',
      'webOS',
      'Tablet OS',
      'Linux',
      'Mac OS X',
      'Macintosh',
      'Mac',
      'Windows 98;',
      'Windows '
    ]);

    /*------------------------------------------------------------------------*/

    /**
     * Picks the layout engine from an array of guesses.
     *
     * @private
     * @param {Array} guesses An array of guesses.
     * @returns {null|string} The detected layout engine.
     */
    function getLayout(guesses) {
      return reduce(guesses, function(result, guess) {
        return result || RegExp('\\b' + (
          guess.pattern || qualify(guess)
        ) + '\\b', 'i').exec(ua) && (guess.label || guess);
      });
    }

    /**
     * Picks the manufacturer from an array of guesses.
     *
     * @private
     * @param {Array} guesses An object of guesses.
     * @returns {null|string} The detected manufacturer.
     */
    function getManufacturer(guesses) {
      return reduce(guesses, function(result, value, key) {
        // lookup the manufacturer by product or scan the UA for the manufacturer
        return result || (
          value[product] ||
          value[0/*Opera 9.25 fix*/, /^[a-z]+(?: +[a-z]+\b)*/i.exec(product)] ||
          RegExp('\\b' + qualify(key) + '(?:\\b|\\w*\\d)', 'i').exec(ua)
        ) && key;
      });
    }

    /**
     * Picks the browser name from an array of guesses.
     *
     * @private
     * @param {Array} guesses An array of guesses.
     * @returns {null|string} The detected browser name.
     */
    function getName(guesses) {
      return reduce(guesses, function(result, guess) {
        return result || RegExp('\\b' + (
          guess.pattern || qualify(guess)
        ) + '\\b', 'i').exec(ua) && (guess.label || guess);
      });
    }

    /**
     * Picks the OS name from an array of guesses.
     *
     * @private
     * @param {Array} guesses An array of guesses.
     * @returns {null|string} The detected OS name.
     */
    function getOS(guesses) {
      return reduce(guesses, function(result, guess) {
        var pattern = guess.pattern || qualify(guess);
        if (!result && (result =
              RegExp('\\b' + pattern + '(?:/[\\d.]+|[ \\w.]*)', 'i').exec(ua)
            )) {
          result = cleanupOS(result, pattern, guess.label || guess);
        }
        return result;
      });
    }

    /**
     * Picks the product name from an array of guesses.
     *
     * @private
     * @param {Array} guesses An array of guesses.
     * @returns {null|string} The detected product name.
     */
    function getProduct(guesses) {
      return reduce(guesses, function(result, guess) {
        var pattern = guess.pattern || qualify(guess);
        if (!result && (result =
              RegExp('\\b' + pattern + ' *\\d+[.\\w_]*', 'i').exec(ua) ||
              RegExp('\\b' + pattern + '(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)', 'i').exec(ua)
            )) {
          // split by forward slash and append product version if needed
          if ((result = String((guess.label && !RegExp(pattern, 'i').test(guess.label)) ? guess.label : result).split('/'))[1] && !/[\d.]+/.test(result[0])) {
            result[0] += ' ' + result[1];
          }
          // correct character case and cleanup
          guess = guess.label || guess;
          result = format(result[0]
            .replace(RegExp(pattern, 'i'), guess)
            .replace(RegExp('; *(?:' + guess + '[_-])?', 'i'), ' ')
            .replace(RegExp('(' + guess + ')[-_.]?(\\w)', 'i'), '$1 $2'));
        }
        return result;
      });
    }

    /**
     * Resolves the version using an array of UA patterns.
     *
     * @private
     * @param {Array} patterns An array of UA patterns.
     * @returns {null|string} The detected version.
     */
    function getVersion(patterns) {
      return reduce(patterns, function(result, pattern) {
        return result || (RegExp(pattern +
          '(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;
      });
    }

    /**
     * Returns `platform.description` when the platform object is coerced to a string.
     *
     * @name toString
     * @memberOf platform
     * @returns {string} Returns `platform.description` if available, else an empty string.
     */
    function toStringPlatform() {
      return this.description || '';
    }

    /*------------------------------------------------------------------------*/

    // convert layout to an array so we can add extra details
    layout && (layout = [layout]);

    // detect product names that contain their manufacturer's name
    if (manufacturer && !product) {
      product = getProduct([manufacturer]);
    }
    // clean up Google TV
    if ((data = /\bGoogle TV\b/.exec(product))) {
      product = data[0];
    }
    // detect simulators
    if (/\bSimulator\b/i.test(ua)) {
      product = (product ? product + ' ' : '') + 'Simulator';
    }
    // detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS
    if (name == 'Opera Mini' && /\bOPiOS\b/.test(ua)) {
      description.push('running in Turbo/Uncompressed mode');
    }
    // detect iOS
    if (/^iP/.test(product)) {
      name || (name = 'Safari');
      os = 'iOS' + ((data = / OS ([\d_]+)/i.exec(ua))
        ? ' ' + data[1].replace(/_/g, '.')
        : '');
    }
    // detect Kubuntu
    else if (name == 'Konqueror' && !/buntu/i.test(os)) {
      os = 'Kubuntu';
    }
    // detect Android browsers
    else if (manufacturer && manufacturer != 'Google' &&
        ((/Chrome/.test(name) && !/\bMobile Safari\b/i.test(ua)) || /\bVita\b/.test(product))) {
      name = 'Android Browser';
      os = /\bAndroid\b/.test(os) ? os : 'Android';
    }
    // detect false positives for Firefox/Safari
    else if (!name || (data = !/\bMinefield\b|\(Android;/i.test(ua) && /\b(?:Firefox|Safari)\b/.exec(name))) {
      // escape the `/` for Firefox 1
      if (name && !product && /[\/,]|^[^(]+?\)/.test(ua.slice(ua.indexOf(data + '/') + 8))) {
        // clear name of false positives
        name = null;
      }
      // reassign a generic name
      if ((data = product || manufacturer || os) &&
          (product || manufacturer || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(os))) {
        name = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(os) ? os : data) + ' Browser';
      }
    }
    // detect Firefox OS
    if ((data = /\((Mobile|Tablet).*?Firefox\b/i.exec(ua)) && data[1]) {
      os = 'Firefox OS';
      if (!product) {
        product = data[1];
      }
    }
    // detect non-Opera versions (order is important)
    if (!version) {
      version = getVersion([
        '(?:Cloud9|CriOS|CrMo|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|Silk(?!/[\\d.]+$))',
        'Version',
        qualify(name),
        '(?:Firefox|Minefield|NetFront)'
      ]);
    }
    // detect stubborn layout engines
    if (layout == 'iCab' && parseFloat(version) > 3) {
      layout = ['WebKit'];
    } else if (
        layout != 'Trident' &&
        (data =
          /\bOpera\b/.test(name) && (/\bOPR\b/.test(ua) ? 'Blink' : 'Presto') ||
          /\b(?:Midori|Nook|Safari)\b/i.test(ua) && 'WebKit' ||
          !layout && /\bMSIE\b/i.test(ua) && (os == 'Mac OS' ? 'Tasman' : 'Trident')
        )
    ) {
      layout = [data];
    }
    // detect NetFront on PlayStation
    else if (/\bPlayStation\b(?! Vita\b)/i.test(name) && layout == 'WebKit') {
      layout = ['NetFront'];
    }
    // detect Windows Phone 7 desktop mode
    if (name == 'IE' && (data = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(ua) || 0)[1])) {
      name += ' Mobile';
      os = 'Windows Phone ' + (/\+$/.test(data) ? data : data + '.x');
      description.unshift('desktop mode');
    }
    // detect Windows Phone 8+ desktop mode
    else if (/\bWPDesktop\b/i.test(ua)) {
      name = 'IE Mobile';
      os = 'Windows Phone 8+';
      description.unshift('desktop mode');
      version || (version = (/\brv:([\d.]+)/.exec(ua) || 0)[1]);
    }
    // detect IE 11 and above
    else if (name != 'IE' && layout == 'Trident' && (data = /\brv:([\d.]+)/.exec(ua))) {
      if (!/\bWPDesktop\b/i.test(ua)) {
        if (name) {
          description.push('identifying as ' + name + (version ? ' ' + version : ''));
        }
        name = 'IE';
      }
      version = data[1];
    }
    // detect Microsoft Edge
    else if ((name == 'Chrome' || name != 'IE') && (data = /\bEdge\/([\d.]+)/.exec(ua))) {
      name = 'Microsoft Edge';
      version = data[1];
      layout = ['Trident'];
    }
    // leverage environment features
    if (useFeatures) {
      // detect server-side environments
      // Rhino has a global function while others have a global object
      if (isHostType(context, 'global')) {
        if (java) {
          data = java.lang.System;
          arch = data.getProperty('os.arch');
          os = os || data.getProperty('os.name') + ' ' + data.getProperty('os.version');
        }
        if (isModuleScope && isHostType(context, 'system') && (data = [context.system])[0]) {
          os || (os = data[0].os || null);
          try {
            data[1] = context.require('ringo/engine').version;
            version = data[1].join('.');
            name = 'RingoJS';
          } catch(e) {
            if (data[0].global.system == context.system) {
              name = 'Narwhal';
            }
          }
        }
        else if (typeof context.process == 'object' && (data = context.process)) {
          name = 'Node.js';
          arch = data.arch;
          os = data.platform;
          version = /[\d.]+/.exec(data.version)[0];
        }
        else if (rhino) {
          name = 'Rhino';
        }
      }
      // detect Adobe AIR
      else if (getClassOf((data = context.runtime)) == airRuntimeClass) {
        name = 'Adobe AIR';
        os = data.flash.system.Capabilities.os;
      }
      // detect PhantomJS
      else if (getClassOf((data = context.phantom)) == phantomClass) {
        name = 'PhantomJS';
        version = (data = data.version || null) && (data.major + '.' + data.minor + '.' + data.patch);
      }
      // detect IE compatibility modes
      else if (typeof doc.documentMode == 'number' && (data = /\bTrident\/(\d+)/i.exec(ua))) {
        // we're in compatibility mode when the Trident version + 4 doesn't
        // equal the document mode
        version = [version, doc.documentMode];
        if ((data = +data[1] + 4) != version[1]) {
          description.push('IE ' + version[1] + ' mode');
          layout && (layout[1] = '');
          version[1] = data;
        }
        version = name == 'IE' ? String(version[1].toFixed(1)) : version[0];
      }
      os = os && format(os);
    }
    // detect prerelease phases
    if (version && (data =
          /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(version) ||
          /(?:alpha|beta)(?: ?\d)?/i.exec(ua + ';' + (useFeatures && nav.appMinorVersion)) ||
          /\bMinefield\b/i.test(ua) && 'a'
        )) {
      prerelease = /b/i.test(data) ? 'beta' : 'alpha';
      version = version.replace(RegExp(data + '\\+?$'), '') +
        (prerelease == 'beta' ? beta : alpha) + (/\d+\+?/.exec(data) || '');
    }
    // detect Firefox Mobile
    if (name == 'Fennec' || name == 'Firefox' && /\b(?:Android|Firefox OS)\b/.test(os)) {
      name = 'Firefox Mobile';
    }
    // obscure Maxthon's unreliable version
    else if (name == 'Maxthon' && version) {
      version = version.replace(/\.[\d.]+/, '.x');
    }
    // detect Silk desktop/accelerated modes
    else if (name == 'Silk') {
      if (!/\bMobi/i.test(ua)) {
        os = 'Android';
        description.unshift('desktop mode');
      }
      if (/Accelerated *= *true/i.test(ua)) {
        description.unshift('accelerated');
      }
    }
    // detect Xbox 360 and Xbox One
    else if (/\bXbox\b/i.test(product)) {
      os = null;
      if (product == 'Xbox 360' && /\bIEMobile\b/.test(ua)) {
        description.unshift('mobile mode');
      }
    }
    // add mobile postfix
    else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) &&
        (os == 'Windows CE' || /Mobi/i.test(ua))) {
      name += ' Mobile';
    }
    // detect IE platform preview
    else if (name == 'IE' && useFeatures && context.external === null) {
      description.unshift('platform preview');
    }
    // detect BlackBerry OS version
    // http://docs.blackberry.com/en/developers/deliverables/18169/HTTP_headers_sent_by_BB_Browser_1234911_11.jsp
    else if ((/\bBlackBerry\b/.test(product) || /\bBB10\b/.test(ua)) && (data =
          (RegExp(product.replace(/ +/g, ' *') + '/([.\\d]+)', 'i').exec(ua) || 0)[1] ||
          version
        )) {
      data = [data, /BB10/.test(ua)];
      os = (data[1] ? (product = null, manufacturer = 'BlackBerry') : 'Device Software') + ' ' + data[0];
      version = null;
    }
    // detect Opera identifying/masking itself as another browser
    // http://www.opera.com/support/kb/view/843/
    else if (this != forOwn && (
          product != 'Wii' && (
            (useFeatures && opera) ||
            (/Opera/.test(name) && /\b(?:MSIE|Firefox)\b/i.test(ua)) ||
            (name == 'Firefox' && /\bOS X (?:\d+\.){2,}/.test(os)) ||
            (name == 'IE' && (
              (os && !/^Win/.test(os) && version > 5.5) ||
              /\bWindows XP\b/.test(os) && version > 8 ||
              version == 8 && !/\bTrident\b/.test(ua)
            ))
          )
        ) && !reOpera.test((data = parse.call(forOwn, ua.replace(reOpera, '') + ';'))) && data.name) {

      // when "indentifying", the UA contains both Opera and the other browser's name
      data = 'ing as ' + data.name + ((data = data.version) ? ' ' + data : '');
      if (reOpera.test(name)) {
        if (/\bIE\b/.test(data) && os == 'Mac OS') {
          os = null;
        }
        data = 'identify' + data;
      }
      // when "masking", the UA contains only the other browser's name
      else {
        data = 'mask' + data;
        if (operaClass) {
          name = format(operaClass.replace(/([a-z])([A-Z])/g, '$1 $2'));
        } else {
          name = 'Opera';
        }
        if (/\bIE\b/.test(data)) {
          os = null;
        }
        if (!useFeatures) {
          version = null;
        }
      }
      layout = ['Presto'];
      description.push(data);
    }
    // detect WebKit Nightly and approximate Chrome/Safari versions
    if ((data = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(ua) || 0)[1])) {
      // correct build for numeric comparison
      // (e.g. "532.5" becomes "532.05")
      data = [parseFloat(data.replace(/\.(\d)$/, '.0$1')), data];
      // nightly builds are postfixed with a `+`
      if (name == 'Safari' && data[1].slice(-1) == '+') {
        name = 'WebKit Nightly';
        prerelease = 'alpha';
        version = data[1].slice(0, -1);
      }
      // clear incorrect browser versions
      else if (version == data[1] ||
          version == (data[2] = (/\bSafari\/([\d.]+\+?)/i.exec(ua) || 0)[1])) {
        version = null;
      }
      // use the full Chrome version when available
      data[1] = (/\bChrome\/([\d.]+)/i.exec(ua) || 0)[1];
      // detect Blink layout engine
      if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && name != 'IE' && name != 'Microsoft Edge') {
        layout = ['Blink'];
      }
      // detect JavaScriptCore
      // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi
      if (!useFeatures || (!likeChrome && !data[1])) {
        layout && (layout[1] = 'like Safari');
        data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? '4+' : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : '8');
      } else {
        layout && (layout[1] = 'like Chrome');
        data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? '13+' : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? '21+' : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != 'Blink' ? '27' : '28');
      }
      // add the postfix of ".x" or "+" for approximate versions
      layout && (layout[1] += ' ' + (data += typeof data == 'number' ? '.x' : /[.+]/.test(data) ? '' : '+'));
      // obscure version for some Safari 1-2 releases
      if (name == 'Safari' && (!version || parseInt(version) > 45)) {
        version = data;
      }
    }
    // detect Opera desktop modes
    if (name == 'Opera' &&  (data = /\bzbov|zvav$/.exec(os))) {
      name += ' ';
      description.unshift('desktop mode');
      if (data == 'zvav') {
        name += 'Mini';
        version = null;
      } else {
        name += 'Mobile';
      }
      os = os.replace(RegExp(' *' + data + '$'), '');
    }
    // detect Chrome desktop mode
    else if (name == 'Safari' && /\bChrome\b/.exec(layout && layout[1])) {
      description.unshift('desktop mode');
      name = 'Chrome Mobile';
      version = null;

      if (/\bOS X\b/.test(os)) {
        manufacturer = 'Apple';
        os = 'iOS 4.3+';
      } else {
        os = null;
      }
    }
    // strip incorrect OS versions
    if (version && version.indexOf((data = /[\d.]+$/.exec(os))) == 0 &&
        ua.indexOf('/' + data + '-') > -1) {
      os = trim(os.replace(data, ''));
    }
    // add layout engine
    if (layout && !/\b(?:Avant|Nook)\b/.test(name) && (
        /Browser|Lunascape|Maxthon/.test(name) ||
        /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Sleipnir|Web)/.test(name) && layout[1])) {
      // don't add layout details to description if they are falsey
      (data = layout[layout.length - 1]) && description.push(data);
    }
    // combine contextual information
    if (description.length) {
      description = ['(' + description.join('; ') + ')'];
    }
    // append manufacturer
    if (manufacturer && product && product.indexOf(manufacturer) < 0) {
      description.push('on ' + manufacturer);
    }
    // append product
    if (product) {
      description.push((/^on /.test(description[description.length -1]) ? '' : 'on ') + product);
    }
    // parse OS into an object
    if (os) {
      data = / ([\d.+]+)$/.exec(os);
      isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == '/';
      os = {
        'architecture': 32,
        'family': (data && !isSpecialCasedOS) ? os.replace(data[0], '') : os,
        'version': data ? data[1] : null,
        'toString': function() {
          var version = this.version;
          return this.family + ((version && !isSpecialCasedOS) ? ' ' + version : '') + (this.architecture == 64 ? ' 64-bit' : '');
        }
      };
    }
    // add browser/OS architecture
    if ((data = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(arch)) && !/\bi686\b/i.test(arch)) {
      if (os) {
        os.architecture = 64;
        os.family = os.family.replace(RegExp(' *' + data), '');
      }
      if (
          name && (/\bWOW64\b/i.test(ua) ||
          (useFeatures && /\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\bWin64; x64\b/i.test(ua)))
      ) {
        description.unshift('32-bit');
      }
    }

    ua || (ua = null);

    /*------------------------------------------------------------------------*/

    /**
     * The platform object.
     *
     * @name platform
     * @type Object
     */
    var platform = {};

    /**
     * The platform description.
     *
     * @memberOf platform
     * @type string|null
     */
    platform.description = ua;

    /**
     * The name of the browser's layout engine.
     *
     * @memberOf platform
     * @type string|null
     */
    platform.layout = layout && layout[0];

    /**
     * The name of the product's manufacturer.
     *
     * @memberOf platform
     * @type string|null
     */
    platform.manufacturer = manufacturer;

    /**
     * The name of the browser/environment.
     *
     * @memberOf platform
     * @type string|null
     */
    platform.name = name;

    /**
     * The alpha/beta release indicator.
     *
     * @memberOf platform
     * @type string|null
     */
    platform.prerelease = prerelease;

    /**
     * The name of the product hosting the browser.
     *
     * @memberOf platform
     * @type string|null
     */
    platform.product = product;

    /**
     * The browser's user agent string.
     *
     * @memberOf platform
     * @type string|null
     */
    platform.ua = ua;

    /**
     * The browser/environment version.
     *
     * @memberOf platform
     * @type string|null
     */
    platform.version = name && version;

    /**
     * The name of the operating system.
     *
     * @memberOf platform
     * @type Object
     */
    platform.os = os || {

      /**
       * The CPU architecture the OS is built for.
       *
       * @memberOf platform.os
       * @type number|null
       */
      'architecture': null,

      /**
       * The family of the OS.
       *
       * Common values include:
       * "Windows", "Windows Server 2008 R2 / 7", "Windows Server 2008 / Vista",
       * "Windows XP", "OS X", "Ubuntu", "Debian", "Fedora", "Red Hat", "SuSE",
       * "Android", "iOS" and "Windows Phone"
       *
       * @memberOf platform.os
       * @type string|null
       */
      'family': null,

      /**
       * The version of the OS.
       *
       * @memberOf platform.os
       * @type string|null
       */
      'version': null,

      /**
       * Returns the OS string.
       *
       * @memberOf platform.os
       * @returns {string} The OS string.
       */
      'toString': function() { return 'null'; }
    };

    platform.parse = parse;
    platform.toString = toStringPlatform;

    if (platform.version) {
      description.unshift(version);
    }
    if (platform.name) {
      description.unshift(name);
    }
    if (os && name && !(os == String(os).split(' ')[0] && (os == name.split(' ')[0] || product))) {
      description.push(product ? '(' + os + ')' : 'on ' + os);
    }
    if (description.length) {
      platform.description = description.join(' ');
    }
    return platform;
  }

  /*--------------------------------------------------------------------------*/

  // export platform
  // some AMD build optimizers, like r.js, check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // define as an anonymous module so, through path mapping, it can be aliased
    define(function() {
      return parse();
    });
  }
  // check for `exports` after `define` in case a build optimizer adds an `exports` object
  else if (freeExports && freeModule) {
    // in Narwhal, Node.js, Rhino -require, or RingoJS
    forOwn(parse(), function(value, key) {
      freeExports[key] = value;
    });
  }
  // in a browser or Rhino
  else {
    root.platform = parse();
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],208:[function(require,module,exports){
/**
* pretty-data - nodejs plugin to pretty-print or minify data in XML, JSON and CSS formats.
*  
* Version - 0.40.0
* Copyright (c) 2012 Vadim Kiryukhin
* vkiryukhin @ gmail.com
* http://www.eslinstructor.net/pretty-data/
* 
* Dual licensed under the MIT and GPL licenses:
*   http://www.opensource.org/licenses/mit-license.php
*   http://www.gnu.org/licenses/gpl.html
*
*	pd.xml(data ) - pretty print XML;
*	pd.json(data) - pretty print JSON;
*	pd.css(data ) - pretty print CSS;
*	pd.sql(data)  - pretty print SQL;
*
*	pd.xmlmin(data [, preserveComments] ) - minify XML; 
*	pd.jsonmin(data)                      - minify JSON; 
*	pd.cssmin(data [, preserveComments] ) - minify CSS; 
*	pd.sqlmin(data)                       - minify SQL; 
*
* PARAMETERS:
*
*	@data  			- String; XML, JSON, CSS or SQL text to beautify;
* 	@preserveComments	- Bool (optional, used in minxml and mincss only); 
*				  Set this flag to true to prevent removing comments from @text; 
*	@Return 		- String;
*	
* USAGE:
*	
*	var pd  = require('pretty-data').pd;
*
*	var xml_pp   = pd.xml(xml_text);
*	var xml_min  = pd.xmlmin(xml_text [,true]);
*	var json_pp  = pd.json(json_text);
*	var json_min = pd.jsonmin(json_text);
*	var css_pp   = pd.css(css_text);
*	var css_min  = pd.cssmin(css_text [, true]);
*	var sql_pp   = pd.sql(sql_text);
*	var sql_min  = pd.sqlmin(sql_text);
*
* TEST:
*	comp-name:pretty-data$ node ./test/test_xml
*	comp-name:pretty-data$ node ./test/test_json
*	comp-name:pretty-data$ node ./test/test_css
*	comp-name:pretty-data$ node ./test/test_sql
*/


function pp() {
	this.shift = ['\n']; // array of shifts
	this.step = '  ', // 2 spaces
		maxdeep = 100, // nesting level
		ix = 0;

	// initialize array with shifts //
	for(ix=0;ix<maxdeep;ix++){
		this.shift.push(this.shift[ix]+this.step); 
	}

};	
	
// ----------------------- XML section ----------------------------------------------------

pp.prototype.xml = function(text) {

	var ar = text.replace(/>\s{0,}</g,"><")
				 .replace(/</g,"~::~<")
				 .replace(/xmlns\:/g,"~::~xmlns:")
				 .replace(/xmlns\=/g,"~::~xmlns=")
				 .split('~::~'),
		len = ar.length,
		inComment = false,
		deep = 0,
		str = '',
		ix = 0;

		for(ix=0;ix<len;ix++) {
			// start comment or <![CDATA[...]]> or <!DOCTYPE //
			if(ar[ix].search(/<!/) > -1) { 
				str += this.shift[deep]+ar[ix];
				inComment = true; 
				// end comment  or <![CDATA[...]]> //
				if(ar[ix].search(/-->/) > -1 || ar[ix].search(/\]>/) > -1 || ar[ix].search(/!DOCTYPE/) > -1 ) { 
					inComment = false; 
				}
			} else 
			// end comment  or <![CDATA[...]]> //
			if(ar[ix].search(/-->/) > -1 || ar[ix].search(/\]>/) > -1) { 
				str += ar[ix];
				inComment = false; 
			} else 
			// <elm></elm> //
			if( /^<\w/.exec(ar[ix-1]) && /^<\/\w/.exec(ar[ix]) &&
				/^<[\w:\-\.\,]+/.exec(ar[ix-1]) == /^<\/[\w:\-\.\,]+/.exec(ar[ix])[0].replace('/','')) { 
				str += ar[ix];
				if(!inComment) deep--;
			} else
			 // <elm> //
			if(ar[ix].search(/<\w/) > -1 && ar[ix].search(/<\//) == -1 && ar[ix].search(/\/>/) == -1 ) {
				str = !inComment ? str += this.shift[deep++]+ar[ix] : str += ar[ix];
			} else 
			 // <elm>...</elm> //
			if(ar[ix].search(/<\w/) > -1 && ar[ix].search(/<\//) > -1) {
				str = !inComment ? str += this.shift[deep]+ar[ix] : str += ar[ix];
			} else 
			// </elm> //
			if(ar[ix].search(/<\//) > -1) { 
				str = !inComment ? str += this.shift[--deep]+ar[ix] : str += ar[ix];
			} else 
			// <elm/> //
			if(ar[ix].search(/\/>/) > -1 ) { 
				str = !inComment ? str += this.shift[deep]+ar[ix] : str += ar[ix];
			} else 
			// <? xml ... ?> //
			if(ar[ix].search(/<\?/) > -1) { 
				str += this.shift[deep]+ar[ix];
			} else 
			// xmlns //
			if( ar[ix].search(/xmlns\:/) > -1  || ar[ix].search(/xmlns\=/) > -1) { 
				str += this.shift[deep]+ar[ix];
			} 
			
			else {
				str += ar[ix];
			}
		}
		
	return  (str[0] == '\n') ? str.slice(1) : str;
}

// ----------------------- JSON section ----------------------------------------------------

pp.prototype.json = function(text) {

	if ( typeof text === "string" ) {
		return JSON.stringify(JSON.parse(text), null, this.step);
	}
	if ( typeof text === "object" ) {
		return JSON.stringify(text, null, this.step);
	}
	return null;
}

// ----------------------- CSS section ----------------------------------------------------

pp.prototype.css = function(text) {

	var ar = text.replace(/\s{1,}/g,' ')
				.replace(/\{/g,"{~::~")
				.replace(/\}/g,"~::~}~::~")
				.replace(/\;/g,";~::~")
				.replace(/\/\*/g,"~::~/*")
				.replace(/\*\//g,"*/~::~")
				.replace(/~::~\s{0,}~::~/g,"~::~")
				.split('~::~'),
		len = ar.length,
		deep = 0,
		str = '',
		ix = 0;
		
		for(ix=0;ix<len;ix++) {

			if( /\{/.exec(ar[ix]))  { 
				str += this.shift[deep++]+ar[ix];
			} else 
			if( /\}/.exec(ar[ix]))  { 
				str += this.shift[--deep]+ar[ix];
			} else
			if( /\*\\/.exec(ar[ix]))  { 
				str += this.shift[deep]+ar[ix];
			}
			else {
				str += this.shift[deep]+ar[ix];
			}
		}
		return str.replace(/^\n{1,}/,'');
}

// ----------------------- SQL section ----------------------------------------------------

function isSubquery(str, parenthesisLevel) {
  return  parenthesisLevel - (str.replace(/\(/g,'').length - str.replace(/\)/g,'').length )
}

function split_sql(str, tab) {

    return str.replace(/\s{1,}/g," ")

        .replace(/ AND /ig,"~::~"+tab+tab+"AND ")
        .replace(/ BETWEEN /ig,"~::~"+tab+"BETWEEN ")
        .replace(/ CASE /ig,"~::~"+tab+"CASE ")
        .replace(/ ELSE /ig,"~::~"+tab+"ELSE ")
        .replace(/ END /ig,"~::~"+tab+"END ")
        .replace(/ FROM /ig,"~::~FROM ")
        .replace(/ GROUP\s{1,}BY/ig,"~::~GROUP BY ")
        .replace(/ HAVING /ig,"~::~HAVING ")
        //.replace(/ IN /ig,"~::~"+tab+"IN ")
        .replace(/ IN /ig," IN ")
        .replace(/ JOIN /ig,"~::~JOIN ")
        .replace(/ CROSS~::~{1,}JOIN /ig,"~::~CROSS JOIN ")
        .replace(/ INNER~::~{1,}JOIN /ig,"~::~INNER JOIN ")
        .replace(/ LEFT~::~{1,}JOIN /ig,"~::~LEFT JOIN ")
        .replace(/ RIGHT~::~{1,}JOIN /ig,"~::~RIGHT JOIN ")
        .replace(/ ON /ig,"~::~"+tab+"ON ")
        .replace(/ OR /ig,"~::~"+tab+tab+"OR ")
        .replace(/ ORDER\s{1,}BY/ig,"~::~ORDER BY ")
        .replace(/ OVER /ig,"~::~"+tab+"OVER ")
        .replace(/\(\s{0,}SELECT /ig,"~::~(SELECT ")
        .replace(/\)\s{0,}SELECT /ig,")~::~SELECT ")
        .replace(/ THEN /ig," THEN~::~"+tab+"")
        .replace(/ UNION /ig,"~::~UNION~::~")
        .replace(/ USING /ig,"~::~USING ")
        .replace(/ WHEN /ig,"~::~"+tab+"WHEN ")
        .replace(/ WHERE /ig,"~::~WHERE ")
        .replace(/ WITH /ig,"~::~WITH ")
        //.replace(/\,\s{0,}\(/ig,",~::~( ")
        //.replace(/\,/ig,",~::~"+tab+tab+"")
        .replace(/ ALL /ig," ALL ")
        .replace(/ AS /ig," AS ")
        .replace(/ ASC /ig," ASC ") 
        .replace(/ DESC /ig," DESC ") 
        .replace(/ DISTINCT /ig," DISTINCT ")
        .replace(/ EXISTS /ig," EXISTS ")
        .replace(/ NOT /ig," NOT ")
        .replace(/ NULL /ig," NULL ")
        .replace(/ LIKE /ig," LIKE ")
        .replace(/\s{0,}SELECT /ig,"SELECT ")
        .replace(/~::~{1,}/g,"~::~")
        .split('~::~');
}

pp.prototype.sql = function(text) {

    var ar_by_quote = text.replace(/\s{1,}/g," ")
                        .replace(/\'/ig,"~::~\'")
                        .split('~::~'),
        len = ar_by_quote.length,
        ar = [],
        deep = 0,
        tab = this.step,//+this.step,
        inComment = true,
        inQuote = false,
        parenthesisLevel = 0,
        str = '',
        ix = 0;

    for(ix=0;ix<len;ix++) {

        if(ix%2) {
            ar = ar.concat(ar_by_quote[ix]);
        } else {
            ar = ar.concat(split_sql(ar_by_quote[ix], tab) );
        }
    }

    len = ar.length;
    for(ix=0;ix<len;ix++) {

        parenthesisLevel = isSubquery(ar[ix], parenthesisLevel);

        if( /\s{0,}\s{0,}SELECT\s{0,}/.exec(ar[ix]))  { 
            ar[ix] = ar[ix].replace(/\,/g,",\n"+tab+tab+"")
        } 

        if( /\s{0,}\(\s{0,}SELECT\s{0,}/.exec(ar[ix]))  { 
            deep++;
            str += this.shift[deep]+ar[ix];
        } else 
        if( /\'/.exec(ar[ix]) )  { 
            if(parenthesisLevel<1 && deep) {
                deep--;
            }
            str += ar[ix];
        }
        else  { 
            str += this.shift[deep]+ar[ix];
            if(parenthesisLevel<1 && deep) {
                deep--;
            }
        } 
    }

    str = str.replace(/^\n{1,}/,'').replace(/\n{1,}/g,"\n");
    return str;
}

// ----------------------- min section ----------------------------------------------------

pp.prototype.xmlmin = function(text, preserveComments) {

	var str = preserveComments ? text
				   : text.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g,"");
	return  str.replace(/>\s{0,}</g,"><"); 
}

pp.prototype.jsonmin = function(text) {
								  
    return  text.replace(/\s{0,}\{\s{0,}/g,"{")
                .replace(/\s{0,}\[$/g,"[")
                .replace(/\[\s{0,}/g,"[")
                .replace(/:\s{0,}\[/g,':[')
                .replace(/\s{0,}\}\s{0,}/g,"}")
                .replace(/\s{0,}\]\s{0,}/g,"]")
                .replace(/\"\s{0,}\,/g,'",')
                .replace(/\,\s{0,}\"/g,',"')
                .replace(/\"\s{0,}:/g,'":')
                .replace(/:\s{0,}\"/g,':"')
                .replace(/:\s{0,}\[/g,':[')
                .replace(/\,\s{0,}\[/g,',[')
                .replace(/\,\s{2,}/g,', ')
                .replace(/\]\s{0,},\s{0,}\[/g,'],[');   
}

pp.prototype.cssmin = function(text, preserveComments) {
	
	var str = preserveComments ? text
				   : text.replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\//g,"") ;
	return str.replace(/\s{1,}/g,' ')
			  .replace(/\{\s{1,}/g,"{")
			  .replace(/\}\s{1,}/g,"}")
			  .replace(/\;\s{1,}/g,";")
			  .replace(/\/\*\s{1,}/g,"/*")
			  .replace(/\*\/\s{1,}/g,"*/");
}	

pp.prototype.sqlmin = function(text) {
    return text.replace(/\s{1,}/g," ").replace(/\s{1,}\(/,"(").replace(/\s{1,}\)/,")");
}

// --------------------------------------------------------------------------------------------

exports.pd= new pp;	











},{}],209:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @copyright 2013-2015 Facebook Inc.
 * @license MIT
 * @module property-information
 * @fileoverview Information for HTML properties.
 */

'use strict';

/* eslint-env commonjs */

/*
 * Constants.
 */

var USE_ATTRIBUTE = 0x1;
var USE_PROPERTY = 0x2;
var BOOLEAN_VALUE = 0x8;
var NUMERIC_VALUE = 0x10;
var POSITIVE_NUMERIC_VALUE = 0x20 | 0x10;
var OVERLOADED_BOOLEAN_VALUE = 0x40;
var SPACE_SEPARATED = 0x80;
var COMMA_SEPARATED = 0x100;

/**
 * Check a mask.
 *
 * @param {string} value - Config.
 * @param {number} bitmask - Mask.
 * @return {boolean} - Whether `mask` matches `config`.
 */
function check(value, bitmask) {
    return (value & bitmask) === bitmask;
}

/**
 * Lower-case a string.
 *
 * @param {string} value - Content.
 * @return {string} - Lower-cased `value`.
 */
function lower(value) {
    return value.toLowerCase();
}

/*
 * Map of properties.
 * Names are camel-cased properties.
 */

var propertyConfig = {
    /*
     * Standard Properties
     */
    'abbr': null,
    'accept': COMMA_SEPARATED,
    'acceptCharset': SPACE_SEPARATED,
    'accessKey': SPACE_SEPARATED,
    'action': null,
    'allowFullScreen': USE_ATTRIBUTE | BOOLEAN_VALUE,
    'allowTransparency': USE_ATTRIBUTE,
    'alt': null,
    'async': BOOLEAN_VALUE,
    'autoComplete': SPACE_SEPARATED,
    'autoFocus': BOOLEAN_VALUE,
    'autoPlay': BOOLEAN_VALUE,
    'capture': USE_ATTRIBUTE | BOOLEAN_VALUE,
    'cellPadding': null,
    'cellSpacing': null,
    'challenge': USE_ATTRIBUTE,
    'charSet': USE_ATTRIBUTE,
    'checked': USE_PROPERTY | BOOLEAN_VALUE,
    'cite': null,
    /* To set className on SVG elements, it's necessary to
     * use .setAttribute; this works on HTML elements too
     * in all browsers except IE8. */
    'className': USE_ATTRIBUTE | SPACE_SEPARATED,
    'cols': USE_ATTRIBUTE | POSITIVE_NUMERIC_VALUE,
    'colSpan': null,
    'command': null,
    'content': null,
    'contentEditable': null,
    'contextMenu': USE_ATTRIBUTE,
    'controls': USE_PROPERTY | BOOLEAN_VALUE,
    'coords': NUMERIC_VALUE | COMMA_SEPARATED,
    'crossOrigin': null,
    /* For `<object />` acts as `src`. */
    'data': null,
    'dateTime': USE_ATTRIBUTE,
    'default': BOOLEAN_VALUE,
    'defer': BOOLEAN_VALUE,
    'dir': null,
    'dirName': null,
    'disabled': USE_ATTRIBUTE | BOOLEAN_VALUE,
    'download': OVERLOADED_BOOLEAN_VALUE,
    'draggable': null,
    'dropzone': SPACE_SEPARATED,
    'encType': null,
    'form': USE_ATTRIBUTE,
    'formAction': USE_ATTRIBUTE,
    'formEncType': USE_ATTRIBUTE,
    'formMethod': USE_ATTRIBUTE,
    'formNoValidate': BOOLEAN_VALUE,
    'formTarget': USE_ATTRIBUTE,
    'frameBorder': USE_ATTRIBUTE,
    'headers': SPACE_SEPARATED,
    'height': USE_ATTRIBUTE | POSITIVE_NUMERIC_VALUE,
    'hidden': USE_ATTRIBUTE | BOOLEAN_VALUE,
    'high': NUMERIC_VALUE,
    'href': null,
    'hrefLang': null,
    'htmlFor': SPACE_SEPARATED,
    'httpEquiv': SPACE_SEPARATED,
    'icon': null,
    'id': USE_PROPERTY,
    'inputMode': USE_ATTRIBUTE,
    /* Web Components */
    'is': USE_ATTRIBUTE,
    'isMap': BOOLEAN_VALUE,
    'keyParams': USE_ATTRIBUTE,
    'keyType': USE_ATTRIBUTE,
    'kind': null,
    'label': null,
    'lang': null,
    'list': USE_ATTRIBUTE,
    'loop': USE_PROPERTY | BOOLEAN_VALUE,
    'low': NUMERIC_VALUE,
    'manifest': USE_ATTRIBUTE,
    'marginHeight': NUMERIC_VALUE,
    'marginWidth': NUMERIC_VALUE,
    'max': null,
    'maxLength': USE_ATTRIBUTE | POSITIVE_NUMERIC_VALUE,
    'media': USE_ATTRIBUTE,
    'mediaGroup': null,
    'menu': null,
    'method': null,
    'min': null,
    'minLength': USE_ATTRIBUTE | POSITIVE_NUMERIC_VALUE,
    'multiple': USE_PROPERTY | BOOLEAN_VALUE,
    'muted': USE_PROPERTY | BOOLEAN_VALUE,
    'name': null,
    'nonce': null,
    'noValidate': BOOLEAN_VALUE,
    'open': BOOLEAN_VALUE,
    'optimum': NUMERIC_VALUE,
    'pattern': null,
    'ping': SPACE_SEPARATED,
    'placeholder': null,
    'poster': null,
    'preload': null,
    'radioGroup': null,
    'readOnly': USE_PROPERTY | BOOLEAN_VALUE,
    /* property is `relList` in DOM */
    'rel': SPACE_SEPARATED | USE_ATTRIBUTE,
    'required': BOOLEAN_VALUE,
    'reversed': BOOLEAN_VALUE,
    'role': USE_ATTRIBUTE,
    'rows': USE_ATTRIBUTE | POSITIVE_NUMERIC_VALUE,
    'rowSpan': POSITIVE_NUMERIC_VALUE,
    'sandbox': SPACE_SEPARATED,
    'scope': null,
    'scoped': BOOLEAN_VALUE,
    'scrolling': null,
    'seamless': USE_ATTRIBUTE | BOOLEAN_VALUE,
    'selected': USE_PROPERTY | BOOLEAN_VALUE,
    'shape': null,
    'size': USE_ATTRIBUTE | POSITIVE_NUMERIC_VALUE,
    'sizes': USE_ATTRIBUTE | SPACE_SEPARATED,
    'sortable': BOOLEAN_VALUE,
    'sorted': SPACE_SEPARATED,
    'span': POSITIVE_NUMERIC_VALUE,
    'spellCheck': null,
    'src': null,
    'srcDoc': USE_PROPERTY,
    'srcLang': null,
    'srcSet': USE_ATTRIBUTE | COMMA_SEPARATED,
    'start': NUMERIC_VALUE,
    'step': null,
    'style': null,
    'summary': null,
    'tabIndex': NUMERIC_VALUE,
    'target': null,
    'title': null,
    'translate': null,
    'type': null,
    'typeMustMatch': BOOLEAN_VALUE,
    'useMap': null,
    'value': USE_PROPERTY,
    'volume': POSITIVE_NUMERIC_VALUE,
    'width': USE_ATTRIBUTE | NUMERIC_VALUE,
    'wmode': USE_ATTRIBUTE,
    'wrap': null,

    /*
     * Non-standard Properties
     */

    /* autoCapitalize and autoCorrect are supported in
     * Mobile Safari for keyboard hints. */
    'autoCapitalize': null,
    'autoCorrect': null,
    /* autoSave allows WebKit/Blink to persist values of
     * input fields on page reloads */
    'autoSave': null,
    /* itemProp, itemScope, itemType are for Microdata
     * support. See http://schema.org/docs/gs.html */
    'itemProp': USE_ATTRIBUTE | SPACE_SEPARATED,
    'itemScope': USE_ATTRIBUTE | BOOLEAN_VALUE,
    'itemType': USE_ATTRIBUTE | SPACE_SEPARATED,
    /* itemID and itemRef are for Microdata support as well
     * but only specified in the the WHATWG spec document.
     * See https://html.spec.whatwg.org/multipage/
     * microdata.html#microdata-dom-api
     */
    'itemID': USE_ATTRIBUTE,
    'itemRef': USE_ATTRIBUTE | SPACE_SEPARATED,
    /* property is supported for OpenGraph in meta tags. */
    'property': null,
    /* results show looking glass icon and recent searches
     * on input search fields in WebKit/Blink */
    'results': null,
    /* IE-only attribute that specifies security
     * restrictions on an iframe as an alternative to the
     * sandbox attribute on IE < 10 */
    'security': USE_ATTRIBUTE,
    /* IE-only attribute that controls focus behavior */
    'unselectable': USE_ATTRIBUTE,

    /* Ancient. */
    'xmlLang': USE_ATTRIBUTE,
    'xmlBase': USE_ATTRIBUTE
};

/*
 * Map of properties to attributes.
 * Names are lower-case properties.
 * Values are HTML attributes.
 */

var propertyToAttributeMapping = {
    'xmlbase': 'xml:base',
    'xmllang': 'xml:lang',
    'classname': 'class',
    'htmlfor': 'for',
    'httpequiv': 'http-equiv',
    'acceptcharset': 'accept-charset'
};

/*
 * Expand config.
 */

var information = {};
var property;
var name;
var config;

for (property in propertyConfig) {
    name = lower(property);
    name = propertyToAttributeMapping[name] || name;
    config = propertyConfig[property];

    information[name] = {
        'name': name,
        'propertyName': property,
        'mustUseAttribute': check(config, USE_ATTRIBUTE),
        'mustUseProperty': check(config, USE_PROPERTY),
        'boolean': check(config, BOOLEAN_VALUE),
        'overloadedBoolean': check(config, OVERLOADED_BOOLEAN_VALUE),
        'numeric': check(config, NUMERIC_VALUE),
        'positiveNumeric': check(config, POSITIVE_NUMERIC_VALUE),
        'commaSeparated': check(config, COMMA_SEPARATED),
        'spaceSeparated': check(config, SPACE_SEPARATED)
    };
}

/**
 * Get a config for a property.
 *
 * @param {string} propertyName - Property name.
 * @return {Object?} - Property config.
 */
function getPropertyInformation(propertyName) {
    var insensitive = lower(propertyName);

    return information[propertyToAttributeMapping[insensitive] || insensitive];
}

/*
 * Expose raw access.
 */

getPropertyInformation.all = information;

/*
 * Expose.
 */

module.exports = getPropertyInformation;

},{}],210:[function(require,module,exports){
'use strict';
var strictUriEncode = require('strict-uri-encode');
var objectAssign = require('object-assign');

function encode(value, opts) {
	if (opts.encode) {
		return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
	}

	return value;
}

exports.extract = function (str) {
	return str.split('?')[1] || '';
};

exports.parse = function (str) {
	// Create an object with no prototype
	// https://github.com/sindresorhus/query-string/issues/47
	var ret = Object.create(null);

	if (typeof str !== 'string') {
		return ret;
	}

	str = str.trim().replace(/^(\?|#|&)/, '');

	if (!str) {
		return ret;
	}

	str.split('&').forEach(function (param) {
		var parts = param.replace(/\+/g, ' ').split('=');
		// Firefox (pre 40) decodes `%3D` to `=`
		// https://github.com/sindresorhus/query-string/pull/37
		var key = parts.shift();
		var val = parts.length > 0 ? parts.join('=') : undefined;

		key = decodeURIComponent(key);

		// missing `=` should be `null`:
		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
		val = val === undefined ? null : decodeURIComponent(val);

		if (ret[key] === undefined) {
			ret[key] = val;
		} else if (Array.isArray(ret[key])) {
			ret[key].push(val);
		} else {
			ret[key] = [ret[key], val];
		}
	});

	return ret;
};

exports.stringify = function (obj, opts) {
	var defaults = {
		encode: true,
		strict: true
	};

	opts = objectAssign(defaults, opts);

	return obj ? Object.keys(obj).sort().map(function (key) {
		var val = obj[key];

		if (val === undefined) {
			return '';
		}

		if (val === null) {
			return encode(key, opts);
		}

		if (Array.isArray(val)) {
			var result = [];

			val.slice().forEach(function (val2) {
				if (val2 === undefined) {
					return;
				}

				if (val2 === null) {
					result.push(encode(key, opts));
				} else {
					result.push(encode(key, opts) + '=' + encode(val2, opts));
				}
			});

			return result.join('&');
		}

		return encode(key, opts) + '=' + encode(val, opts);
	}).filter(function (x) {
		return x.length > 0;
	}).join('&') : '';
};

},{"object-assign":203,"strict-uri-encode":335}],211:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],212:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],213:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":211,"./encode":212}],214:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactSideEffect = require("react-side-effect");

var _reactSideEffect2 = _interopRequireDefault(_reactSideEffect);

var _deepEqual = require("deep-equal");

var _deepEqual2 = _interopRequireDefault(_deepEqual);

var _objectAssign = require("object-assign");

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _HelmetConstantsJs = require("./HelmetConstants.js");

var _PlainComponent = require("./PlainComponent");

var _PlainComponent2 = _interopRequireDefault(_PlainComponent);

var HELMET_ATTRIBUTE = "data-react-helmet";

var encodeSpecialCharacters = function encodeSpecialCharacters(str) {
    return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
};

var getInnermostProperty = function getInnermostProperty(propsList, property) {
    var reversedPropsList = [].concat(propsList).reverse();

    for (var i = 0; i < reversedPropsList.length; i++) {
        var props = reversedPropsList[i];

        if (props[property]) {
            return props[property];
        }
    }

    return null;
};

var getTitleFromPropsList = function getTitleFromPropsList(propsList) {
    var innermostTitle = getInnermostProperty(propsList, "title");
    var innermostTemplate = getInnermostProperty(propsList, "titleTemplate");

    if (innermostTemplate && innermostTitle) {
        return innermostTemplate.replace(/\%s/g, innermostTitle);
    }

    var innermostDefaultTitle = getInnermostProperty(propsList, "defaultTitle");

    return innermostTitle || innermostDefaultTitle || "";
};

var getOnChangeClientState = function getOnChangeClientState(propsList) {
    return getInnermostProperty(propsList, "onChangeClientState") || function () {};
};

var getHtmlAttributesFromPropsList = function getHtmlAttributesFromPropsList(propsList) {
    return propsList.filter(function (props) {
        return typeof props[_HelmetConstantsJs.TAG_NAMES.HTML] !== "undefined";
    }).map(function (props) {
        return props[_HelmetConstantsJs.TAG_NAMES.HTML];
    }).reduce(function (html, current) {
        return _extends({}, html, current);
    }, {});
};

var getBaseTagFromPropsList = function getBaseTagFromPropsList(primaryAttributes, propsList) {
    return propsList.filter(function (props) {
        return typeof props[_HelmetConstantsJs.TAG_NAMES.BASE] !== "undefined";
    }).map(function (props) {
        return props[_HelmetConstantsJs.TAG_NAMES.BASE];
    }).reverse().reduce(function (innermostBaseTag, tag) {
        if (!innermostBaseTag.length) {
            var keys = Object.keys(tag);

            for (var i = 0; i < keys.length; i++) {
                var attributeKey = keys[i];
                var lowerCaseAttributeKey = attributeKey.toLowerCase();

                if (primaryAttributes.indexOf(lowerCaseAttributeKey) !== -1) {
                    return innermostBaseTag.concat(tag);
                }
            }
        }

        return innermostBaseTag;
    }, []);
};

var getTagsFromPropsList = function getTagsFromPropsList(tagName, primaryAttributes, propsList) {
    // Calculate list of tags, giving priority innermost component (end of the propslist)
    var approvedSeenTags = {};

    var tagList = propsList.filter(function (props) {
        return typeof props[tagName] !== "undefined";
    }).map(function (props) {
        return props[tagName];
    }).reverse().reduce(function (approvedTags, instanceTags) {
        var instanceSeenTags = {};

        instanceTags.filter(function (tag) {
            var primaryAttributeKey = undefined;
            var keys = Object.keys(tag);
            for (var i = 0; i < keys.length; i++) {
                var attributeKey = keys[i];
                var lowerCaseAttributeKey = attributeKey.toLowerCase();

                // Special rule with link tags, since rel and href are both primary tags, rel takes priority
                if (primaryAttributes.indexOf(lowerCaseAttributeKey) !== -1 && !(primaryAttributeKey === _HelmetConstantsJs.TAG_PROPERTIES.REL && tag[primaryAttributeKey].toLowerCase() === "canonical") && !(lowerCaseAttributeKey === _HelmetConstantsJs.TAG_PROPERTIES.REL && tag[lowerCaseAttributeKey].toLowerCase() === "stylesheet")) {
                    primaryAttributeKey = lowerCaseAttributeKey;
                }
                // Special case for innerHTML which doesn't work lowercased
                if (primaryAttributes.indexOf(attributeKey) !== -1 && (attributeKey === _HelmetConstantsJs.TAG_PROPERTIES.INNER_HTML || attributeKey === _HelmetConstantsJs.TAG_PROPERTIES.CSS_TEXT)) {
                    primaryAttributeKey = attributeKey;
                }
            }

            if (!primaryAttributeKey) {
                return false;
            }

            var value = tag[primaryAttributeKey].toLowerCase();

            if (!approvedSeenTags[primaryAttributeKey]) {
                approvedSeenTags[primaryAttributeKey] = {};
            }

            if (!instanceSeenTags[primaryAttributeKey]) {
                instanceSeenTags[primaryAttributeKey] = {};
            }

            if (!approvedSeenTags[primaryAttributeKey][value]) {
                instanceSeenTags[primaryAttributeKey][value] = true;
                return true;
            }

            return false;
        }).reverse().forEach(function (tag) {
            return approvedTags.push(tag);
        });

        // Update seen tags with tags from this instance
        var keys = Object.keys(instanceSeenTags);
        for (var i = 0; i < keys.length; i++) {
            var attributeKey = keys[i];
            var tagUnion = (0, _objectAssign2["default"])({}, approvedSeenTags[attributeKey], instanceSeenTags[attributeKey]);

            approvedSeenTags[attributeKey] = tagUnion;
        }

        return approvedTags;
    }, []).reverse();

    return tagList;
};

var updateTitle = function updateTitle(title) {
    document.title = title || document.title;
};

var updateHtmlAttributes = function updateHtmlAttributes(attributes) {
    var htmlTag = document.getElementsByTagName("html")[0];
    var helmetAttributeString = htmlTag.getAttribute(HELMET_ATTRIBUTE);
    var helmetAttributes = helmetAttributeString ? helmetAttributeString.split(",") : [];
    var attributesToRemove = [].concat(helmetAttributes);
    var attributeKeys = Object.keys(attributes);

    for (var i = 0; i < attributeKeys.length; i++) {
        var attribute = attributeKeys[i];
        var value = attributes[attribute] || "";
        htmlTag.setAttribute(attribute, value);

        if (helmetAttributes.indexOf(attribute) === -1) {
            helmetAttributes.push(attribute);
        }

        var indexToSave = attributesToRemove.indexOf(attribute);
        if (indexToSave !== -1) {
            attributesToRemove.splice(indexToSave, 1);
        }
    }

    for (var i = attributesToRemove.length - 1; i >= 0; i--) {
        htmlTag.removeAttribute(attributesToRemove[i]);
    }

    if (helmetAttributes.length === attributesToRemove.length) {
        htmlTag.removeAttribute(HELMET_ATTRIBUTE);
    } else {
        htmlTag.setAttribute(HELMET_ATTRIBUTE, helmetAttributes.join(","));
    }
};

var updateTags = function updateTags(type, tags) {
    var headElement = document.head || document.querySelector("head");
    var tagNodes = headElement.querySelectorAll(type + "[" + HELMET_ATTRIBUTE + "]");
    var oldTags = Array.prototype.slice.call(tagNodes);
    var newTags = [];
    var indexToDelete = undefined;

    if (tags && tags.length) {
        tags.forEach(function (tag) {
            var newElement = document.createElement(type);

            for (var attribute in tag) {
                if (tag.hasOwnProperty(attribute)) {
                    if (attribute === "innerHTML") {
                        newElement.innerHTML = tag.innerHTML;
                    } else if (attribute === "cssText") {
                        if (newElement.styleSheet) {
                            newElement.styleSheet.cssText = tag.cssText;
                        } else {
                            newElement.appendChild(document.createTextNode(tag.cssText));
                        }
                    } else {
                        var value = typeof tag[attribute] === "undefined" ? "" : tag[attribute];
                        newElement.setAttribute(attribute, value);
                    }
                }
            }

            newElement.setAttribute(HELMET_ATTRIBUTE, "true");

            // Remove a duplicate tag from domTagstoRemove, so it isn't cleared.
            if (oldTags.some(function (existingTag, index) {
                indexToDelete = index;
                return newElement.isEqualNode(existingTag);
            })) {
                oldTags.splice(indexToDelete, 1);
            } else {
                newTags.push(newElement);
            }
        });
    }

    oldTags.forEach(function (tag) {
        return tag.parentNode.removeChild(tag);
    });
    newTags.forEach(function (tag) {
        return headElement.appendChild(tag);
    });

    return {
        oldTags: oldTags,
        newTags: newTags
    };
};

var generateHtmlAttributesAsString = function generateHtmlAttributesAsString(attributes) {
    var keys = Object.keys(attributes);
    var attributeString = "";

    for (var i = 0; i < keys.length; i++) {
        var attribute = keys[i];
        var attr = typeof attributes[attribute] !== "undefined" ? attribute + "=\"" + attributes[attribute] + "\"" : "" + attribute;
        attributeString += attr + " ";
    }

    return attributeString.trim();
};

var generateTitleAsString = function generateTitleAsString(type, title) {
    var stringifiedMarkup = "<" + type + " " + HELMET_ATTRIBUTE + "=\"true\">" + encodeSpecialCharacters(title) + "</" + type + ">";

    return stringifiedMarkup;
};

var generateTagsAsString = function generateTagsAsString(type, tags) {
    var stringifiedMarkup = tags.map(function (tag) {
        var attributeHtml = Object.keys(tag).filter(function (attribute) {
            return !(attribute === "innerHTML" || attribute === "cssText");
        }).map(function (attribute) {
            if (typeof tag[attribute] === "undefined") {
                return attribute;
            }

            var encodedValue = encodeSpecialCharacters(tag[attribute]);
            return attribute + "=\"" + encodedValue + "\"";
        }).join(" ").trim();

        var tagContent = tag.innerHTML || tag.cssText || "";

        return "<" + type + " " + HELMET_ATTRIBUTE + "=\"true\" " + attributeHtml + (type === _HelmetConstantsJs.TAG_NAMES.SCRIPT || type === _HelmetConstantsJs.TAG_NAMES.STYLE ? ">" + tagContent + "</" + type + ">" : "/>");
    }).join("");

    return stringifiedMarkup;
};

var generateTitleAsReactComponent = function generateTitleAsReactComponent(type, title) {
    // assigning into an array to define toString function on it
    var component = [_react2["default"].createElement(_HelmetConstantsJs.TAG_NAMES.TITLE, _defineProperty({
        key: title
    }, HELMET_ATTRIBUTE, true), title)];

    return component;
};

var generateTagsAsReactComponent = function generateTagsAsReactComponent(type, tags) {
    /* eslint-disable react/display-name */
    var component = tags.map(function (tag, i) {
        var mappedTag = _defineProperty({
            key: i
        }, HELMET_ATTRIBUTE, true);

        Object.keys(tag).forEach(function (attribute) {
            var mappedAttribute = _HelmetConstantsJs.REACT_TAG_MAP[attribute] || attribute;

            if (mappedAttribute === "innerHTML" || mappedAttribute === "cssText") {
                var content = tag.innerHTML || tag.cssText;
                mappedTag.dangerouslySetInnerHTML = { __html: content };
            } else {
                mappedTag[mappedAttribute] = tag[attribute];
            }
        });

        return _react2["default"].createElement(type, mappedTag);
    });

    return component;
    /* eslint-enable react/display-name */
};

var getMethodsForTag = function getMethodsForTag(type, tags) {
    switch (type) {
        case _HelmetConstantsJs.TAG_NAMES.TITLE:
            return {
                toComponent: function toComponent() {
                    return generateTitleAsReactComponent(type, tags);
                },
                toString: function toString() {
                    return generateTitleAsString(type, tags);
                }
            };
        case _HelmetConstantsJs.TAG_NAMES.HTML:
            return {
                toComponent: function toComponent() {
                    return tags;
                },
                toString: function toString() {
                    return generateHtmlAttributesAsString(tags);
                }
            };
        default:
            return {
                toComponent: function toComponent() {
                    return generateTagsAsReactComponent(type, tags);
                },
                toString: function toString() {
                    return generateTagsAsString(type, tags);
                }
            };
    }
};

var mapStateOnServer = function mapStateOnServer(_ref) {
    var htmlAttributes = _ref.htmlAttributes;
    var title = _ref.title;
    var baseTag = _ref.baseTag;
    var metaTags = _ref.metaTags;
    var linkTags = _ref.linkTags;
    var scriptTags = _ref.scriptTags;
    var styleTags = _ref.styleTags;
    return {
        htmlAttributes: getMethodsForTag(_HelmetConstantsJs.TAG_NAMES.HTML, htmlAttributes),
        title: getMethodsForTag(_HelmetConstantsJs.TAG_NAMES.TITLE, title),
        base: getMethodsForTag(_HelmetConstantsJs.TAG_NAMES.BASE, baseTag),
        meta: getMethodsForTag(_HelmetConstantsJs.TAG_NAMES.META, metaTags),
        link: getMethodsForTag(_HelmetConstantsJs.TAG_NAMES.LINK, linkTags),
        script: getMethodsForTag(_HelmetConstantsJs.TAG_NAMES.SCRIPT, scriptTags),
        style: getMethodsForTag(_HelmetConstantsJs.TAG_NAMES.STYLE, styleTags)
    };
};

var Helmet = function Helmet(Component) {
    /* eslint-disable react/no-multi-comp */

    var HelmetWrapper = (function (_React$Component) {
        _inherits(HelmetWrapper, _React$Component);

        function HelmetWrapper() {
            _classCallCheck(this, HelmetWrapper);

            _get(Object.getPrototypeOf(HelmetWrapper.prototype), "constructor", this).apply(this, arguments);
        }

        /* eslint-enable react/no-multi-comp */

        _createClass(HelmetWrapper, [{
            key: "shouldComponentUpdate",
            value: function shouldComponentUpdate(nextProps) {
                return !(0, _deepEqual2["default"])(this.props, nextProps);
            }

            // Component.peek comes from react-side-effect:
            // For testing, you may use a static peek() method available on the returned component.
            // It lets you get the current state without resetting the mounted instance stack.
            // Don’t use it for anything other than testing.
        }, {
            key: "render",
            value: function render() {
                return _react2["default"].createElement(Component, this.props);
            }
        }], [{
            key: "propTypes",

            /**
             * @param {Object} htmlAttributes: {"lang": "en", "amp": undefined}
             * @param {String} title: "Title"
             * @param {String} defaultTitle: "Default Title"
             * @param {String} titleTemplate: "MySite.com - %s"
             * @param {Object} base: {"target": "_blank", "href": "http://mysite.com/"}
             * @param {Array} meta: [{"name": "description", "content": "Test description"}]
             * @param {Array} link: [{"rel": "canonical", "href": "http://mysite.com/example"}]
             * @param {Array} script: [{"type": "text/javascript", "src": "http://mysite.com/js/test.js"}]
             * @param {Array} style: [{"type": "text/css", "cssText": "div{ display: block; color: blue; }"}]
             * @param {Function} onChangeClientState: "(newState) => console.log(newState)"
             */
            value: {
                htmlAttributes: _react2["default"].PropTypes.object,
                title: _react2["default"].PropTypes.string,
                defaultTitle: _react2["default"].PropTypes.string,
                titleTemplate: _react2["default"].PropTypes.string,
                base: _react2["default"].PropTypes.object,
                meta: _react2["default"].PropTypes.arrayOf(_react2["default"].PropTypes.object),
                link: _react2["default"].PropTypes.arrayOf(_react2["default"].PropTypes.object),
                script: _react2["default"].PropTypes.arrayOf(_react2["default"].PropTypes.object),
                style: _react2["default"].PropTypes.arrayOf(_react2["default"].PropTypes.object),
                onChangeClientState: _react2["default"].PropTypes.func
            },
            enumerable: true
        }, {
            key: "peek",
            value: Component.peek,
            enumerable: true
        }, {
            key: "rewind",
            value: function value() {
                var mappedState = Component.rewind();
                if (!mappedState) {
                    // provide fallback if mappedState is undefined
                    mappedState = mapStateOnServer({
                        htmlAttributes: [],
                        title: "",
                        baseTag: [],
                        metaTags: [],
                        linkTags: [],
                        scriptTags: [],
                        styleTags: []
                    });
                }

                return mappedState;
            },
            enumerable: true
        }, {
            key: "canUseDOM",
            set: function set(canUseDOM) {
                Component.canUseDOM = canUseDOM;
            }
        }]);

        return HelmetWrapper;
    })(_react2["default"].Component);

    return HelmetWrapper;
};

var reducePropsToState = function reducePropsToState(propsList) {
    return {
        htmlAttributes: getHtmlAttributesFromPropsList(propsList),
        title: getTitleFromPropsList(propsList),
        baseTag: getBaseTagFromPropsList([_HelmetConstantsJs.TAG_PROPERTIES.HREF], propsList),
        metaTags: getTagsFromPropsList(_HelmetConstantsJs.TAG_NAMES.META, [_HelmetConstantsJs.TAG_PROPERTIES.NAME, _HelmetConstantsJs.TAG_PROPERTIES.CHARSET, _HelmetConstantsJs.TAG_PROPERTIES.HTTPEQUIV, _HelmetConstantsJs.TAG_PROPERTIES.PROPERTY], propsList),
        linkTags: getTagsFromPropsList(_HelmetConstantsJs.TAG_NAMES.LINK, [_HelmetConstantsJs.TAG_PROPERTIES.REL, _HelmetConstantsJs.TAG_PROPERTIES.HREF], propsList),
        scriptTags: getTagsFromPropsList(_HelmetConstantsJs.TAG_NAMES.SCRIPT, [_HelmetConstantsJs.TAG_PROPERTIES.SRC, _HelmetConstantsJs.TAG_PROPERTIES.INNER_HTML], propsList),
        styleTags: getTagsFromPropsList(_HelmetConstantsJs.TAG_NAMES.STYLE, [_HelmetConstantsJs.TAG_PROPERTIES.CSS_TEXT], propsList),
        onChangeClientState: getOnChangeClientState(propsList)
    };
};

var handleClientStateChange = function handleClientStateChange(newState) {
    var htmlAttributes = newState.htmlAttributes;
    var title = newState.title;
    var baseTag = newState.baseTag;
    var metaTags = newState.metaTags;
    var linkTags = newState.linkTags;
    var scriptTags = newState.scriptTags;
    var styleTags = newState.styleTags;
    var onChangeClientState = newState.onChangeClientState;

    updateHtmlAttributes(htmlAttributes);

    updateTitle(title);

    var tagUpdates = {
        baseTag: updateTags(_HelmetConstantsJs.TAG_NAMES.BASE, baseTag),
        metaTags: updateTags(_HelmetConstantsJs.TAG_NAMES.META, metaTags),
        linkTags: updateTags(_HelmetConstantsJs.TAG_NAMES.LINK, linkTags),
        scriptTags: updateTags(_HelmetConstantsJs.TAG_NAMES.SCRIPT, scriptTags),
        styleTags: updateTags(_HelmetConstantsJs.TAG_NAMES.STYLE, styleTags)
    };

    var addedTags = {};
    var removedTags = {};

    Object.keys(tagUpdates).forEach(function (tagType) {
        var _tagUpdates$tagType = tagUpdates[tagType];
        var newTags = _tagUpdates$tagType.newTags;
        var oldTags = _tagUpdates$tagType.oldTags;

        if (newTags.length) {
            addedTags[tagType] = newTags;
        }
        if (oldTags.length) {
            removedTags[tagType] = tagUpdates[tagType].oldTags;
        }
    });

    onChangeClientState(newState, addedTags, removedTags);
};

var SideEffect = (0, _reactSideEffect2["default"])(reducePropsToState, handleClientStateChange, mapStateOnServer);

// PlainComponent is used to be a blank component decorated by react-side-effect
exports["default"] = Helmet(SideEffect(_PlainComponent2["default"]));
module.exports = exports["default"];
},{"./HelmetConstants.js":215,"./PlainComponent":216,"deep-equal":155,"object-assign":203,"react":"react","react-side-effect":217}],215:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
    value: true
});
var TAG_NAMES = {
    HTML: "htmlAttributes",
    TITLE: "title",
    BASE: "base",
    META: "meta",
    LINK: "link",
    SCRIPT: "script",
    STYLE: "style"
};

exports.TAG_NAMES = TAG_NAMES;
var TAG_PROPERTIES = {
    NAME: "name",
    CHARSET: "charset",
    HTTPEQUIV: "http-equiv",
    REL: "rel",
    HREF: "href",
    PROPERTY: "property",
    SRC: "src",
    INNER_HTML: "innerHTML",
    CSS_TEXT: "cssText"
};

exports.TAG_PROPERTIES = TAG_PROPERTIES;
var REACT_TAG_MAP = {
    "charset": "charSet",
    "http-equiv": "httpEquiv"
};
exports.REACT_TAG_MAP = REACT_TAG_MAP;
},{}],216:[function(require,module,exports){
Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var PlainComponent = (function (_React$Component) {
    _inherits(PlainComponent, _React$Component);

    function PlainComponent() {
        _classCallCheck(this, PlainComponent);

        _get(Object.getPrototypeOf(PlainComponent.prototype), "constructor", this).apply(this, arguments);
    }

    _createClass(PlainComponent, [{
        key: "render",
        value: function render() {
            return null;
        }
    }]);

    return PlainComponent;
})(_react2["default"].Component);

exports["default"] = PlainComponent;
module.exports = exports["default"];
},{"react":"react"}],217:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _fbjsLibExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var _fbjsLibExecutionEnvironment2 = _interopRequireDefault(_fbjsLibExecutionEnvironment);

var _fbjsLibShallowEqual = require('fbjs/lib/shallowEqual');

var _fbjsLibShallowEqual2 = _interopRequireDefault(_fbjsLibShallowEqual);

module.exports = function withSideEffect(reducePropsToState, handleStateChangeOnClient, mapStateOnServer) {
  if (typeof reducePropsToState !== 'function') {
    throw new Error('Expected reducePropsToState to be a function.');
  }
  if (typeof handleStateChangeOnClient !== 'function') {
    throw new Error('Expected handleStateChangeOnClient to be a function.');
  }
  if (typeof mapStateOnServer !== 'undefined' && typeof mapStateOnServer !== 'function') {
    throw new Error('Expected mapStateOnServer to either be undefined or a function.');
  }

  function getDisplayName(WrappedComponent) {
    return WrappedComponent.displayName || WrappedComponent.name || 'Component';
  }

  return function wrap(WrappedComponent) {
    if (typeof WrappedComponent !== 'function') {
      throw new Error('Expected WrappedComponent to be a React component.');
    }

    var mountedInstances = [];
    var state = undefined;

    function emitChange() {
      state = reducePropsToState(mountedInstances.map(function (instance) {
        return instance.props;
      }));

      if (SideEffect.canUseDOM) {
        handleStateChangeOnClient(state);
      } else if (mapStateOnServer) {
        state = mapStateOnServer(state);
      }
    }

    var SideEffect = (function (_Component) {
      _inherits(SideEffect, _Component);

      function SideEffect() {
        _classCallCheck(this, SideEffect);

        _Component.apply(this, arguments);
      }

      SideEffect.peek = function peek() {
        return state;
      };

      SideEffect.rewind = function rewind() {
        if (SideEffect.canUseDOM) {
          throw new Error('You may ony call rewind() on the server. Call peek() to read the current state.');
        }

        var recordedState = state;
        state = undefined;
        mountedInstances = [];
        return recordedState;
      };

      SideEffect.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
        return !_fbjsLibShallowEqual2['default'](nextProps, this.props);
      };

      SideEffect.prototype.componentWillMount = function componentWillMount() {
        mountedInstances.push(this);
        emitChange();
      };

      SideEffect.prototype.componentDidUpdate = function componentDidUpdate() {
        emitChange();
      };

      SideEffect.prototype.componentWillUnmount = function componentWillUnmount() {
        var index = mountedInstances.indexOf(this);
        mountedInstances.splice(index, 1);
        emitChange();
      };

      SideEffect.prototype.render = function render() {
        return _react2['default'].createElement(WrappedComponent, this.props);
      };

      _createClass(SideEffect, null, [{
        key: 'displayName',

        // Try to use displayName of wrapped component
        value: 'SideEffect(' + getDisplayName(WrappedComponent) + ')',

        // Expose canUseDOM so tests can monkeypatch it
        enumerable: true
      }, {
        key: 'canUseDOM',
        value: _fbjsLibExecutionEnvironment2['default'].canUseDOM,
        enumerable: true
      }]);

      return SideEffect;
    })(_react.Component);

    return SideEffect;
  };
};
},{"fbjs/lib/ExecutionEnvironment":218,"fbjs/lib/shallowEqual":219,"react":"react"}],218:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;
},{}],219:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 * @typechecks
 * 
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  var bHasOwnProperty = hasOwnProperty.bind(objB);
  for (var i = 0; i < keysA.length; i++) {
    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
},{}],220:[function(require,module,exports){
/**
 * @author jackycute
 * @copyright 2016 jackycute
 * @license MIT
 * @module remark:gemoji
 * @fileoverview
 *   Plug-in to transform emoji syntax into gemoji
 */

'use strict';

/* eslint-env commonjs */

/*
 * Dependencies.
 */

var visit = require('unist-util-visit');
var gemoji = require('gemoji');

/*
 * Methods.
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Transformer.
 *
 * @param {Node} tree - remark node to visit.
 */
function transformer(tree) {
    visit(tree, 'text', function (node) {
        var value = node.value;
        var index = value.indexOf(':');
        var lastIndex = 0;
        var result = '';
        var subvalue;
        var next;

        while (index !== -1) {
            next = value.indexOf(':', index + 1);

            if (next !== -1) {
                subvalue = value.slice(index + 1, next);

                if (has.call(gemoji.name, subvalue)) {
                    result += value.slice(lastIndex, index) +
                        gemoji.name[subvalue].emoji;

                    lastIndex = next + 1;
                }
            }

            index = next;
        }

        if (lastIndex !== value.length) {
            result += value.slice(lastIndex);
        }

        node.value = result;
    });
}

/**
 * Attacher.
 *
 * @return {function(node)} - Transformer.
 */
function attacher() {
    return transformer;
}

/*
 * Expose.
 */

module.exports = attacher;

},{"gemoji":166,"unist-util-visit":353}],221:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse
 * @fileoverview Markdown parser.
 */

'use strict';

/* Dependencies. */
var unherit = require('unherit');
var Parser = require('./lib/parser.js');

/* Expose */
module.exports = exports = parse;
exports.Parser = Parser;

/**
 * Attacher.
 *
 * @param {unified} processor - Unified processor.
 */
function parse(processor) {
  processor.Parser = unherit(Parser);
}

},{"./lib/parser.js":235,"unherit":345}],222:[function(require,module,exports){
module.exports=[
  "article",
  "header",
  "aside",
  "hgroup",
  "blockquote",
  "hr",
  "iframe",
  "body",
  "li",
  "map",
  "button",
  "object",
  "canvas",
  "ol",
  "caption",
  "output",
  "col",
  "p",
  "colgroup",
  "pre",
  "dd",
  "progress",
  "div",
  "section",
  "dl",
  "table",
  "td",
  "dt",
  "tbody",
  "embed",
  "textarea",
  "fieldset",
  "tfoot",
  "figcaption",
  "th",
  "figure",
  "thead",
  "footer",
  "tr",
  "form",
  "ul",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "video",
  "script",
  "style"
]

},{}],223:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:decode
 * @fileoverview Decode entities.
 */

'use strict';

/* Dependencies. */
var entities = require('parse-entities');

/* Expose. */
module.exports = factory;

/**
 * Factory to create an entity decoder.
 *
 * @param {Object} ctx - Context to attach to.
 * @return {Function} - See `decode`.
 */
function factory(ctx) {
  decoder.raw = decodeRaw;

  return decoder;

  /**
   * Normalize `position` to add an `indent`.
   *
   * @param {Position} position - Reference
   * @return {Position} - Augmented with `indent`.
   */
  function normalize(position) {
    var offsets = ctx.offset;
    var line = position.line;
    var result = [];

    while (++line) {
      if (!(line in offsets)) {
        break;
      }

      result.push((offsets[line] || 0) + 1);
    }

    return {
      start: position,
      indent: result
    };
  }

  /**
   * Handle a warning.
   *
   * @this {VFile} - Virtual file.
   * @param {string} reason - Reason for warning.
   * @param {Position} position - Place of warning.
   * @param {number} code - Code for warning.
   */
  function handleWarning(reason, position, code) {
    if (code === 3) {
      return;
    }

    ctx.file.message(reason, position);
  }

  /**
   * Decode `value` (at `position`) into text-nodes.
   *
   * @param {string} value - Value to parse.
   * @param {Position} position - Position to start parsing at.
   * @param {Function} handler - Node handler.
   */
  function decoder(value, position, handler) {
    entities(value, {
      position: normalize(position),
      warning: handleWarning,
      text: handler,
      reference: handler,
      textContext: ctx,
      referenceContext: ctx
    });
  }

  /**
   * Decode `value` (at `position`) into a string.
   *
   * @param {string} value - Value to parse.
   * @param {Position} position - Position to start
   *   parsing at.
   * @return {string} - Plain-text.
   */
  function decodeRaw(value, position) {
    return entities(value, {
      position: normalize(position),
      warning: handleWarning
    });
  }
}

},{"parse-entities":205}],224:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:defaults
 * @fileoverview Default options for `parse`.
 */

'use strict';

/* Expose. */
module.exports = {
  position: true,
  gfm: true,
  yaml: true,
  commonmark: false,
  footnotes: false,
  pedantic: false,
  breaks: false
};

},{}],225:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:locate:break
 * @fileoverview Locate a break.
 */

'use strict';

/* Expose. */
module.exports = locate;

/**
 * Find a possible token.
 *
 * @param {string} value - Value to search.
 * @param {number} fromIndex - Index to start searching at.
 * @return {number} - Location.
 */
function locate(value, fromIndex) {
  var index = value.indexOf('\n', fromIndex);

  while (index > fromIndex) {
    if (value.charAt(index - 1) !== ' ') {
      break;
    }

    index--;
  }

  return index;
}

},{}],226:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:locate:code-inline
 * @fileoverview Locate inline code.
 */

'use strict';

/* Expose. */
module.exports = locate;

/**
 * Find a possible token.
 *
 * @param {string} value - Value to search.
 * @param {number} fromIndex - Index to start searching at.
 * @return {number} - Location.
 */
function locate(value, fromIndex) {
  return value.indexOf('`', fromIndex);
}

},{}],227:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:locate:delete
 * @fileoverview Locate strikethrough.
 */

'use strict';

/* Expose. */
module.exports = locate;

/**
 * Find a possible token.
 *
 * @param {string} value - Value to search.
 * @param {number} fromIndex - Index to start searching at.
 * @return {number} - Location.
 */
function locate(value, fromIndex) {
  return value.indexOf('~~', fromIndex);
}

},{}],228:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:locate:emphasis
 * @fileoverview Locate italics / emphasis.
 */

'use strict';

/* Expose. */
module.exports = locate;

/**
 * Find a possible token.
 *
 * @param {string} value - Value to search.
 * @param {number} fromIndex - Index to start searching at.
 * @return {number} - Location.
 */
function locate(value, fromIndex) {
  var asterisk = value.indexOf('*', fromIndex);
  var underscore = value.indexOf('_', fromIndex);

  if (underscore === -1) {
    return asterisk;
  }

  if (asterisk === -1) {
    return underscore;
  }

  return underscore < asterisk ? underscore : asterisk;
}

},{}],229:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:locate:escape
 * @fileoverview Locate an escape.
 */

'use strict';

/* Expose. */
module.exports = locate;

/**
 * Find a possible token.
 *
 * @param {string} value - Value to search.
 * @param {number} fromIndex - Index to start searching at.
 * @return {number} - Location.
 */
function locate(value, fromIndex) {
  return value.indexOf('\\', fromIndex);
}

},{}],230:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:locate:link
 * @fileoverview Locate a link.
 */

'use strict';

/* Expose. */
module.exports = locate;

/**
 * Find a possible token.
 *
 * @param {string} value - Value to search.
 * @param {number} fromIndex - Index to start searching at.
 * @return {number} - Location.
 */
function locate(value, fromIndex) {
  var link = value.indexOf('[', fromIndex);
  var image = value.indexOf('![', fromIndex);

  if (image === -1) {
    return link;
  }

  /* Link can never be `-1` if an image is found, so we don’t need
   * to check for that :) */
  return link < image ? link : image;
}

},{}],231:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:locate:strong
 * @fileoverview Locate bold / strong / importance.
 */

'use strict';

/* Expose. */
module.exports = locate;

/**
 * Find a possible token.
 *
 * @param {string} value - Value to search.
 * @param {number} fromIndex - Index to start searching at.
 * @return {number} - Location.
 */
function locate(value, fromIndex) {
  var asterisk = value.indexOf('**', fromIndex);
  var underscore = value.indexOf('__', fromIndex);

  if (underscore === -1) {
    return asterisk;
  }

  if (asterisk === -1) {
    return underscore;
  }

  return underscore < asterisk ? underscore : asterisk;
}

},{}],232:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:locate:tag
 * @fileoverview Locate a tag.
 */

'use strict';

/* Expose. */
module.exports = locate;

/**
 * Find a possible token.
 *
 * @param {string} value - Value to search.
 * @param {number} fromIndex - Index to start searching at.
 * @return {number} - Location.
 */
function locate(value, fromIndex) {
  return value.indexOf('<', fromIndex);
}

},{}],233:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:locate:url
 * @fileoverview Locate a URL.
 */

'use strict';

/* Expose. */
module.exports = locate;

var PROTOCOLS = ['https://', 'http://', 'mailto:'];

/**
 * Find a possible token.
 *
 * @param {string} value - Value to search.
 * @param {number} fromIndex - Index to start searching at.
 * @return {number} - Location.
 */
function locate(value, fromIndex) {
  var length = PROTOCOLS.length;
  var index = -1;
  var min = -1;
  var position;

  if (!this.options.gfm) {
    return -1;
  }

  while (++index < length) {
    position = value.indexOf(PROTOCOLS[index], fromIndex);

    if (position !== -1 && (position < min || min === -1)) {
      min = position;
    }
  }

  return min;
}

},{}],234:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:parse
 * @fileoverview Parse the document
 */

'use strict';

/* Dependencies. */
var xtend = require('xtend');
var removePosition = require('unist-util-remove-position');

/* Expose. */
module.exports = parse;

/* Characters. */
var C_NEWLINE = '\n';

/* Constants. */
var EXPRESSION_LINE_BREAKS = /\r\n|\r/g;

/**
 * Parse the bound file.
 *
 * @example
 *   new Parser(new File('_Foo_.')).parse();
 *
 * @this {Parser}
 * @return {Object} - `root` node.
 */
function parse() {
  var self = this;
  var value = String(self.file);
  var start = {line: 1, column: 1, offset: 0};
  var content = xtend(start);
  var node;

  /* Clean non-unix newlines: `\r\n` and `\r` are all
   * changed to `\n`.  This should not affect positional
   * information. */
  value = value.replace(EXPRESSION_LINE_BREAKS, C_NEWLINE);

  if (value.charCodeAt(0) === 0xFEFF) {
    value = value.slice(1);

    content.column++;
    content.offset++;
  }

  node = {
    type: 'root',
    children: self.tokenizeBlock(value, content),
    position: {
      start: start,
      end: self.eof || xtend(start)
    }
  };

  if (!self.options.position) {
    removePosition(node, true);
  }

  return node;
}

},{"unist-util-remove-position":351,"xtend":375}],235:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse
 * @fileoverview Markdown parser.
 */

'use strict';

/* Dependencies. */
var xtend = require('xtend');
var toggle = require('state-toggle');
var vfileLocation = require('vfile-location');
var unescape = require('./unescape');
var decode = require('./decode');
var tokenizer = require('./tokenizer');

/* Expose `attacher`. */
module.exports = Parser;

/**
 * Construct a new parser.
 *
 * @example
 *   var parser = new Parser(new VFile('Foo'));
 *
 * @constructor
 * @class {Parser}
 * @param {VFile} file - File to parse.
 * @param {Object?} [options] - Passed to
 *   `Parser#setOptions()`.
 */
function Parser(file, options) {
  this.file = file;
  this.offset = {};
  this.options = xtend(this.options);
  this.setOptions(options);

  this.inList = this.inBlock = this.inLink = false;
  this.atStart = true;

  this.toOffset = vfileLocation(file).toOffset;
  this.unescape = unescape(this, 'escape');
  this.decode = decode(this);
}

/* Prototype. */
var proto = Parser.prototype;

/* Expose core. */
proto.setOptions = require('./set-options');
proto.parse = require('./parse');

/* Expose `defaults`. */
proto.options = require('./defaults');

/* Enter and exit helpers. */
proto.exitStart = toggle('atStart', true);
proto.enterList = toggle('inList', false);
proto.enterLink = toggle('inLink', false);
proto.enterBlock = toggle('inBlock', false);

/* Handlers. */
proto.blockTokenizers = {
  yamlFrontMatter: require('./tokenize/yaml'),
  newline: require('./tokenize/newline'),
  indentedCode: require('./tokenize/code-indented'),
  fencedCode: require('./tokenize/code-fenced'),
  blockquote: require('./tokenize/blockquote'),
  atxHeading: require('./tokenize/heading-atx'),
  thematicBreak: require('./tokenize/thematic-break'),
  list: require('./tokenize/list'),
  setextHeading: require('./tokenize/heading-setext'),
  html: require('./tokenize/html-block'),
  footnote: require('./tokenize/footnote-definition'),
  definition: require('./tokenize/definition'),
  table: require('./tokenize/table'),
  paragraph: require('./tokenize/paragraph')
};

proto.inlineTokenizers = {
  escape: require('./tokenize/escape'),
  autoLink: require('./tokenize/auto-link'),
  url: require('./tokenize/url'),
  html: require('./tokenize/html-inline'),
  link: require('./tokenize/link'),
  reference: require('./tokenize/reference'),
  strong: require('./tokenize/strong'),
  emphasis: require('./tokenize/emphasis'),
  deletion: require('./tokenize/delete'),
  code: require('./tokenize/code-inline'),
  break: require('./tokenize/break'),
  text: require('./tokenize/text')
};

/* Expose precedence. */
proto.blockMethods = keys(proto.blockTokenizers);
proto.inlineMethods = keys(proto.inlineTokenizers);

/* Tokenizers. */
proto.tokenizeBlock = tokenizer('block');
proto.tokenizeInline = tokenizer('inline');
proto.tokenizeFactory = tokenizer;

/**
 * Get all keys in `value`.
 */
function keys(value) {
  var result = [];
  var key;

  for (key in value) {
    result.push(key);
  }

  return result;
}

},{"./decode":223,"./defaults":224,"./parse":234,"./set-options":236,"./tokenize/auto-link":237,"./tokenize/blockquote":238,"./tokenize/break":239,"./tokenize/code-fenced":240,"./tokenize/code-indented":241,"./tokenize/code-inline":242,"./tokenize/definition":243,"./tokenize/delete":244,"./tokenize/emphasis":245,"./tokenize/escape":246,"./tokenize/footnote-definition":247,"./tokenize/heading-atx":248,"./tokenize/heading-setext":249,"./tokenize/html-block":250,"./tokenize/html-inline":251,"./tokenize/link":252,"./tokenize/list":253,"./tokenize/newline":254,"./tokenize/paragraph":255,"./tokenize/reference":256,"./tokenize/strong":257,"./tokenize/table":258,"./tokenize/text":259,"./tokenize/thematic-break":260,"./tokenize/url":261,"./tokenize/yaml":262,"./tokenizer":263,"./unescape":264,"state-toggle":334,"vfile-location":356,"xtend":375}],236:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse
 * @fileoverview Markdown parser.
 */

'use strict';

/* Dependencies. */
var xtend = require('xtend');
var escapes = require('markdown-escapes');
var defaults = require('./defaults');

/* Expose `attacher`. */
module.exports = setOptions;

/**
 * Set options.  Does not overwrite previously set
 * options.
 *
 * @example
 *   var parser = new Parser();
 *   parser.setOptions({gfm: true});
 *
 * @this {Parser}
 * @throws {Error} - When an option is invalid.
 * @param {Object?} [options] - Parse settings.
 * @return {Parser} - `self`.
 */
function setOptions(options) {
  var self = this;
  var current = self.options;
  var key;
  var value;

  if (options == null) {
    options = {};
  } else if (typeof options === 'object') {
    options = xtend(options);
  } else {
    throw new Error(
      'Invalid value `' + options + '` ' +
      'for setting `options`'
    );
  }

  for (key in defaults) {
    value = options[key];

    if (value == null) {
      value = current[key];
    }

    if (typeof value !== 'boolean') {
      throw new Error(
        'Invalid value `' + value + '` ' +
        'for setting `options.' + key + '`'
      );
    }

    options[key] = value;
  }

  self.options = options;
  self.escape = escapes(options);

  return self;
}

},{"./defaults":224,"markdown-escapes":197,"xtend":375}],237:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:auto-link
 * @fileoverview Tokenise an auto-link.
 */

'use strict';

/* Dependencies. */
var decode = require('parse-entities');
var locate = require('../locate/tag');

/* Expose. */
module.exports = autoLink;
autoLink.locator = locate;
autoLink.notInLink = true;

/* Constants. */
var C_LT = '<';
var C_GT = '>';
var C_AT_SIGN = '@';
var C_SLASH = '/';
var MAILTO = 'mailto:';
var MAILTO_LENGTH = MAILTO.length;

/**
 * Tokenise a link.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `link` node.
 */
function autoLink(eat, value, silent) {
  var self;
  var subvalue;
  var length;
  var index;
  var queue;
  var character;
  var hasAtCharacter;
  var link;
  var now;
  var content;
  var tokenize;
  var exit;

  if (value.charAt(0) !== C_LT) {
    return;
  }

  self = this;
  subvalue = '';
  length = value.length;
  index = 0;
  queue = '';
  hasAtCharacter = false;
  link = '';

  index++;
  subvalue = C_LT;

  while (index < length) {
    character = value.charAt(index);

    if (
      character === ' ' ||
      character === C_GT ||
      character === C_AT_SIGN ||
      (character === ':' && value.charAt(index + 1) === C_SLASH)
    ) {
      break;
    }

    queue += character;
    index++;
  }

  if (!queue) {
    return;
  }

  link += queue;
  queue = '';

  character = value.charAt(index);
  link += character;
  index++;

  if (character === C_AT_SIGN) {
    hasAtCharacter = true;
  } else {
    if (
      character !== ':' ||
      value.charAt(index + 1) !== C_SLASH
    ) {
      return;
    }

    link += C_SLASH;
    index++;
  }

  while (index < length) {
    character = value.charAt(index);

    if (character === ' ' || character === C_GT) {
      break;
    }

    queue += character;
    index++;
  }

  character = value.charAt(index);

  if (!queue || character !== C_GT) {
    return;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  link += queue;
  content = link;
  subvalue += link + character;
  now = eat.now();
  now.column++;
  now.offset++;

  if (hasAtCharacter) {
    if (link.slice(0, MAILTO_LENGTH).toLowerCase() === MAILTO) {
      content = content.substr(MAILTO_LENGTH);
      now.column += MAILTO_LENGTH;
      now.offset += MAILTO_LENGTH;
    } else {
      link = MAILTO + link;
    }
  }

  /* Temporarily remove support for escapes in autolinks. */
  tokenize = self.inlineTokenizers.escape;
  self.inlineTokenizers.escape = null;
  exit = self.enterLink();

  content = self.tokenizeInline(content, now);

  self.inlineTokenizers.escape = tokenize;
  exit();

  return eat(subvalue)({
    type: 'link',
    title: null,
    url: decode(link),
    children: content
  });
}

},{"../locate/tag":232,"parse-entities":205}],238:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:blockquote
 * @fileoverview Tokenise blockquote.
 */

'use strict';

/* Dependencies. */
var trim = require('trim');

/* Expose. */
module.exports = blockquote;

/* Characters */
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_GT = '>';

/**
 * Tokenise a blockquote.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `blockquote` node.
 */
function blockquote(eat, value, silent) {
  var self = this;
  var commonmark = self.options.commonmark;
  var offsets = self.offset;
  var now = eat.now();
  var currentLine = now.line;
  var length = value.length;
  var values = [];
  var contents = [];
  var indents = [];
  var add;
  var tokenizers;
  var index = 0;
  var character;
  var rest;
  var nextIndex;
  var content;
  var line;
  var startIndex;
  var prefixed;
  var exit;

  while (index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE && character !== C_TAB) {
      break;
    }

    index++;
  }

  if (value.charAt(index) !== C_GT) {
    return;
  }

  if (silent) {
    return true;
  }

  tokenizers = self.blockTokenizers;
  index = 0;

  while (index < length) {
    nextIndex = value.indexOf(C_NEWLINE, index);
    startIndex = index;
    prefixed = false;

    if (nextIndex === -1) {
      nextIndex = length;
    }

    while (index < length) {
      character = value.charAt(index);

      if (character !== C_SPACE && character !== C_TAB) {
        break;
      }

      index++;
    }

    if (value.charAt(index) === C_GT) {
      index++;
      prefixed = true;

      if (value.charAt(index) === C_SPACE) {
        index++;
      }
    } else {
      index = startIndex;
    }

    content = value.slice(index, nextIndex);

    if (!prefixed && !trim(content)) {
      index = startIndex;
      break;
    }

    if (!prefixed) {
      rest = value.slice(index);

      if (
        (
          commonmark &&
          (
            tokenizers.indentedCode.call(self, eat, rest, true) ||
            tokenizers.fencedCode.call(self, eat, rest, true) ||
            tokenizers.atxHeading.call(self, eat, rest, true) ||
            tokenizers.setextHeading.call(self, eat, rest, true) ||
            tokenizers.thematicBreak.call(self, eat, rest, true) ||
            tokenizers.html.call(self, eat, rest, true) ||
            tokenizers.list.call(self, eat, rest, true)
          )
        ) ||
        (
          !commonmark &&
          (
            tokenizers.definition.call(self, eat, rest, true) ||
            tokenizers.footnote.call(self, eat, rest, true)
          )
        )
      ) {
        break;
      }
    }

    line = startIndex === index ? content : value.slice(startIndex, nextIndex);

    indents.push(index - startIndex);
    values.push(line);
    contents.push(content);

    index = nextIndex + 1;
  }

  index = -1;
  length = indents.length;
  add = eat(values.join(C_NEWLINE));

  while (++index < length) {
    offsets[currentLine] = (offsets[currentLine] || 0) + indents[index];
    currentLine++;
  }

  exit = self.enterBlock();
  contents = self.tokenizeBlock(contents.join(C_NEWLINE), now);
  exit();

  return add({
    type: 'blockquote',
    children: contents
  });
}

},{"trim":343}],239:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:break
 * @fileoverview Tokenise a break.
 */

'use strict';

/* Dependencies. */
var locate = require('../locate/break');

/* Expose. */
module.exports = hardBreak;
hardBreak.locator = locate;

/* Constants. */
var MIN_BREAK_LENGTH = 2;

/**
 * Tokenise a break.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `break` node.
 */
function hardBreak(eat, value, silent) {
  var self = this;
  var breaks = self.options.breaks;
  var length = value.length;
  var index = -1;
  var queue = '';
  var character;

  while (++index < length) {
    character = value.charAt(index);

    if (character === '\n') {
      if (!breaks && index < MIN_BREAK_LENGTH) {
        return;
      }

      /* istanbul ignore if - never used (yet) */
      if (silent) {
        return true;
      }

      queue += character;

      return eat(queue)({type: 'break'});
    }

    if (character !== ' ') {
      return;
    }

    queue += character;
  }
}

},{"../locate/break":225}],240:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:code-fenced
 * @fileoverview Tokenise fenced code.
 */

'use strict';

/* Dependencies. */
var trim = require('trim-trailing-lines');

/* Expose. */
module.exports = fencedCode;

/* Characters */
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_TILDE = '~';
var C_TICK = '`';

/* Constants */
var MIN_FENCE_COUNT = 3;
var CODE_INDENT_COUNT = 4;

/**
 * Tokenise fenced code.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `code` node.
 */
function fencedCode(eat, value, silent) {
  var self = this;
  var settings = self.options;
  var length = value.length + 1;
  var index = 0;
  var subvalue = '';
  var fenceCount;
  var marker;
  var character;
  var flag;
  var queue;
  var content;
  var exdentedContent;
  var closing;
  var exdentedClosing;
  var indent;
  var now;

  if (!settings.gfm) {
    return;
  }

  /* Eat initial spacing. */
  while (index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE && character !== C_TAB) {
      break;
    }

    subvalue += character;
    index++;
  }

  indent = index;

  /* Eat the fence. */
  character = value.charAt(index);

  if (character !== C_TILDE && character !== C_TICK) {
    return;
  }

  index++;
  marker = character;
  fenceCount = 1;
  subvalue += character;

  while (index < length) {
    character = value.charAt(index);

    if (character !== marker) {
      break;
    }

    subvalue += character;
    fenceCount++;
    index++;
  }

  if (fenceCount < MIN_FENCE_COUNT) {
    return;
  }

  /* Eat spacing before flag. */
  while (index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE && character !== C_TAB) {
      break;
    }

    subvalue += character;
    index++;
  }

  /* Eat flag. */
  flag = queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (
      character === C_NEWLINE ||
      character === C_TILDE ||
      character === C_TICK
    ) {
      break;
    }

    if (character === C_SPACE || character === C_TAB) {
      queue += character;
    } else {
      flag += queue + character;
      queue = '';
    }

    index++;
  }

  character = value.charAt(index);

  if (character && character !== C_NEWLINE) {
    return;
  }

  if (silent) {
    return true;
  }

  now = eat.now();
  now.column += subvalue.length;
  now.offset += subvalue.length;

  subvalue += flag;
  flag = self.decode.raw(self.unescape(flag), now);

  if (queue) {
    subvalue += queue;
  }

  queue = closing = exdentedClosing = content = exdentedContent = '';

  /* Eat content. */
  while (index < length) {
    character = value.charAt(index);
    content += closing;
    exdentedContent += exdentedClosing;
    closing = exdentedClosing = '';

    if (character !== C_NEWLINE) {
      content += character;
      exdentedClosing += character;
      index++;
      continue;
    }

    /* Add the newline to `subvalue` if its the first
     * character.  Otherwise, add it to the `closing`
     * queue. */
    if (content) {
      closing += character;
      exdentedClosing += character;
    } else {
      subvalue += character;
    }

    queue = '';
    index++;

    while (index < length) {
      character = value.charAt(index);

      if (character !== C_SPACE) {
        break;
      }

      queue += character;
      index++;
    }

    closing += queue;
    exdentedClosing += queue.slice(indent);

    if (queue.length >= CODE_INDENT_COUNT) {
      continue;
    }

    queue = '';

    while (index < length) {
      character = value.charAt(index);

      if (character !== marker) {
        break;
      }

      queue += character;
      index++;
    }

    closing += queue;
    exdentedClosing += queue;

    if (queue.length < fenceCount) {
      continue;
    }

    queue = '';

    while (index < length) {
      character = value.charAt(index);

      if (character !== C_SPACE && character !== C_TAB) {
        break;
      }

      closing += character;
      exdentedClosing += character;
      index++;
    }

    if (!character || character === C_NEWLINE) {
      break;
    }
  }

  subvalue += content + closing;

  return eat(subvalue)({
    type: 'code',
    lang: flag || null,
    value: trim(exdentedContent)
  });
}

},{"trim-trailing-lines":342}],241:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:code-indented
 * @fileoverview Tokenise indented code.
 */

'use strict';

/* Dependencies. */
var repeat = require('repeat-string');
var trim = require('trim-trailing-lines');

/* Expose. */
module.exports = indentedCode;

/* Characters */
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';

/* Constants */
var CODE_INDENT_COUNT = 4;
var CODE_INDENT = repeat(C_SPACE, CODE_INDENT_COUNT);

/**
 * Tokenise indented code.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `code` node.
 */
function indentedCode(eat, value, silent) {
  var index = -1;
  var length = value.length;
  var subvalue = '';
  var content = '';
  var subvalueQueue = '';
  var contentQueue = '';
  var character;
  var blankQueue;
  var indent;

  while (++index < length) {
    character = value.charAt(index);

    if (indent) {
      indent = false;

      subvalue += subvalueQueue;
      content += contentQueue;
      subvalueQueue = contentQueue = '';

      if (character === C_NEWLINE) {
        subvalueQueue = contentQueue = character;
      } else {
        subvalue += character;
        content += character;

        while (++index < length) {
          character = value.charAt(index);

          if (!character || character === C_NEWLINE) {
            contentQueue = subvalueQueue = character;
            break;
          }

          subvalue += character;
          content += character;
        }
      }
    } else if (
      character === C_SPACE &&
      value.charAt(index + 1) === character &&
      value.charAt(index + 2) === character &&
      value.charAt(index + 3) === character
    ) {
      subvalueQueue += CODE_INDENT;
      index += 3;
      indent = true;
    } else if (character === C_TAB) {
      subvalueQueue += character;
      indent = true;
    } else {
      blankQueue = '';

      while (character === C_TAB || character === C_SPACE) {
        blankQueue += character;
        character = value.charAt(++index);
      }

      if (character !== C_NEWLINE) {
        break;
      }

      subvalueQueue += blankQueue + character;
      contentQueue += character;
    }
  }

  if (content) {
    if (silent) {
      return true;
    }

    return eat(subvalue)({
      type: 'code',
      lang: null,
      value: trim(content)
    });
  }
}

},{"repeat-string":321,"trim-trailing-lines":342}],242:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:code-inline
 * @fileoverview Tokenise inline code.
 */

'use strict';

/* Dependencies. */
var whitespace = require('is-whitespace-character');
var locate = require('../locate/code-inline');

/* Expose. */
module.exports = inlineCode;
inlineCode.locator = locate;

/* Constants. */
var C_TICK = '`';

/**
 * Tokenise inline code.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `inlineCode` node.
 */
function inlineCode(eat, value, silent) {
  var length = value.length;
  var index = 0;
  var queue = '';
  var tickQueue = '';
  var contentQueue;
  var subqueue;
  var count;
  var openingCount;
  var subvalue;
  var character;
  var found;
  var next;

  while (index < length) {
    if (value.charAt(index) !== C_TICK) {
      break;
    }

    queue += C_TICK;
    index++;
  }

  if (!queue) {
    return;
  }

  subvalue = queue;
  openingCount = index;
  queue = '';
  next = value.charAt(index);
  count = 0;

  while (index < length) {
    character = next;
    next = value.charAt(index + 1);

    if (character === C_TICK) {
      count++;
      tickQueue += character;
    } else {
      count = 0;
      queue += character;
    }

    if (count && next !== C_TICK) {
      if (count === openingCount) {
        subvalue += queue + tickQueue;
        found = true;
        break;
      }

      queue += tickQueue;
      tickQueue = '';
    }

    index++;
  }

  if (!found) {
    if (openingCount % 2 !== 0) {
      return;
    }

    queue = '';
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  contentQueue = subqueue = '';
  length = queue.length;
  index = -1;

  while (++index < length) {
    character = queue.charAt(index);

    if (whitespace(character)) {
      subqueue += character;
      continue;
    }

    if (subqueue) {
      if (contentQueue) {
        contentQueue += subqueue;
      }

      subqueue = '';
    }

    contentQueue += character;
  }

  return eat(subvalue)({
    type: 'inlineCode',
    value: contentQueue
  });
}

},{"../locate/code-inline":226,"is-whitespace-character":191}],243:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:definition
 * @fileoverview Tokenise a definition.
 */

'use strict';

/* Dependencies. */
var whitespace = require('is-whitespace-character');
var normalize = require('../util/normalize');

/* Expose. */
module.exports = definition;
definition.notInList = true;
definition.notInBlock = true;

/* Characters */
var C_DOUBLE_QUOTE = '"';
var C_SINGLE_QUOTE = '\'';
var C_BACKSLASH = '\\';
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_BRACKET_OPEN = '[';
var C_BRACKET_CLOSE = ']';
var C_PAREN_OPEN = '(';
var C_PAREN_CLOSE = ')';
var C_COLON = ':';
var C_LT = '<';
var C_GT = '>';

/**
 * Tokenise a definition.
 *
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `definition` node.
 */
function definition(eat, value, silent) {
  var self = this;
  var commonmark = self.options.commonmark;
  var index = 0;
  var length = value.length;
  var subvalue = '';
  var beforeURL;
  var beforeTitle;
  var queue;
  var character;
  var test;
  var identifier;
  var url;
  var title;

  while (index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE && character !== C_TAB) {
      break;
    }

    subvalue += character;
    index++;
  }

  character = value.charAt(index);

  if (character !== C_BRACKET_OPEN) {
    return;
  }

  index++;
  subvalue += character;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (character === C_BRACKET_CLOSE) {
      break;
    } else if (character === C_BACKSLASH) {
      queue += character;
      index++;
      character = value.charAt(index);
    }

    queue += character;
    index++;
  }

  if (
    !queue ||
    value.charAt(index) !== C_BRACKET_CLOSE ||
    value.charAt(index + 1) !== C_COLON
  ) {
    return;
  }

  identifier = queue;
  subvalue += queue + C_BRACKET_CLOSE + C_COLON;
  index = subvalue.length;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (
      character !== C_TAB &&
      character !== C_SPACE &&
      character !== C_NEWLINE
    ) {
      break;
    }

    subvalue += character;
    index++;
  }

  character = value.charAt(index);
  queue = '';
  beforeURL = subvalue;

  if (character === C_LT) {
    index++;

    while (index < length) {
      character = value.charAt(index);

      if (!isEnclosedURLCharacter(character)) {
        break;
      }

      queue += character;
      index++;
    }

    character = value.charAt(index);

    if (character === isEnclosedURLCharacter.delimiter) {
      subvalue += C_LT + queue + character;
      index++;
    } else {
      if (commonmark) {
        return;
      }

      index -= queue.length + 1;
      queue = '';
    }
  }

  if (!queue) {
    while (index < length) {
      character = value.charAt(index);

      if (!isUnclosedURLCharacter(character)) {
        break;
      }

      queue += character;
      index++;
    }

    subvalue += queue;
  }

  if (!queue) {
    return;
  }

  url = queue;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (
      character !== C_TAB &&
      character !== C_SPACE &&
      character !== C_NEWLINE
    ) {
      break;
    }

    queue += character;
    index++;
  }

  character = value.charAt(index);
  test = null;

  if (character === C_DOUBLE_QUOTE) {
    test = C_DOUBLE_QUOTE;
  } else if (character === C_SINGLE_QUOTE) {
    test = C_SINGLE_QUOTE;
  } else if (character === C_PAREN_OPEN) {
    test = C_PAREN_CLOSE;
  }

  if (!test) {
    queue = '';
    index = subvalue.length;
  } else if (queue) {
    subvalue += queue + character;
    index = subvalue.length;
    queue = '';

    while (index < length) {
      character = value.charAt(index);

      if (character === test) {
        break;
      }

      if (character === C_NEWLINE) {
        index++;
        character = value.charAt(index);

        if (character === C_NEWLINE || character === test) {
          return;
        }

        queue += C_NEWLINE;
      }

      queue += character;
      index++;
    }

    character = value.charAt(index);

    if (character !== test) {
      return;
    }

    beforeTitle = subvalue;
    subvalue += queue + character;
    index++;
    title = queue;
    queue = '';
  } else {
    return;
  }

  while (index < length) {
    character = value.charAt(index);

    if (character !== C_TAB && character !== C_SPACE) {
      break;
    }

    subvalue += character;
    index++;
  }

  character = value.charAt(index);

  if (!character || character === C_NEWLINE) {
    if (silent) {
      return true;
    }

    beforeURL = eat(beforeURL).test().end;
    url = self.decode.raw(self.unescape(url), beforeURL);

    if (title) {
      beforeTitle = eat(beforeTitle).test().end;
      title = self.decode.raw(self.unescape(title), beforeTitle);
    }

    return eat(subvalue)({
      type: 'definition',
      identifier: normalize(identifier),
      title: title || null,
      url: url
    });
  }
}

/**
 * Check whether `character` can be inside an enclosed
 * URI.
 *
 * @property {string} delimiter - Closing delimiter.
 * @param {string} character - Character to test.
 * @return {boolean} - Whether `character` can be inside
 *   an enclosed URI.
 */
function isEnclosedURLCharacter(character) {
  return character !== C_GT &&
    character !== C_BRACKET_OPEN &&
    character !== C_BRACKET_CLOSE;
}

isEnclosedURLCharacter.delimiter = C_GT;

/**
 * Check whether `character` can be inside an unclosed
 * URI.
 *
 * @param {string} character - Character to test.
 * @return {boolean} - Whether `character` can be inside
 *   an unclosed URI.
 */
function isUnclosedURLCharacter(character) {
  return character !== C_BRACKET_OPEN &&
    character !== C_BRACKET_CLOSE &&
    !whitespace(character);
}

},{"../util/normalize":272,"is-whitespace-character":191}],244:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:delete
 * @fileoverview Tokenise strikethrough.
 */

'use strict';

/* Dependencies. */
var whitespace = require('is-whitespace-character');
var locate = require('../locate/delete');

/* Expose. */
module.exports = strikethrough;
strikethrough.locator = locate;

/* Constants. */
var C_TILDE = '~';
var DOUBLE = '~~';

/**
 * Tokenise strikethrough.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `delete` node.
 */
function strikethrough(eat, value, silent) {
  var self = this;
  var character = '';
  var previous = '';
  var preceding = '';
  var subvalue = '';
  var index;
  var length;
  var now;

  if (
    !self.options.gfm ||
    value.charAt(0) !== C_TILDE ||
    value.charAt(1) !== C_TILDE ||
    whitespace(value.charAt(2))
  ) {
    return;
  }

  index = 1;
  length = value.length;
  now = eat.now();
  now.column += 2;
  now.offset += 2;

  while (++index < length) {
    character = value.charAt(index);

    if (
      character === C_TILDE &&
      previous === C_TILDE &&
      (!preceding || !whitespace(preceding))
    ) {
      /* istanbul ignore if - never used (yet) */
      if (silent) {
        return true;
      }

      return eat(DOUBLE + subvalue + DOUBLE)({
        type: 'delete',
        children: self.tokenizeInline(subvalue, now)
      });
    }

    subvalue += previous;
    preceding = previous;
    previous = character;
  }
}

},{"../locate/delete":227,"is-whitespace-character":191}],245:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:emphasis
 * @fileoverview Tokenise emphasis.
 */

'use strict';

/* Dependencies. */
var trim = require('trim');
var word = require('is-word-character');
var whitespace = require('is-whitespace-character');
var locate = require('../locate/emphasis');

/* Expose. */
module.exports = emphasis;
emphasis.locator = locate;

/* Constants. */
var C_ASTERISK = '*';
var C_UNDERSCORE = '_';

/**
 * Tokenise emphasis.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `emphasis` node.
 */
function emphasis(eat, value, silent) {
  var self = this;
  var index = 0;
  var character = value.charAt(index);
  var now;
  var pedantic;
  var marker;
  var queue;
  var subvalue;
  var length;
  var prev;

  if (character !== C_ASTERISK && character !== C_UNDERSCORE) {
    return;
  }

  pedantic = self.options.pedantic;
  subvalue = marker = character;
  length = value.length;
  index++;
  queue = character = '';

  if (pedantic && whitespace(value.charAt(index))) {
    return;
  }

  while (index < length) {
    prev = character;
    character = value.charAt(index);

    if (character === marker && (!pedantic || !whitespace(prev))) {
      character = value.charAt(++index);

      if (character !== marker) {
        if (!trim(queue) || prev === marker) {
          return;
        }

        if (!pedantic && marker === C_UNDERSCORE && word(character)) {
          queue += marker;
          continue;
        }

        /* istanbul ignore if - never used (yet) */
        if (silent) {
          return true;
        }

        now = eat.now();
        now.column++;
        now.offset++;

        return eat(subvalue + queue + marker)({
          type: 'emphasis',
          children: self.tokenizeInline(queue, now)
        });
      }

      queue += marker;
    }

    if (!pedantic && character === '\\') {
      queue += character;
      character = value.charAt(++index);
    }

    queue += character;
    index++;
  }
}

},{"../locate/emphasis":228,"is-whitespace-character":191,"is-word-character":192,"trim":343}],246:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:escape
 * @fileoverview Tokenise an escape.
 */

'use strict';

/* Dependencies. */
var locate = require('../locate/escape');

/* Expose. */
module.exports = escape;
escape.locator = locate;

/**
 * Tokenise an escape.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `text` or `break` node.
 */
function escape(eat, value, silent) {
  var self = this;
  var character;
  var node;

  if (value.charAt(0) === '\\') {
    character = value.charAt(1);

    if (self.escape.indexOf(character) !== -1) {
      /* istanbul ignore if - never used (yet) */
      if (silent) {
        return true;
      }

      if (character === '\n') {
        node = {type: 'break'};
      } else {
        node = {
          type: 'text',
          value: character
        };
      }

      return eat('\\' + character)(node);
    }
  }
}

},{"../locate/escape":229}],247:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:footnote-definition
 * @fileoverview Tokenise footnote definition.
 */

'use strict';

/* Dependencies. */
var whitespace = require('is-whitespace-character');
var normalize = require('../util/normalize');

/* Expose. */
module.exports = footnoteDefinition;
footnoteDefinition.notInList = true;
footnoteDefinition.notInBlock = true;

/* Characters */
var C_BACKSLASH = '\\';
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_BRACKET_OPEN = '[';
var C_BRACKET_CLOSE = ']';
var C_CARET = '^';
var C_COLON = ':';

/* Constants. */
var EXPRESSION_INITIAL_TAB = /^( {4}|\t)?/gm;

/**
 * Tokenise a footnote definition.
 *
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `footnoteDefinition` node.
 */
function footnoteDefinition(eat, value, silent) {
  var self = this;
  var offsets = self.offset;
  var index;
  var length;
  var subvalue;
  var now;
  var currentLine;
  var content;
  var queue;
  var subqueue;
  var character;
  var identifier;
  var add;
  var exit;

  if (!self.options.footnotes) {
    return;
  }

  index = 0;
  length = value.length;
  subvalue = '';
  now = eat.now();
  currentLine = now.line;

  while (index < length) {
    character = value.charAt(index);

    if (!whitespace(character)) {
      break;
    }

    subvalue += character;
    index++;
  }

  if (
    value.charAt(index) !== C_BRACKET_OPEN ||
    value.charAt(index + 1) !== C_CARET
  ) {
    return;
  }

  subvalue += C_BRACKET_OPEN + C_CARET;
  index = subvalue.length;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (character === C_BRACKET_CLOSE) {
      break;
    } else if (character === C_BACKSLASH) {
      queue += character;
      index++;
      character = value.charAt(index);
    }

    queue += character;
    index++;
  }

  if (
    !queue ||
    value.charAt(index) !== C_BRACKET_CLOSE ||
    value.charAt(index + 1) !== C_COLON
  ) {
    return;
  }

  if (silent) {
    return true;
  }

  identifier = normalize(queue);
  subvalue += queue + C_BRACKET_CLOSE + C_COLON;
  index = subvalue.length;

  while (index < length) {
    character = value.charAt(index);

    if (character !== C_TAB && character !== C_SPACE) {
      break;
    }

    subvalue += character;
    index++;
  }

  now.column += subvalue.length;
  now.offset += subvalue.length;
  queue = content = subqueue = '';

  while (index < length) {
    character = value.charAt(index);

    if (character === C_NEWLINE) {
      subqueue = character;
      index++;

      while (index < length) {
        character = value.charAt(index);

        if (character !== C_NEWLINE) {
          break;
        }

        subqueue += character;
        index++;
      }

      queue += subqueue;
      subqueue = '';

      while (index < length) {
        character = value.charAt(index);

        if (character !== C_SPACE) {
          break;
        }

        subqueue += character;
        index++;
      }

      if (!subqueue.length) {
        break;
      }

      queue += subqueue;
    }

    if (queue) {
      content += queue;
      queue = '';
    }

    content += character;
    index++;
  }

  subvalue += content;

  content = content.replace(EXPRESSION_INITIAL_TAB, function (line) {
    offsets[currentLine] = (offsets[currentLine] || 0) + line.length;
    currentLine++;

    return '';
  });

  add = eat(subvalue);

  exit = self.enterBlock();
  content = self.tokenizeBlock(content, now);
  exit();

  return add({
    type: 'footnoteDefinition',
    identifier: identifier,
    children: content
  });
}

},{"../util/normalize":272,"is-whitespace-character":191}],248:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:heading-atx
 * @fileoverview Tokenise an ATX-style heading.
 */

'use strict';

/* Expose. */
module.exports = atxHeading;

/* Characters */
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_HASH = '#';

/* Constants. */
var MAX_ATX_COUNT = 6;

/**
 * Tokenise an ATX-style heading.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `heading` node.
 */
function atxHeading(eat, value, silent) {
  var self = this;
  var settings = self.options;
  var length = value.length + 1;
  var index = -1;
  var now = eat.now();
  var subvalue = '';
  var content = '';
  var character;
  var queue;
  var depth;

  /* Eat initial spacing. */
  while (++index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE && character !== C_TAB) {
      index--;
      break;
    }

    subvalue += character;
  }

  /* Eat hashes. */
  depth = 0;
  length = index + MAX_ATX_COUNT + 1;

  while (++index <= length) {
    character = value.charAt(index);

    if (character !== C_HASH) {
      index--;
      break;
    }

    subvalue += character;
    depth++;
  }

  if (
    !depth ||
    (!settings.pedantic && value.charAt(index + 1) === C_HASH)
  ) {
    return;
  }

  length = value.length + 1;

  /* Eat intermediate white-space. */
  queue = '';

  while (++index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE && character !== C_TAB) {
      index--;
      break;
    }

    queue += character;
  }

  /* Exit when not in pedantic mode without spacing. */
  if (
    !settings.pedantic &&
    !queue.length &&
    character &&
    character !== C_NEWLINE
  ) {
    return;
  }

  if (silent) {
    return true;
  }

  /* Eat content. */
  subvalue += queue;
  queue = content = '';

  while (++index < length) {
    character = value.charAt(index);

    if (!character || character === C_NEWLINE) {
      break;
    }

    if (
      character !== C_SPACE &&
      character !== C_TAB &&
      character !== C_HASH
    ) {
      content += queue + character;
      queue = '';
      continue;
    }

    while (character === C_SPACE || character === C_TAB) {
      queue += character;
      character = value.charAt(++index);
    }

    while (character === C_HASH) {
      queue += character;
      character = value.charAt(++index);
    }

    while (character === C_SPACE || character === C_TAB) {
      queue += character;
      character = value.charAt(++index);
    }

    index--;
  }

  now.column += subvalue.length;
  now.offset += subvalue.length;
  subvalue += content + queue;

  return eat(subvalue)({
    type: 'heading',
    depth: depth,
    children: self.tokenizeInline(content, now)
  });
}

},{}],249:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:heading-setext
 * @fileoverview Tokenise an setext-style heading.
 */

'use strict';

/* Expose. */
module.exports = setextHeading;

/* Characters */
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_EQUALS = '=';
var C_DASH = '-';

/* Constants. */
var MAX_HEADING_INDENT = 3;

/* A map of characters which can be used to mark setext
 * headers, mapping to their corresponding depth. */
var SETEXT_MARKERS = {};

SETEXT_MARKERS[C_EQUALS] = 1;
SETEXT_MARKERS[C_DASH] = 2;

/**
 * Tokenise an setext-style heading.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `heading` node.
 */
function setextHeading(eat, value, silent) {
  var self = this;
  var now = eat.now();
  var length = value.length;
  var index = -1;
  var subvalue = '';
  var content;
  var queue;
  var character;
  var marker;
  var depth;

  /* Eat initial indentation. */
  while (++index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE || index >= MAX_HEADING_INDENT) {
      index--;
      break;
    }

    subvalue += character;
  }

  /* Eat content. */
  content = queue = '';

  while (++index < length) {
    character = value.charAt(index);

    if (character === C_NEWLINE) {
      index--;
      break;
    }

    if (character === C_SPACE || character === C_TAB) {
      queue += character;
    } else {
      content += queue + character;
      queue = '';
    }
  }

  now.column += subvalue.length;
  now.offset += subvalue.length;
  subvalue += content + queue;

  /* Ensure the content is followed by a newline and a
   * valid marker. */
  character = value.charAt(++index);
  marker = value.charAt(++index);

  if (character !== C_NEWLINE || !SETEXT_MARKERS[marker]) {
    return;
  }

  subvalue += character;

  /* Eat Setext-line. */
  queue = marker;
  depth = SETEXT_MARKERS[marker];

  while (++index < length) {
    character = value.charAt(index);

    if (character !== marker) {
      if (character !== C_NEWLINE) {
        return;
      }

      index--;
      break;
    }

    queue += character;
  }

  if (silent) {
    return true;
  }

  return eat(subvalue + queue)({
    type: 'heading',
    depth: depth,
    children: self.tokenizeInline(content, now)
  });
}

},{}],250:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:html-block
 * @fileoverview Tokenise block HTML.
 */

'use strict';

/* Dependencies. */
var cdata = require('../util/match-cdata');
var comment = require('../util/match-comment');
var declaration = require('../util/match-declaration');
var instruction = require('../util/match-instruction');
var closing = require('../util/match-tag-closing');
var opening = require('../util/match-tag-opening');

/* Expose. */
module.exports = blockHTML;

/* Characters. */
var C_TAB = '\t';
var C_SPACE = ' ';
var C_NEWLINE = '\n';

/* Constants. */
var MIN_CLOSING_HTML_NEWLINE_COUNT = 2;

/**
 * Tokenise block HTML.
 *
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `html` node.
 */
function blockHTML(eat, value, silent) {
  var self = this;
  var index = 0;
  var length = value.length;
  var subvalue = '';
  var offset;
  var character;
  var queue;

  /* Eat initial spacing. */
  while (index < length) {
    character = value.charAt(index);

    if (character !== C_TAB && character !== C_SPACE) {
      break;
    }

    subvalue += character;
    index++;
  }

  offset = index;
  value = value.slice(offset);

  /* Try to eat an HTML thing. */
  queue = comment(value, self.options) ||
    cdata(value) ||
    instruction(value) ||
    declaration(value) ||
    closing(value, true) ||
    opening(value, true);

  if (!queue) {
    return;
  }

  if (silent) {
    return true;
  }

  subvalue += queue;
  index = subvalue.length - offset;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (character === C_NEWLINE) {
      queue += character;
    } else if (queue.length < MIN_CLOSING_HTML_NEWLINE_COUNT) {
      subvalue += queue + character;
      queue = '';
    } else {
      break;
    }

    index++;
  }

  return eat(subvalue)({
    type: 'html',
    value: subvalue
  });
}

},{"../util/match-cdata":266,"../util/match-comment":267,"../util/match-declaration":268,"../util/match-instruction":269,"../util/match-tag-closing":270,"../util/match-tag-opening":271}],251:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:html-inline
 * @fileoverview Tokenise inline HTML.
 */

'use strict';

/* Dependencies. */
var locate = require('../locate/tag');
var cdata = require('../util/match-cdata');
var comment = require('../util/match-comment');
var declaration = require('../util/match-declaration');
var instruction = require('../util/match-instruction');
var closing = require('../util/match-tag-closing');
var opening = require('../util/match-tag-opening');

/* Expose. */
module.exports = inlineHTML;
inlineHTML.locator = locate;

/* Constants. */
var EXPRESSION_HTML_LINK_OPEN = /^<a /i;
var EXPRESSION_HTML_LINK_CLOSE = /^<\/a>/i;

/**
 * Tokenise inline HTML.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `html` node.
 */
function inlineHTML(eat, value, silent) {
  var self = this;
  var subvalue = comment(value, self.options) ||
    cdata(value) ||
    instruction(value) ||
    declaration(value) ||
    closing(value) ||
    opening(value);

  if (!subvalue) {
    return;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  if (!self.inLink && EXPRESSION_HTML_LINK_OPEN.test(subvalue)) {
    self.inLink = true;
  } else if (self.inLink && EXPRESSION_HTML_LINK_CLOSE.test(subvalue)) {
    self.inLink = false;
  }

  return eat(subvalue)({
    type: 'html',
    value: subvalue
  });
}

},{"../locate/tag":232,"../util/match-cdata":266,"../util/match-comment":267,"../util/match-declaration":268,"../util/match-instruction":269,"../util/match-tag-closing":270,"../util/match-tag-opening":271}],252:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:link
 * @fileoverview Tokenise a link.
 */

'use strict';

/* Dependencies. */
var has = require('has');
var whitespace = require('is-whitespace-character');
var locate = require('../locate/link');

/* Expose. */
module.exports = link;
link.locator = locate;

/* Constants. */
var C_BACKSLASH = '\\';
var C_BRACKET_OPEN = '[';
var C_BRACKET_CLOSE = ']';
var C_PAREN_OPEN = '(';
var C_PAREN_CLOSE = ')';
var C_LT = '<';
var C_GT = '>';
var C_TICK = '`';
var C_DOUBLE_QUOTE = '"';
var C_SINGLE_QUOTE = '\'';

/* A map of characters, which can be used to mark link
 * and image titles. */
var LINK_MARKERS = {};

LINK_MARKERS[C_DOUBLE_QUOTE] = C_DOUBLE_QUOTE;
LINK_MARKERS[C_SINGLE_QUOTE] = C_SINGLE_QUOTE;

/* A map of characters, which can be used to mark link
 * and image titles in commonmark-mode. */
var COMMONMARK_LINK_MARKERS = {};

COMMONMARK_LINK_MARKERS[C_DOUBLE_QUOTE] = C_DOUBLE_QUOTE;
COMMONMARK_LINK_MARKERS[C_SINGLE_QUOTE] = C_SINGLE_QUOTE;
COMMONMARK_LINK_MARKERS[C_PAREN_OPEN] = C_PAREN_CLOSE;

/**
 * Tokenise a link.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `link` node.
 */
function link(eat, value, silent) {
  var self = this;
  var subvalue = '';
  var index = 0;
  var character = value.charAt(0);
  var commonmark = self.options.commonmark;
  var gfm = self.options.gfm;
  var closed;
  var count;
  var opening;
  var beforeURL;
  var beforeTitle;
  var subqueue;
  var hasMarker;
  var markers;
  var isImage;
  var content;
  var marker;
  var length;
  var title;
  var depth;
  var queue;
  var url;
  var now;
  var exit;
  var node;

  /* Detect whether this is an image. */
  if (character === '!') {
    isImage = true;
    subvalue = character;
    character = value.charAt(++index);
  }

  /* Eat the opening. */
  if (character !== C_BRACKET_OPEN) {
    return;
  }

  /* Exit when this is a link and we’re already inside
   * a link. */
  if (!isImage && self.inLink) {
    return;
  }

  subvalue += character;
  queue = '';
  index++;

  /* Eat the content. */
  length = value.length;
  now = eat.now();
  depth = 0;

  now.column += index;
  now.offset += index;

  while (index < length) {
    subqueue = character = value.charAt(index);

    if (character === C_TICK) {
      /* Inline-code in link content. */
      count = 1;

      while (value.charAt(index + 1) === C_TICK) {
        subqueue += character;
        index++;
        count++;
      }

      if (!opening) {
        opening = count;
      } else if (count >= opening) {
        opening = 0;
      }
    } else if (character === C_BACKSLASH) {
      /* Allow brackets to be escaped. */
      index++;
      subqueue += value.charAt(index);
    /* In GFM mode, brackets in code still count.
     * In all other modes, they don’t.  This empty
     * block prevents the next statements are
     * entered. */
    } else if ((!opening || gfm) && character === C_BRACKET_OPEN) {
      depth++;
    } else if ((!opening || gfm) && character === C_BRACKET_CLOSE) {
      if (depth) {
        depth--;
      } else {
        /* Allow white-space between content and
         * url in GFM mode. */
        if (gfm) {
          while (index < length) {
            character = value.charAt(index + 1);

            if (!whitespace(character)) {
              break;
            }

            subqueue += character;
            index++;
          }
        }

        if (value.charAt(index + 1) !== C_PAREN_OPEN) {
          return;
        }

        subqueue += C_PAREN_OPEN;
        closed = true;
        index++;

        break;
      }
    }

    queue += subqueue;
    subqueue = '';
    index++;
  }

  /* Eat the content closing. */
  if (!closed) {
    return;
  }

  content = queue;
  subvalue += queue + subqueue;
  index++;

  /* Eat white-space. */
  while (index < length) {
    character = value.charAt(index);

    if (!whitespace(character)) {
      break;
    }

    subvalue += character;
    index++;
  }

  /* Eat the URL. */
  character = value.charAt(index);
  markers = commonmark ? COMMONMARK_LINK_MARKERS : LINK_MARKERS;
  queue = '';
  beforeURL = subvalue;

  if (character === C_LT) {
    index++;
    beforeURL += C_LT;

    while (index < length) {
      character = value.charAt(index);

      if (character === C_GT) {
        break;
      }

      if (commonmark && character === '\n') {
        return;
      }

      queue += character;
      index++;
    }

    if (value.charAt(index) !== C_GT) {
      return;
    }

    subvalue += C_LT + queue + C_GT;
    url = queue;
    index++;
  } else {
    character = null;
    subqueue = '';

    while (index < length) {
      character = value.charAt(index);

      if (subqueue && has(markers, character)) {
        break;
      }

      if (whitespace(character)) {
        if (commonmark) {
          break;
        }

        subqueue += character;
      } else {
        if (character === C_PAREN_OPEN) {
          depth++;
        } else if (character === C_PAREN_CLOSE) {
          if (depth === 0) {
            break;
          }

          depth--;
        }

        queue += subqueue;
        subqueue = '';

        if (character === C_BACKSLASH) {
          queue += C_BACKSLASH;
          character = value.charAt(++index);
        }

        queue += character;
      }

      index++;
    }

    subvalue += queue;
    url = queue;
    index = subvalue.length;
  }

  /* Eat white-space. */
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (!whitespace(character)) {
      break;
    }

    queue += character;
    index++;
  }

  character = value.charAt(index);
  subvalue += queue;

  /* Eat the title. */
  if (queue && has(markers, character)) {
    index++;
    subvalue += character;
    queue = '';
    marker = markers[character];
    beforeTitle = subvalue;

    /* In commonmark-mode, things are pretty easy: the
     * marker cannot occur inside the title.
     *
     * Non-commonmark does, however, support nested
     * delimiters. */
    if (commonmark) {
      while (index < length) {
        character = value.charAt(index);

        if (character === marker) {
          break;
        }

        if (character === C_BACKSLASH) {
          queue += C_BACKSLASH;
          character = value.charAt(++index);
        }

        index++;
        queue += character;
      }

      character = value.charAt(index);

      if (character !== marker) {
        return;
      }

      title = queue;
      subvalue += queue + character;
      index++;

      while (index < length) {
        character = value.charAt(index);

        if (!whitespace(character)) {
          break;
        }

        subvalue += character;
        index++;
      }
    } else {
      subqueue = '';

      while (index < length) {
        character = value.charAt(index);

        if (character === marker) {
          if (hasMarker) {
            queue += marker + subqueue;
            subqueue = '';
          }

          hasMarker = true;
        } else if (!hasMarker) {
          queue += character;
        } else if (character === C_PAREN_CLOSE) {
          subvalue += queue + marker + subqueue;
          title = queue;
          break;
        } else if (whitespace(character)) {
          subqueue += character;
        } else {
          queue += marker + subqueue + character;
          subqueue = '';
          hasMarker = false;
        }

        index++;
      }
    }
  }

  if (value.charAt(index) !== C_PAREN_CLOSE) {
    return;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  subvalue += C_PAREN_CLOSE;

  url = self.decode.raw(self.unescape(url), eat(beforeURL).test().end);

  if (title) {
    beforeTitle = eat(beforeTitle).test().end;
    title = self.decode.raw(self.unescape(title), beforeTitle);
  }

  node = {
    type: isImage ? 'image' : 'link',
    title: title || null,
    url: url
  };

  if (isImage) {
    node.alt = self.decode.raw(self.unescape(content), now) || null;
  } else {
    exit = self.enterLink();
    node.children = self.tokenizeInline(content, now);
    exit();
  }

  return eat(subvalue)(node);
}

},{"../locate/link":230,"has":167,"is-whitespace-character":191}],253:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:list
 * @fileoverview Tokenise a list.
 */

'use strict';

/* eslint-disable max-params */

/* Dependencies. */
var trim = require('trim');
var repeat = require('repeat-string');
var decimal = require('is-decimal');
var getIndent = require('../util/get-indentation');
var removeIndent = require('../util/remove-indentation');

/* Expose. */
module.exports = list;

/* Characters. */
var C_ASTERISK = '*';
var C_UNDERSCORE = '_';
var C_PLUS = '+';
var C_DASH = '-';
var C_DOT = '.';
var C_SPACE = ' ';
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_PAREN_CLOSE = ')';
var C_X_LOWER = 'x';

/* Constants. */
var TAB_SIZE = 4;
var EXPRESSION_LOOSE_LIST_ITEM = /\n\n(?!\s*$)/;
var EXPRESSION_TASK_ITEM = /^\[([ \t]|x|X)\][ \t]/;
var EXPRESSION_BULLET = /^([ \t]*)([*+-]|\d+[.)])( {1,4}(?! )| |\t|$|(?=\n))([^\n]*)/;
var EXPRESSION_PEDANTIC_BULLET = /^([ \t]*)([*+-]|\d+[.)])([ \t]+)/;
var EXPRESSION_INITIAL_INDENT = /^( {1,4}|\t)?/gm;

/* A map of characters which can be used to mark
 * list-items. */
var LIST_UNORDERED_MARKERS = {};

LIST_UNORDERED_MARKERS[C_ASTERISK] = true;
LIST_UNORDERED_MARKERS[C_PLUS] = true;
LIST_UNORDERED_MARKERS[C_DASH] = true;

/* A map of characters which can be used to mark
 * list-items after a digit. */
var LIST_ORDERED_MARKERS = {};

LIST_ORDERED_MARKERS[C_DOT] = true;

/* A map of characters which can be used to mark
 * list-items after a digit. */
var LIST_ORDERED_COMMONMARK_MARKERS = {};

LIST_ORDERED_COMMONMARK_MARKERS[C_DOT] = true;
LIST_ORDERED_COMMONMARK_MARKERS[C_PAREN_CLOSE] = true;

/**
 * Tokenise a list.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `list` node.
 */
function list(eat, value, silent) {
  var self = this;
  var commonmark = self.options.commonmark;
  var pedantic = self.options.pedantic;
  var tokenizers = self.blockTokenizers;
  var markers;
  var index = 0;
  var length = value.length;
  var start = null;
  var queue;
  var ordered;
  var character;
  var marker;
  var nextIndex;
  var startIndex;
  var prefixed;
  var currentMarker;
  var content;
  var line;
  var prevEmpty;
  var empty;
  var items;
  var allLines;
  var emptyLines;
  var item;
  var enterTop;
  var exitBlockquote;
  var isLoose;
  var node;
  var now;
  var end;
  var indented;
  var size;

  while (index < length) {
    character = value.charAt(index);

    if (character !== C_SPACE && character !== C_TAB) {
      break;
    }

    index++;
  }

  character = value.charAt(index);

  markers = commonmark ?
    LIST_ORDERED_COMMONMARK_MARKERS :
    LIST_ORDERED_MARKERS;

  if (LIST_UNORDERED_MARKERS[character] === true) {
    marker = character;
    ordered = false;
  } else {
    ordered = true;
    queue = '';

    while (index < length) {
      character = value.charAt(index);

      if (!decimal(character)) {
        break;
      }

      queue += character;
      index++;
    }

    character = value.charAt(index);

    if (!queue || markers[character] !== true) {
      return;
    }

    start = parseInt(queue, 10);
    marker = character;
  }

  character = value.charAt(++index);

  if (character !== C_SPACE && character !== C_TAB) {
    return;
  }

  if (silent) {
    return true;
  }

  index = 0;
  items = [];
  allLines = [];
  emptyLines = [];

  while (index < length) {
    nextIndex = value.indexOf(C_NEWLINE, index);
    startIndex = index;
    prefixed = false;
    indented = false;

    if (nextIndex === -1) {
      nextIndex = length;
    }

    end = index + TAB_SIZE;
    size = 0;

    while (index < length) {
      character = value.charAt(index);

      if (character === C_TAB) {
        size += TAB_SIZE - (size % TAB_SIZE);
      } else if (character === C_SPACE) {
        size++;
      } else {
        break;
      }

      index++;
    }

    if (size >= TAB_SIZE) {
      indented = true;
    }

    if (item && size >= item.indent) {
      indented = true;
    }

    character = value.charAt(index);
    currentMarker = null;

    if (!indented) {
      if (LIST_UNORDERED_MARKERS[character] === true) {
        currentMarker = character;
        index++;
        size++;
      } else {
        queue = '';

        while (index < length) {
          character = value.charAt(index);

          if (!decimal(character)) {
            break;
          }

          queue += character;
          index++;
        }

        character = value.charAt(index);
        index++;

        if (queue && markers[character] === true) {
          currentMarker = character;
          size += queue.length + 1;
        }
      }

      if (currentMarker) {
        character = value.charAt(index);

        if (character === C_TAB) {
          size += TAB_SIZE - (size % TAB_SIZE);
          index++;
        } else if (character === C_SPACE) {
          end = index + TAB_SIZE;

          while (index < end) {
            if (value.charAt(index) !== C_SPACE) {
              break;
            }

            index++;
            size++;
          }

          if (index === end && value.charAt(index) === C_SPACE) {
            index -= TAB_SIZE - 1;
            size -= TAB_SIZE - 1;
          }
        } else if (character !== C_NEWLINE && character !== '') {
          currentMarker = null;
        }
      }
    }

    if (currentMarker) {
      if (commonmark && marker !== currentMarker) {
        break;
      }

      prefixed = true;
    } else {
      if (!commonmark && !indented && value.charAt(startIndex) === C_SPACE) {
        indented = true;
      } else if (commonmark && item) {
        indented = size >= item.indent || size > TAB_SIZE;
      }

      prefixed = false;
      index = startIndex;
    }

    line = value.slice(startIndex, nextIndex);
    content = startIndex === index ? line : value.slice(index, nextIndex);

    if (
      currentMarker === C_ASTERISK ||
      currentMarker === C_UNDERSCORE ||
      currentMarker === C_DASH
    ) {
      if (tokenizers.thematicBreak.call(self, eat, line, true)) {
        break;
      }
    }

    prevEmpty = empty;
    empty = !trim(content).length;

    if (indented && item) {
      item.value = item.value.concat(emptyLines, line);
      allLines = allLines.concat(emptyLines, line);
      emptyLines = [];
    } else if (prefixed) {
      if (emptyLines.length) {
        item.value.push('');
        item.trail = emptyLines.concat();
      }

      item = {
        value: [line],
        indent: size,
        trail: []
      };

      items.push(item);
      allLines = allLines.concat(emptyLines, line);
      emptyLines = [];
    } else if (empty) {
      if (prevEmpty) {
        break;
      }

      emptyLines.push(line);
    } else {
      if (prevEmpty) {
        break;
      }

      if (
          !pedantic &&
          (
            tokenizers.fencedCode.call(self, eat, line, true) ||
            tokenizers.thematicBreak.call(self, eat, line, true)
          )
      ) {
        break;
      }

      if (!commonmark) {
        if (
          tokenizers.definition.call(self, eat, line, true) ||
          tokenizers.footnote.call(self, eat, line, true)
        ) {
          break;
        }
      }

      item.value = item.value.concat(emptyLines, line);
      allLines = allLines.concat(emptyLines, line);
      emptyLines = [];
    }

    index = nextIndex + 1;
  }

  node = eat(allLines.join(C_NEWLINE)).reset({
    type: 'list',
    ordered: ordered,
    start: start,
    loose: null,
    children: []
  });

  enterTop = self.enterList();
  exitBlockquote = self.enterBlock();
  isLoose = false;
  index = -1;
  length = items.length;

  while (++index < length) {
    item = items[index].value.join(C_NEWLINE);
    now = eat.now();

    item = eat(item)(listItem(self, item, now), node);

    if (item.loose) {
      isLoose = true;
    }

    item = items[index].trail.join(C_NEWLINE);

    if (index !== length - 1) {
      item += C_NEWLINE;
    }

    eat(item);
  }

  enterTop();
  exitBlockquote();

  node.loose = isLoose;

  return node;
}

/**
 * Create a list-item node.
 *
 * @example
 *   listItem('- _foo_', now());
 *
 * @param {Object} ctx - Parser.
 * @param {Object} value - List-item.
 * @param {Object} position - List-item location.
 * @return {Object} - `listItem` node.
 */
function listItem(ctx, value, position) {
  var offsets = ctx.offset;
  var fn = ctx.options.pedantic ? pedanticListItem : normalListItem;
  var checked = null;
  var task;
  var indent;

  value = fn.apply(null, arguments);

  if (ctx.options.gfm) {
    task = value.match(EXPRESSION_TASK_ITEM);

    if (task) {
      indent = task[0].length;
      checked = task[1].toLowerCase() === C_X_LOWER;
      offsets[position.line] += indent;
      value = value.slice(indent);
    }
  }

  return {
    type: 'listItem',
    loose: EXPRESSION_LOOSE_LIST_ITEM.test(value) ||
      value.charAt(value.length - 1) === C_NEWLINE,
    checked: checked,
    children: ctx.tokenizeBlock(value, position)
  };
}

/**
 * Create a list-item using overly simple mechanics.
 *
 * @example
 *   renderPedanticListItem('- _foo_', now());
 *
 * @param {Object} ctx - Parser.
 * @param {string} value - List-item.
 * @param {Object} position - List-item location.
 * @return {string} - Cleaned `value`.
 */
function pedanticListItem(ctx, value, position) {
  var offsets = ctx.offset;
  var line = position.line;

  /**
   * A simple replacer which removed all matches,
   * and adds their length to `offset`.
   *
   * @param {string} $0 - Indentation to subtract.
   * @return {string} - An empty string.
   */
  function replacer($0) {
    offsets[line] = (offsets[line] || 0) + $0.length;
    line++;

    return '';
  }

  /* Remove the list-item’s bullet. */
  value = value.replace(EXPRESSION_PEDANTIC_BULLET, replacer);

  /* The initial line was also matched by the below, so
   * we reset the `line`. */
  line = position.line;

  return value.replace(EXPRESSION_INITIAL_INDENT, replacer);
}

/**
 * Create a list-item using sane mechanics.
 *
 * @example
 *   renderNormalListItem('- _foo_', now());
 *
 * @param {Object} ctx - Parser.
 * @param {string} value - List-item.
 * @param {Object} position - List-item location.
 * @return {string} - Cleaned `value`.
 */
function normalListItem(ctx, value, position) {
  var offsets = ctx.offset;
  var line = position.line;
  var max;
  var bullet;
  var rest;
  var lines;
  var trimmedLines;
  var index;
  var length;

  /* Remove the list-item’s bullet. */
  value = value.replace(EXPRESSION_BULLET, function ($0, $1, $2, $3, $4) {
    bullet = $1 + $2 + $3;
    rest = $4;

    /* Make sure that the first nine numbered list items
     * can indent with an extra space.  That is, when
     * the bullet did not receive an extra final space. */
    if (Number($2) < 10 && bullet.length % 2 === 1) {
      $2 = C_SPACE + $2;
    }

    max = $1 + repeat(C_SPACE, $2.length) + $3;

    return max + rest;
  });

  lines = value.split(C_NEWLINE);

  trimmedLines = removeIndent(value, getIndent(max).indent).split(C_NEWLINE);

  /* We replaced the initial bullet with something
   * else above, which was used to trick
   * `removeIndentation` into removing some more
   * characters when possible.  However, that could
   * result in the initial line to be stripped more
   * than it should be. */
  trimmedLines[0] = rest;

  offsets[line] = (offsets[line] || 0) + bullet.length;
  line++;

  index = 0;
  length = lines.length;

  while (++index < length) {
    offsets[line] = (offsets[line] || 0) +
      lines[index].length - trimmedLines[index].length;
    line++;
  }

  return trimmedLines.join(C_NEWLINE);
}

},{"../util/get-indentation":265,"../util/remove-indentation":273,"is-decimal":189,"repeat-string":321,"trim":343}],254:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:newline
 * @fileoverview Tokenise a newline.
 */

'use strict';

/* Dependencies. */
var whitespace = require('is-whitespace-character');

/* Expose. */
module.exports = newline;

/**
 * Tokenise newline.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {boolean?} - boolean in silent mode, nothing otherwise.
 */
function newline(eat, value, silent) {
  var character = value.charAt(0);
  var length;
  var subvalue;
  var queue;
  var index;

  if (character !== '\n') {
    return;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  index = 1;
  length = value.length;
  subvalue = character;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (!whitespace(character)) {
      break;
    }

    queue += character;

    if (character === '\n') {
      subvalue += queue;
      queue = '';
    }

    index++;
  }

  eat(subvalue);
}

},{"is-whitespace-character":191}],255:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:paragraph
 * @fileoverview Tokenise a paragraph.
 */

'use strict';

/* Dependencies. */
var trim = require('trim');
var decimal = require('is-decimal');
var trimTrailingLines = require('trim-trailing-lines');

/* Expose. */
module.exports = paragraph;

/* Characters. */
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';

/* Constants. */
var TAB_SIZE = 4;

/**
 * Tokenise paragraph.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {boolean?} - boolean in silent mode, nothing otherwise.
 */
function paragraph(eat, value, silent) {
  var self = this;
  var settings = self.options;
  var commonmark = settings.commonmark;
  var gfm = settings.gfm;
  var tokenizers = self.blockTokenizers;
  var index = value.indexOf(C_NEWLINE);
  var length = value.length;
  var position;
  var subvalue;
  var character;
  var size;
  var now;

  while (index < length) {
    /* Eat everything if there’s no following newline. */
    if (index === -1) {
      index = length;
      break;
    }

    /* Stop if the next character is NEWLINE. */
    if (value.charAt(index + 1) === C_NEWLINE) {
      break;
    }

    /* In commonmark-mode, following indented lines
     * are part of the paragraph. */
    if (commonmark) {
      size = 0;
      position = index + 1;

      while (position < length) {
        character = value.charAt(position);

        if (character === C_TAB) {
          size = TAB_SIZE;
          break;
        } else if (character === C_SPACE) {
          size++;
        } else {
          break;
        }

        position++;
      }

      if (size >= TAB_SIZE) {
        index = value.indexOf(C_NEWLINE, index + 1);
        continue;
      }
    }

    /* Check if the following code contains a possible
     * block. */
    subvalue = value.slice(index + 1);

    if (
      tokenizers.thematicBreak.call(self, eat, subvalue, true) ||
      tokenizers.atxHeading.call(self, eat, subvalue, true) ||
      tokenizers.fencedCode.call(self, eat, subvalue, true) ||
      tokenizers.blockquote.call(self, eat, subvalue, true) ||
      tokenizers.html.call(self, eat, subvalue, true)
    ) {
      break;
    }

    /* Break if the following line starts a list, when
     * already in a list, or when in commonmark, or when
     * in gfm mode and the bullet is *not* numeric. */
    if (
      tokenizers.list.call(self, eat, subvalue, true) &&
      (
        self.inList ||
        commonmark ||
        (gfm && !decimal(trim.left(subvalue).charAt(0)))
      )
    ) {
      break;
    }

    if (
      !commonmark &&
      (
        tokenizers.setextHeading.call(self, eat, subvalue, true) ||
        tokenizers.definition.call(self, eat, subvalue, true) ||
        tokenizers.footnote.call(self, eat, subvalue, true)
      )
    ) {
      break;
    }

    position = index;
    index = value.indexOf(C_NEWLINE, index + 1);

    if (index !== -1 && trim(value.slice(position, index)) === '') {
      index = position;
      break;
    }
  }

  subvalue = value.slice(0, index);

  if (trim(subvalue) === '') {
    eat(subvalue);

    return null;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  now = eat.now();
  subvalue = trimTrailingLines(subvalue);

  return eat(subvalue)({
    type: 'paragraph',
    children: self.tokenizeInline(subvalue, now)
  });
}

},{"is-decimal":189,"trim":343,"trim-trailing-lines":342}],256:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:reference
 * @fileoverview Tokenise a reference.
 */

'use strict';

/* Dependencies. */
var whitespace = require('is-whitespace-character');
var locate = require('../locate/link');
var normalize = require('../util/normalize');

/* Expose. */
module.exports = reference;
reference.locator = locate;

/* Constants. */
var T_LINK = 'link';
var T_IMAGE = 'image';
var T_FOOTNOTE = 'footnote';
var REFERENCE_TYPE_SHORTCUT = 'shortcut';
var REFERENCE_TYPE_COLLAPSED = 'collapsed';
var REFERENCE_TYPE_FULL = 'full';
var C_CARET = '^';
var C_BACKSLASH = '\\';
var C_BRACKET_OPEN = '[';
var C_BRACKET_CLOSE = ']';

/**
 * Tokenise a reference.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `footnoteReference`,
 *   `linkReference`, or `imageReference` node.
 */
function reference(eat, value, silent) {
  var self = this;
  var character = value.charAt(0);
  var index = 0;
  var length = value.length;
  var subvalue = '';
  var intro = '';
  var type = T_LINK;
  var referenceType = REFERENCE_TYPE_SHORTCUT;
  var content;
  var identifier;
  var now;
  var node;
  var exit;
  var queue;
  var bracketed;
  var depth;

  /* Check whether we’re eating an image. */
  if (character === '!') {
    type = T_IMAGE;
    intro = character;
    character = value.charAt(++index);
  }

  if (character !== C_BRACKET_OPEN) {
    return;
  }

  index++;
  intro += character;
  queue = '';

  /* Check whether we’re eating a footnote. */
  if (
    self.options.footnotes &&
    type === T_LINK &&
    value.charAt(index) === C_CARET
  ) {
    intro += C_CARET;
    index++;
    type = T_FOOTNOTE;
  }

  /* Eat the text. */
  depth = 0;

  while (index < length) {
    character = value.charAt(index);

    if (character === C_BRACKET_OPEN) {
      bracketed = true;
      depth++;
    } else if (character === C_BRACKET_CLOSE) {
      if (!depth) {
        break;
      }

      depth--;
    }

    if (character === C_BACKSLASH) {
      queue += C_BACKSLASH;
      character = value.charAt(++index);
    }

    queue += character;
    index++;
  }

  subvalue = content = queue;
  character = value.charAt(index);

  if (character !== C_BRACKET_CLOSE) {
    return;
  }

  index++;
  subvalue += character;
  queue = '';

  while (index < length) {
    character = value.charAt(index);

    if (!whitespace(character)) {
      break;
    }

    queue += character;
    index++;
  }

  character = value.charAt(index);

  if (character === C_BRACKET_OPEN) {
    identifier = '';
    queue += character;
    index++;

    while (index < length) {
      character = value.charAt(index);

      if (character === C_BRACKET_OPEN || character === C_BRACKET_CLOSE) {
        break;
      }

      if (character === C_BACKSLASH) {
        identifier += C_BACKSLASH;
        character = value.charAt(++index);
      }

      identifier += character;
      index++;
    }

    character = value.charAt(index);

    if (character === C_BRACKET_CLOSE) {
      referenceType = identifier ? REFERENCE_TYPE_FULL : REFERENCE_TYPE_COLLAPSED;
      queue += identifier + character;
      index++;
    } else {
      identifier = '';
    }

    subvalue += queue;
    queue = '';
  } else {
    if (!content) {
      return;
    }

    identifier = content;
  }

  /* Brackets cannot be inside the identifier. */
  if (referenceType !== REFERENCE_TYPE_FULL && bracketed) {
    return;
  }

  /* Inline footnotes cannot have an identifier. */
  if (type === T_FOOTNOTE && referenceType !== REFERENCE_TYPE_SHORTCUT) {
    type = T_LINK;
    intro = C_BRACKET_OPEN + C_CARET;
    content = C_CARET + content;
  }

  subvalue = intro + subvalue;

  if (type === T_LINK && self.inLink) {
    return null;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  if (type === T_FOOTNOTE && content.indexOf(' ') !== -1) {
    return eat(subvalue)({
      type: 'footnote',
      children: this.tokenizeInline(content, eat.now())
    });
  }

  now = eat.now();
  now.column += intro.length;
  now.offset += intro.length;
  identifier = referenceType === REFERENCE_TYPE_FULL ? identifier : content;

  node = {
    type: type + 'Reference',
    identifier: normalize(identifier)
  };

  if (type === T_LINK || type === T_IMAGE) {
    node.referenceType = referenceType;
  }

  if (type === T_LINK) {
    exit = self.enterLink();
    node.children = self.tokenizeInline(content, now);
    exit();
  } else if (type === T_IMAGE) {
    node.alt = self.decode.raw(self.unescape(content), now) || null;
  }

  return eat(subvalue)(node);
}

},{"../locate/link":230,"../util/normalize":272,"is-whitespace-character":191}],257:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:strong
 * @fileoverview Tokenise strong.
 */

'use strict';

/* Dependencies. */
var trim = require('trim');
var whitespace = require('is-whitespace-character');
var locate = require('../locate/strong');

/* Expose. */
module.exports = strong;
strong.locator = locate;

/* Constants. */
var C_ASTERISK = '*';
var C_UNDERSCORE = '_';

/**
 * Tokenise strong.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `strong` node.
 */
function strong(eat, value, silent) {
  var self = this;
  var index = 0;
  var character = value.charAt(index);
  var now;
  var pedantic;
  var marker;
  var queue;
  var subvalue;
  var length;
  var prev;

  if (
    (character !== C_ASTERISK && character !== C_UNDERSCORE) ||
    value.charAt(++index) !== character
  ) {
    return;
  }

  pedantic = self.options.pedantic;
  marker = character;
  subvalue = marker + marker;
  length = value.length;
  index++;
  queue = character = '';

  if (pedantic && whitespace(value.charAt(index))) {
    return;
  }

  while (index < length) {
    prev = character;
    character = value.charAt(index);

    if (
      character === marker &&
      value.charAt(index + 1) === marker &&
      (!pedantic || !whitespace(prev))
    ) {
      character = value.charAt(index + 2);

      if (character !== marker) {
        if (!trim(queue)) {
          return;
        }

        /* istanbul ignore if - never used (yet) */
        if (silent) {
          return true;
        }

        now = eat.now();
        now.column += 2;
        now.offset += 2;

        return eat(subvalue + queue + subvalue)({
          type: 'strong',
          children: self.tokenizeInline(queue, now)
        });
      }
    }

    if (!pedantic && character === '\\') {
      queue += character;
      character = value.charAt(++index);
    }

    queue += character;
    index++;
  }
}

},{"../locate/strong":231,"is-whitespace-character":191,"trim":343}],258:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:table
 * @fileoverview Tokenise a table.
 */

'use strict';

/* Dependencies. */
var whitespace = require('is-whitespace-character');

/* Expose. */
module.exports = table;
table.notInList = true;

/* Characters. */
var C_BACKSLASH = '\\';
var C_TICK = '`';
var C_DASH = '-';
var C_PIPE = '|';
var C_COLON = ':';
var C_SPACE = ' ';
var C_NEWLINE = '\n';
var C_TAB = '\t';

/* Constants. */
var MIN_TABLE_COLUMNS = 2;
var MIN_TABLE_ROWS = 2;

/* Available table alignments. */
var TABLE_ALIGN_LEFT = 'left';
var TABLE_ALIGN_CENTER = 'center';
var TABLE_ALIGN_RIGHT = 'right';
var TABLE_ALIGN_NONE = null;

/**
 * Tokenise a table.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `table` node.
 */
function table(eat, value, silent) {
  var self = this;
  var index;
  var alignments;
  var alignment;
  var subvalue;
  var row;
  var length;
  var lines;
  var queue;
  var character;
  var hasDash;
  var align;
  var cell;
  var preamble;
  var count;
  var opening;
  var now;
  var position;
  var lineCount;
  var line;
  var rows;
  var table;
  var lineIndex;
  var pipeIndex;
  var first;

  /* Exit when not in gfm-mode. */
  if (!self.options.gfm) {
    return;
  }

  /* Get the rows.
   * Detecting tables soon is hard, so there are some
   * checks for performance here, such as the minimum
   * number of rows, and allowed characters in the
   * alignment row. */
  index = lineCount = 0;
  length = value.length + 1;
  lines = [];

  while (index < length) {
    lineIndex = value.indexOf(C_NEWLINE, index);
    pipeIndex = value.indexOf(C_PIPE, index + 1);

    if (lineIndex === -1) {
      lineIndex = value.length;
    }

    if (pipeIndex === -1 || pipeIndex > lineIndex) {
      if (lineCount < MIN_TABLE_ROWS) {
        return;
      }

      break;
    }

    lines.push(value.slice(index, lineIndex));
    lineCount++;
    index = lineIndex + 1;
  }

  /* Parse the alignment row. */
  subvalue = lines.join(C_NEWLINE);
  alignments = lines.splice(1, 1)[0] || [];
  index = 0;
  length = alignments.length;
  lineCount--;
  alignment = false;
  align = [];

  while (index < length) {
    character = alignments.charAt(index);

    if (character === C_PIPE) {
      hasDash = null;

      if (alignment === false) {
        if (first === false) {
          return;
        }
      } else {
        align.push(alignment);
        alignment = false;
      }

      first = false;
    } else if (character === C_DASH) {
      hasDash = true;
      alignment = alignment || TABLE_ALIGN_NONE;
    } else if (character === C_COLON) {
      if (alignment === TABLE_ALIGN_LEFT) {
        alignment = TABLE_ALIGN_CENTER;
      } else if (hasDash && alignment === TABLE_ALIGN_NONE) {
        alignment = TABLE_ALIGN_RIGHT;
      } else {
        alignment = TABLE_ALIGN_LEFT;
      }
    } else if (!whitespace(character)) {
      return;
    }

    index++;
  }

  if (alignment !== false) {
    align.push(alignment);
  }

  /* Exit when without enough columns. */
  if (align.length < MIN_TABLE_COLUMNS) {
    return;
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  /* Parse the rows. */
  position = -1;
  rows = [];

  table = eat(subvalue).reset({
    type: 'table',
    align: align,
    children: rows
  });

  while (++position < lineCount) {
    line = lines[position];
    row = {type: 'tableRow', children: []};

    /* Eat a newline character when this is not the
     * first row. */
    if (position) {
      eat(C_NEWLINE);
    }

    /* Eat the row. */
    eat(line).reset(row, table);

    length = line.length + 1;
    index = 0;
    queue = cell = '';
    preamble = true;
    count = opening = null;

    while (index < length) {
      character = line.charAt(index);

      if (character === C_TAB || character === C_SPACE) {
        if (cell) {
          queue += character;
        } else {
          eat(character);
        }

        index++;
        continue;
      }

      if (character === '' || character === C_PIPE) {
        if (preamble) {
          eat(character);
        } else {
          if (character && opening) {
            queue += character;
            index++;
            continue;
          }

          if ((cell || character) && !preamble) {
            subvalue = cell;

            if (queue.length > 1) {
              if (character) {
                subvalue += queue.slice(0, queue.length - 1);
                queue = queue.charAt(queue.length - 1);
              } else {
                subvalue += queue;
                queue = '';
              }
            }

            now = eat.now();

            eat(subvalue)({
              type: 'tableCell',
              children: self.tokenizeInline(cell, now)
            }, row);
          }

          eat(queue + character);

          queue = cell = '';
        }
      } else {
        if (queue) {
          cell += queue;
          queue = '';
        }

        cell += character;

        if (character === C_BACKSLASH && index !== length - 2) {
          cell += line.charAt(index + 1);
          index++;
        }

        if (character === C_TICK) {
          count = 1;

          while (line.charAt(index + 1) === character) {
            cell += character;
            index++;
            count++;
          }

          if (!opening) {
            opening = count;
          } else if (count >= opening) {
            opening = 0;
          }
        }
      }

      preamble = false;
      index++;
    }

    /* Eat the alignment row. */
    if (!position) {
      eat(C_NEWLINE + alignments);
    }
  }

  return table;
}

},{"is-whitespace-character":191}],259:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:text
 * @fileoverview Tokenise text.
 */

'use strict';

/* Expose. */
module.exports = text;

/**
 * Tokenise text.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `text` node.
 */
function text(eat, value, silent) {
  var self = this;
  var methods;
  var tokenizers;
  var index;
  var length;
  var subvalue;
  var position;
  var tokenizer;
  var name;
  var min;
  var now;

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  methods = self.inlineMethods;
  length = methods.length;
  tokenizers = self.inlineTokenizers;
  index = -1;
  min = value.length;

  while (++index < length) {
    name = methods[index];

    if (name === 'text' || !tokenizers[name]) {
      continue;
    }

    tokenizer = tokenizers[name].locator;

    if (!tokenizer) {
      eat.file.fail('Missing locator: `' + name + '`');
    }

    position = tokenizer.call(self, value, 1);

    if (position !== -1 && position < min) {
      min = position;
    }
  }

  subvalue = value.slice(0, min);
  now = eat.now();

  self.decode(subvalue, now, function (content, position, source) {
    eat(source || content)({
      type: 'text',
      value: content
    });
  });
}

},{}],260:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:thematic-break
 * @fileoverview Tokenise a thematic break.
 */

'use strict';

/* Expose. */
module.exports = thematicBreak;

/* Characters */
var C_NEWLINE = '\n';
var C_TAB = '\t';
var C_SPACE = ' ';
var C_ASTERISK = '*';
var C_UNDERSCORE = '_';
var C_DASH = '-';

/* Constants. */
var THEMATIC_BREAK_MARKER_COUNT = 3;

/**
 * Tokenise a thematic break.
 *
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `thematicBreak` node.
 */
function thematicBreak(eat, value, silent) {
  var index = -1;
  var length = value.length + 1;
  var subvalue = '';
  var character;
  var marker;
  var markerCount;
  var queue;

  while (++index < length) {
    character = value.charAt(index);

    if (character !== C_TAB && character !== C_SPACE) {
      break;
    }

    subvalue += character;
  }

  if (
    character !== C_ASTERISK &&
    character !== C_DASH &&
    character !== C_UNDERSCORE
  ) {
    return;
  }

  marker = character;
  subvalue += character;
  markerCount = 1;
  queue = '';

  while (++index < length) {
    character = value.charAt(index);

    if (character === marker) {
      markerCount++;
      subvalue += queue + marker;
      queue = '';
    } else if (character === C_SPACE) {
      queue += character;
    } else if (
      markerCount >= THEMATIC_BREAK_MARKER_COUNT &&
      (!character || character === C_NEWLINE)
    ) {
      subvalue += queue;

      if (silent) {
        return true;
      }

      return eat(subvalue)({type: 'thematicBreak'});
    } else {
      return;
    }
  }
}

},{}],261:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:url
 * @fileoverview Tokenise a URL.
 */

'use strict';

/* Dependencies. */
var decode = require('parse-entities');
var whitespace = require('is-whitespace-character');
var locate = require('../locate/url');

/* Expose. */
module.exports = url;
url.locator = locate;
url.notInLink = true;

/* Constants. */
var C_BRACKET_OPEN = '[';
var C_BRACKET_CLOSE = ']';
var C_PAREN_OPEN = '(';
var C_PAREN_CLOSE = ')';
var C_LT = '<';
var C_AT_SIGN = '@';

/* Protocols. */
var HTTP_PROTOCOL = 'http://';
var HTTPS_PROTOCOL = 'https://';
var MAILTO_PROTOCOL = 'mailto:';

var PROTOCOLS = [
  HTTP_PROTOCOL,
  HTTPS_PROTOCOL,
  MAILTO_PROTOCOL
];

var PROTOCOLS_LENGTH = PROTOCOLS.length;

/**
 * Tokenise a link.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `link` node.
 */
function url(eat, value, silent) {
  var self = this;
  var subvalue;
  var content;
  var character;
  var index;
  var position;
  var protocol;
  var match;
  var length;
  var queue;
  var parenCount;
  var nextCharacter;
  var exit;

  if (!self.options.gfm) {
    return;
  }

  subvalue = '';
  index = -1;
  length = PROTOCOLS_LENGTH;

  while (++index < length) {
    protocol = PROTOCOLS[index];
    match = value.slice(0, protocol.length);

    if (match.toLowerCase() === protocol) {
      subvalue = match;
      break;
    }
  }

  if (!subvalue) {
    return;
  }

  index = subvalue.length;
  length = value.length;
  queue = '';
  parenCount = 0;

  while (index < length) {
    character = value.charAt(index);

    if (whitespace(character) || character === C_LT) {
      break;
    }

    if (
      character === '.' ||
      character === ',' ||
      character === ':' ||
      character === ';' ||
      character === '"' ||
      character === '\'' ||
      character === ')' ||
      character === ']'
    ) {
      nextCharacter = value.charAt(index + 1);

      if (!nextCharacter || whitespace(nextCharacter)) {
        break;
      }
    }

    if (character === C_PAREN_OPEN || character === C_BRACKET_OPEN) {
      parenCount++;
    }

    if (character === C_PAREN_CLOSE || character === C_BRACKET_CLOSE) {
      parenCount--;

      if (parenCount < 0) {
        break;
      }
    }

    queue += character;
    index++;
  }

  if (!queue) {
    return;
  }

  subvalue += queue;
  content = subvalue;

  if (protocol === MAILTO_PROTOCOL) {
    position = queue.indexOf(C_AT_SIGN);

    if (position === -1 || position === length - 1) {
      return;
    }

    content = content.substr(MAILTO_PROTOCOL.length);
  }

  /* istanbul ignore if - never used (yet) */
  if (silent) {
    return true;
  }

  exit = self.enterLink();
  content = self.tokenizeInline(content, eat.now());
  exit();

  return eat(subvalue)({
    type: 'link',
    title: null,
    url: decode(subvalue),
    children: content
  });
}

},{"../locate/url":233,"is-whitespace-character":191,"parse-entities":205}],262:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenize:yaml
 * @fileoverview Tokenise YAML.
 */

'use strict';

/* Expose. */
module.exports = yaml;
yaml.onlyAtStart = true;

/* Constants */
var FENCE = '---';
var C_DASH = '-';
var C_NEWLINE = '\n';

/**
 * Tokenise YAML.
 *
 * @property {Function} locator.
 * @param {function(string)} eat - Eater.
 * @param {string} value - Rest of content.
 * @param {boolean?} [silent] - Whether this is a dry run.
 * @return {Node?|boolean} - `yaml` node.
 */
function yaml(eat, value, silent) {
  var self = this;
  var subvalue;
  var content;
  var index;
  var length;
  var character;
  var queue;

  if (
    !self.options.yaml ||
    value.charAt(0) !== C_DASH ||
    value.charAt(1) !== C_DASH ||
    value.charAt(2) !== C_DASH ||
    value.charAt(3) !== C_NEWLINE
  ) {
    return;
  }

  subvalue = FENCE + C_NEWLINE;
  content = queue = '';
  index = 3;
  length = value.length;

  while (++index < length) {
    character = value.charAt(index);

    if (
      character === C_DASH &&
      (queue || !content) &&
      value.charAt(index + 1) === C_DASH &&
      value.charAt(index + 2) === C_DASH
    ) {
      /* istanbul ignore if - never used (yet) */
      if (silent) {
        return true;
      }

      subvalue += queue + FENCE;

      return eat(subvalue)({
        type: 'yaml',
        value: content
      });
    }

    if (character === C_NEWLINE) {
      queue += character;
    } else {
      subvalue += queue + character;
      content += queue + character;
      queue = '';
    }
  }
}

},{}],263:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:tokenizer
 * @fileoverview Markdown tokenizer.
 */

'use strict';

/* Expose. */
module.exports = factory;

/* Define nodes of a type which can be merged. */
var MERGEABLE_NODES = {};

/**
 * Check whether a node is mergeable with adjacent nodes.
 *
 * @param {Object} node - Node to check.
 * @return {boolean} - Whether `node` is mergable.
 */
function mergeable(node) {
  var start;
  var end;

  if (node.type !== 'text' || !node.position) {
    return true;
  }

  start = node.position.start;
  end = node.position.end;

  /* Only merge nodes which occupy the same size as their
   * `value`. */
  return start.line !== end.line ||
      end.column - start.column === node.value.length;
}

/**
 * Merge two text nodes: `node` into `prev`.
 *
 * @param {Object} prev - Preceding sibling.
 * @param {Object} node - Following sibling.
 * @return {Object} - `prev`.
 */
MERGEABLE_NODES.text = function (prev, node) {
  prev.value += node.value;

  return prev;
};

/**
 * Merge two blockquotes: `node` into `prev`, unless in
 * CommonMark mode.
 *
 * @param {Object} prev - Preceding sibling.
 * @param {Object} node - Following sibling.
 * @return {Object} - `prev`, or `node` in CommonMark mode.
 */
MERGEABLE_NODES.blockquote = function (prev, node) {
  if (this.options.commonmark) {
    return node;
  }

  prev.children = prev.children.concat(node.children);

  return prev;
};

/**
 * Construct a tokenizer.  This creates both
 * `tokenizeInline` and `tokenizeBlock`.
 *
 * @example
 *   Parser.prototype.tokenizeInline = tokenizeFactory('inline');
 *
 * @param {string} type - Name of parser, used to find
 *   its expressions (`%sMethods`) and tokenizers
 *   (`%Tokenizers`).
 * @return {Function} - Tokenizer.
 */
function factory(type) {
  return tokenize;

  /**
   * Tokenizer for a bound `type`
   *
   * @example
   *   parser = new Parser();
   *   parser.tokenizeInline('_foo_');
   *
   * @param {string} value - Content.
   * @param {Object} location - Offset at which `value`
   *   starts.
   * @return {Array.<Object>} - Nodes.
   */
  function tokenize(value, location) {
    var self = this;
    var offset = self.offset;
    var tokens = [];
    var methods = self[type + 'Methods'];
    var tokenizers = self[type + 'Tokenizers'];
    var line = location.line;
    var column = location.column;
    var index;
    var length;
    var method;
    var name;
    var matched;
    var valueLength;

    /* Trim white space only lines. */
    if (!value) {
      return tokens;
    }

    /* Expose on `eat`. */
    eat.now = now;
    eat.file = self.file;

    /* Sync initial offset. */
    updatePosition('');

    /* Iterate over `value`, and iterate over all
     * tokenizers.  When one eats something, re-iterate
     * with the remaining value.  If no tokenizer eats,
     * something failed (should not happen) and an
     * exception is thrown. */
    while (value) {
      index = -1;
      length = methods.length;
      matched = false;

      while (++index < length) {
        name = methods[index];
        method = tokenizers[name];

        if (
          method &&
          (!method.onlyAtStart || self.atStart) &&
          (!method.notInList || !self.inList) &&
          (!method.notInBlock || !self.inBlock) &&
          (!method.notInLink || !self.inLink)
        ) {
          valueLength = value.length;

          method.apply(self, [eat, value]);

          matched = valueLength !== value.length;

          if (matched) {
            break;
          }
        }
      }

      /* istanbul ignore if */
      if (!matched) {
        self.file.fail(new Error('Infinite loop'), eat.now());
      }
    }

    self.eof = now();

    return tokens;

    /**
     * Update line, column, and offset based on
     * `value`.
     *
     * @example
     *   updatePosition('foo');
     *
     * @param {string} subvalue - Subvalue to eat.
     */
    function updatePosition(subvalue) {
      var lastIndex = -1;
      var index = subvalue.indexOf('\n');

      while (index !== -1) {
        line++;
        lastIndex = index;
        index = subvalue.indexOf('\n', index + 1);
      }

      if (lastIndex === -1) {
        column += subvalue.length;
      } else {
        column = subvalue.length - lastIndex;
      }

      if (line in offset) {
        if (lastIndex !== -1) {
          column += offset[line];
        } else if (column <= offset[line]) {
          column = offset[line] + 1;
        }
      }
    }

    /**
     * Get offset.  Called before the first character is
     * eaten to retrieve the range's offsets.
     *
     * @return {Function} - `done`, to be called when
     *   the last character is eaten.
     */
    function getOffset() {
      var indentation = [];
      var pos = line + 1;

      /**
       * Done.  Called when the last character is
       * eaten to retrieve the range’s offsets.
       *
       * @return {Array.<number>} - Offset.
       */
      return function () {
        var last = line + 1;

        while (pos < last) {
          indentation.push((offset[pos] || 0) + 1);

          pos++;
        }

        return indentation;
      };
    }

    /**
     * Get the current position.
     *
     * @example
     *   position = now(); // {line: 1, column: 1, offset: 0}
     *
     * @return {Object} - Current Position.
     */
    function now() {
      var pos = {line: line, column: column};

      pos.offset = self.toOffset(pos);

      return pos;
    }

    /**
     * Store position information for a node.
     *
     * @example
     *   start = now();
     *   updatePosition('foo');
     *   location = new Position(start);
     *   // {
     *   //   start: {line: 1, column: 1, offset: 0},
     *   //   end: {line: 1, column: 3, offset: 2}
     *   // }
     *
     * @param {Object} start - Starting position.
     */
    function Position(start) {
      this.start = start;
      this.end = now();
    }

    /**
     * Throw when a value is incorrectly eaten.
     * This shouldn’t happen but will throw on new,
     * incorrect rules.
     *
     * @example
     *   // When the current value is set to `foo bar`.
     *   validateEat('foo');
     *   eat('foo');
     *
     *   validateEat('bar');
     *   // throws, because the space is not eaten.
     *
     * @param {string} subvalue - Value to be eaten.
     * @throws {Error} - When `subvalue` cannot be eaten.
     */
    function validateEat(subvalue) {
      /* istanbul ignore if */
      if (value.substring(0, subvalue.length) !== subvalue) {
        /* Capture stack-trace. */
        self.file.fail(
          new Error(
            'Incorrectly eaten value: please report this ' +
            'warning on http://git.io/vg5Ft'
          ),
          now()
        );
      }
    }

    /**
     * Mark position and patch `node.position`.
     *
     * @example
     *   var update = position();
     *   updatePosition('foo');
     *   update({});
     *   // {
     *   //   position: {
     *   //     start: {line: 1, column: 1, offset: 0},
     *   //     end: {line: 1, column: 3, offset: 2}
     *   //   }
     *   // }
     *
     * @returns {Function} - Updater.
     */
    function position() {
      var before = now();

      return update;

      /**
       * Add the position to a node.
       *
       * @example
       *   update({type: 'text', value: 'foo'});
       *
       * @param {Node} node - Node to attach position
       *   on.
       * @param {Array} [indent] - Indentation for
       *   `node`.
       * @return {Node} - `node`.
       */
      function update(node, indent) {
        var prev = node.position;
        var start = prev ? prev.start : before;
        var combined = [];
        var n = prev && prev.end.line;
        var l = before.line;

        node.position = new Position(start);

        /* If there was already a `position`, this
         * node was merged.  Fixing `start` wasn’t
         * hard, but the indent is different.
         * Especially because some information, the
         * indent between `n` and `l` wasn’t
         * tracked.  Luckily, that space is
         * (should be?) empty, so we can safely
         * check for it now. */
        if (prev && indent && prev.indent) {
          combined = prev.indent;

          if (n < l) {
            while (++n < l) {
              combined.push((offset[n] || 0) + 1);
            }

            combined.push(before.column);
          }

          indent = combined.concat(indent);
        }

        node.position.indent = indent || [];

        return node;
      }
    }

    /**
     * Add `node` to `parent`s children or to `tokens`.
     * Performs merges where possible.
     *
     * @example
     *   add({});
     *
     *   add({}, {children: []});
     *
     * @param {Object} node - Node to add.
     * @param {Object} [parent] - Parent to insert into.
     * @return {Object} - Added or merged into node.
     */
    function add(node, parent) {
      var children = parent ? parent.children : tokens;
      var prev = children[children.length - 1];

      if (
        prev &&
        node.type === prev.type &&
        node.type in MERGEABLE_NODES &&
        mergeable(prev) &&
        mergeable(node)
      ) {
        node = MERGEABLE_NODES[node.type].call(self, prev, node);
      }

      if (node !== prev) {
        children.push(node);
      }

      if (self.atStart && tokens.length) {
        self.exitStart();
      }

      return node;
    }

    /**
     * Remove `subvalue` from `value`.
     * `subvalue` must be at the start of `value`.
     *
     * @example
     *   eat('foo')({type: 'text', value: 'foo'});
     *
     * @param {string} subvalue - Removed from `value`,
     *   and passed to `updatePosition`.
     * @return {Function} - Wrapper around `add`, which
     *   also adds `position` to node.
     */
    function eat(subvalue) {
      var indent = getOffset();
      var pos = position();
      var current = now();

      validateEat(subvalue);

      apply.reset = reset;
      apply.test = reset.test = test;

      value = value.substring(subvalue.length);

      updatePosition(subvalue);

      indent = indent();

      return apply;

      /**
       * Add the given arguments, add `position` to
       * the returned node, and return the node.
       *
       * @param {Object} node - Node to add.
       * @param {Object} [parent] - Node to insert into.
       * @return {Node} - Added node.
       */
      function apply(node, parent) {
        return pos(add(pos(node), parent), indent);
      }

      /**
       * Functions just like apply, but resets the
       * content:  the line and column are reversed,
       * and the eaten value is re-added.
       *
       * This is useful for nodes with a single
       * type of content, such as lists and tables.
       *
       * See `apply` above for what parameters are
       * expected.
       *
       * @return {Node} - Added node.
       */
      function reset() {
        var node = apply.apply(null, arguments);

        line = current.line;
        column = current.column;
        value = subvalue + value;

        return node;
      }

      /**
       * Test the position, after eating, and reverse
       * to a not-eaten state.
       *
       * @return {Position} - Position after eating `subvalue`.
       */
      function test() {
        var result = pos({});

        line = current.line;
        column = current.column;
        value = subvalue + value;

        return result.position;
      }
    }
  }
}

},{}],264:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:unescape
 * @fileoverview Unescape escapes.
 */

'use strict';

/* Expose. */
module.exports = factory;

/**
 * Factory to de-escape a value, based on a list at `key`
 * in `ctx`.
 *
 * @example
 *   var ctx = {escape: ['a']}
 *   var unescape = unescapeFactory(ctx, 'escape');
 *
 * @param {Object} ctx - List of escapable characters.
 * @param {string} key - Key in `map` at which the list
 *   exists.
 * @return {function(string): string} - Function which
 *   takes a value and returns its unescaped version.
 */
function factory(ctx, key) {
  return unescape;

  /**
   * De-escape a string using the expression at `key`
   * in `ctx`.
   *
   * @example
   *   var ctx = {escape: ['a']}
   *   var unescape = unescapeFactory(ctx, 'escape');
   *   unescape('\a \b'); // 'a \b'
   *
   * @param {string} value - Escaped string.
   * @return {string} - Unescaped string.
   */
  function unescape(value) {
    var prev = 0;
    var index = value.indexOf('\\');
    var escape = ctx[key];
    var queue = [];
    var character;

    while (index !== -1) {
      queue.push(value.slice(prev, index));
      prev = index + 1;
      character = value.charAt(prev);

      /* If the following character is not a valid escape,
       * add the slash. */
      if (!character || escape.indexOf(character) === -1) {
        queue.push('\\');
      }

      index = value.indexOf('\\', prev);
    }

    queue.push(value.slice(prev));

    return queue.join('');
  }
}

},{}],265:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:util:get-indentation
 * @fileoverview Get indentation.
 */

'use strict';

/* Expose. */
module.exports = indentation;

/* A map of characters, and their column length,
 * which can be used as indentation. */
var characters = {' ': 1, '\t': 4};

/**
 * Gets indentation information for a line.
 *
 * @param {string} value - Indented line.
 * @return {Object} - Indetation information.
 */
function indentation(value) {
  var index = 0;
  var indent = 0;
  var character = value.charAt(index);
  var stops = {};
  var size;

  while (character in characters) {
    size = characters[character];

    indent += size;

    if (size > 1) {
      indent = Math.floor(indent / size) * size;
    }

    stops[indent] = index;

    character = value.charAt(++index);
  }

  return {indent: indent, stops: stops};
}

},{}],266:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:util:match-comment
 * @fileoverview Match XML character data.
 */

'use strict';

/* Expose. */
module.exports = match;

/* Constants. */
var START = '<![CDATA[';
var END = ']]>';
var END_CHAR = END.charAt(0);
var START_LENGTH = START.length;
var END_LENGTH = END.length;

/**
 * Try to match CDATA.
 *
 * @param {string} value - Value to parse.
 * @return {string?} - When applicable, the CDATA at the
 *   start of `value`.
 */
function match(value) {
  var index = START_LENGTH;
  var queue = value.slice(0, index);
  var length = value.length;
  var character;

  if (queue.toUpperCase() === START) {
    while (index < length) {
      character = value.charAt(index);

      if (
        character === END_CHAR &&
        value.slice(index, index + END_LENGTH) === END
      ) {
        return queue + END;
      }

      queue += character;
      index++;
    }
  }
}

},{}],267:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:util:match-comment
 * @fileoverview Match an HTML comment.
 */

'use strict';

/* Expose. */
module.exports = match;

/* Constants. */
var START = '<!--';
var END = '-->';
var END_CHAR = END.charAt(0);
var START_LENGTH = START.length;
var END_LENGTH = END.length;

/**
 * Try to match comment.
 *
 * @param {string} value - Value to parse.
 * @param {Object} settings - Configuration as available on
 *   a parser.
 * @return {string?} - When applicable, the comment at the
 *   start of `value`.
 */
function match(value, settings) {
  var index = START_LENGTH;
  var queue = START;
  var length = value.length;
  var commonmark = settings.commonmark;
  var character;
  var hasNonDash;

  if (value.slice(0, index) === queue) {
    while (index < length) {
      character = value.charAt(index);

      if (
        character === END_CHAR &&
        value.slice(index, index + END_LENGTH) === END
      ) {
        return queue + END;
      }

      if (commonmark) {
        if (character === '>' && !hasNonDash) {
          return;
        }

        if (character !== '-') {
          hasNonDash = true;
        } else if (value.charAt(index + 1) === '-') {
          return;
        }
      }

      queue += character;
      index++;
    }
  }
}

},{}],268:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:util:match-declaration
 * @fileoverview Match an XML declaration.
 */

'use strict';

/* Dependencies. */
var alphabetical = require('is-alphabetical');
var whitespace = require('is-whitespace-character');

/* Expose. */
module.exports = match;

/* Constants. */
var C_EXCLAMATION_MARK = '!';
var C_LT = '<';
var C_GT = '>';

/**
 * Try to match a declaration.
 *
 * @param {string} value - Value to parse.
 * @return {string?} - When applicable, the declaration at
 *   the start of `value`.
 */
function match(value) {
  var index = 0;
  var length = value.length;
  var queue = '';
  var subqueue = '';
  var character;

  if (
    value.charAt(index) === C_LT &&
    value.charAt(++index) === C_EXCLAMATION_MARK
  ) {
    queue = C_LT + C_EXCLAMATION_MARK;
    index++;

    /* Eat as many alphabetic characters as
     * possible. */
    while (index < length) {
      character = value.charAt(index);

      if (!alphabetical(character)) {
        break;
      }

      subqueue += character;
      index++;
    }

    character = value.charAt(index);

    if (!subqueue || !whitespace(character)) {
      return;
    }

    queue += subqueue + character;
    index++;

    while (index < length) {
      character = value.charAt(index);

      if (character === C_GT) {
        return queue;
      }

      queue += character;
      index++;
    }
  }
}

},{"is-alphabetical":185,"is-whitespace-character":191}],269:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:util:match-instruction
 * @fileoverview Match XML processing instruction.
 */

'use strict';

/* Expose. */
module.exports = match;

/* Constants. */
var C_QUESTION_MARK = '?';
var C_LT = '<';
var C_GT = '>';

/**
 * Try to match a processing instruction.
 *
 * @param {string} value - Value to parse.
 * @return {string?} - When applicable, the processing
 *   instruction at the start of `value`.
 */
function match(value) {
  var index = 0;
  var queue = '';
  var length = value.length;
  var character;

  if (
    value.charAt(index) === C_LT &&
    value.charAt(++index) === C_QUESTION_MARK
  ) {
    queue = C_LT + C_QUESTION_MARK;
    index++;

    while (index < length) {
      character = value.charAt(index);

      if (
        character === C_QUESTION_MARK &&
        value.charAt(index + 1) === C_GT
      ) {
        return queue + character + C_GT;
      }

      queue += character;
      index++;
    }
  }
}

},{}],270:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:util:match-tag-closing
 * @fileoverview Match an HTML closing tag.
 */

'use strict';

/* Dependencies. */
var alphabetical = require('is-alphabetical');
var decimal = require('is-decimal');
var whitespace = require('is-whitespace-character');
var blockElements = require('../block-elements.json');

/* Expose. */
module.exports = match;

/* Constants. */
var C_LT = '<';
var C_GT = '>';
var C_SLASH = '/';

/**
 * Try to match a closing tag.
 *
 * @param {string} value - Value to parse.
 * @param {boolean?} [isBlock] - Whether the tag-name
 *   must be a known block-level node to match.
 * @return {string?} - When applicable, the closing tag at
 *   the start of `value`.
 */
function match(value, isBlock) {
  var index = 0;
  var length = value.length;
  var queue = '';
  var subqueue = '';
  var character;

  if (
    value.charAt(index) === C_LT &&
    value.charAt(++index) === C_SLASH
  ) {
    queue = C_LT + C_SLASH;
    subqueue = character = value.charAt(++index);

    if (!alphabetical(character)) {
      return;
    }

    index++;

    /* Eat as many alphabetic characters as
     * possible. */
    while (index < length) {
      character = value.charAt(index);

      if (!alphabetical(character) && !decimal(character)) {
        break;
      }

      subqueue += character;
      index++;
    }

    if (isBlock && blockElements.indexOf(subqueue.toLowerCase()) === -1) {
      return;
    }

    queue += subqueue;

    /* Eat white-space. */
    while (index < length) {
      character = value.charAt(index);

      if (!whitespace(character)) {
        break;
      }

      queue += character;
      index++;
    }

    if (value.charAt(index) === C_GT) {
      return queue + C_GT;
    }
  }
}

},{"../block-elements.json":222,"is-alphabetical":185,"is-decimal":189,"is-whitespace-character":191}],271:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:util:match-tag-opening
 * @fileoverview Match an HTML opening tag.
 */

'use strict';

/* Dependencies. */
var alphabetical = require('is-alphabetical');
var decimal = require('is-decimal');
var whitespace = require('is-whitespace-character');
var blockElements = require('../block-elements.json');

/* Expose. */
module.exports = match;

/* Constants. */
var C_LT = '<';
var C_GT = '>';
var C_SLASH = '/';
var C_DOUBLE_QUOTE = '"';
var C_SINGLE_QUOTE = '\'';
var C_EQUALS = '=';

/**
 * Try to match a closing tag.
 *
 * @param {string} value - Value to parse.
 * @param {boolean?} [isBlock] - Whether the tag-name
 *   must be a known block-level node to match.
 * @return {string?} - When applicable, the closing tag at
 *   the start of `value`.
 */
function match(value, isBlock) {
  var index = 0;
  var length = value.length;
  var queue = '';
  var subqueue = '';
  var character = value.charAt(index);
  var hasEquals;
  var test;

  if (character === C_LT) {
    queue = character;
    subqueue = character = value.charAt(++index);

    if (!alphabetical(character)) {
      return;
    }

    index++;

    /* Eat as many alphabetic characters as
     * possible. */
    while (index < length) {
      character = value.charAt(index);

      if (!alphabetical(character) && !decimal(character)) {
        break;
      }

      subqueue += character;
      index++;
    }

    if (isBlock && blockElements.indexOf(subqueue.toLowerCase()) === -1) {
      return;
    }

    queue += subqueue;
    subqueue = '';

    /* Find attributes. */
    while (index < length) {
      /* Eat white-space. */
      while (index < length) {
        character = value.charAt(index);

        if (!whitespace(character)) {
          break;
        }

        subqueue += character;
        index++;
      }

      if (!subqueue) {
        break;
      }

      /* Eat an attribute name. */
      queue += subqueue;
      subqueue = '';
      character = value.charAt(index);

      if (
        alphabetical(character) ||
        character === '_' ||
        character === ':'
      ) {
        subqueue = character;
        index++;

        while (index < length) {
          character = value.charAt(index);

          if (
            !alphabetical(character) &&
            !decimal(character) &&
            character !== '_' &&
            character !== ':' &&
            character !== '.' &&
            character !== '-'
          ) {
            break;
          }

          subqueue += character;
          index++;
        }
      }

      if (!subqueue) {
        break;
      }

      queue += subqueue;
      subqueue = '';
      hasEquals = false;

      /* Eat zero or more white-space and one
       * equals sign. */
      while (index < length) {
        character = value.charAt(index);

        if (!whitespace(character)) {
          if (!hasEquals && character === C_EQUALS) {
            hasEquals = true;
          } else {
            break;
          }
        }

        subqueue += character;
        index++;
      }

      queue += subqueue;
      subqueue = '';

      if (hasEquals) {
        character = value.charAt(index);
        queue += subqueue;

        if (character === C_DOUBLE_QUOTE) {
          test = isDoubleQuotedAttributeCharacter;
          subqueue = character;
          index++;
        } else if (character === C_SINGLE_QUOTE) {
          test = isSingleQuotedAttributeCharacter;
          subqueue = character;
          index++;
        } else {
          test = isUnquotedAttributeCharacter;
          subqueue = '';
        }

        while (index < length) {
          character = value.charAt(index);

          if (!test(character)) {
            break;
          }

          subqueue += character;
          index++;
        }

        character = value.charAt(index);
        index++;

        if (!test.delimiter) {
          if (!subqueue.length) {
            return;
          }

          index--;
        } else if (character === test.delimiter) {
          subqueue += character;
        } else {
          return;
        }

        queue += subqueue;
        subqueue = '';
      } else {
        queue += subqueue;
      }
    }

    /* More white-space is already eaten by the
     * attributes subroutine. */
    character = value.charAt(index);

    /* Eat an optional backslash (for self-closing
     * tags). */
    if (character === C_SLASH) {
      queue += character;
      character = value.charAt(++index);
    }

    return character === C_GT ? queue + character : null;
  }
}

/**
 * Check whether `character` can be inside an unquoted
 * attribute value.
 *
 * @param {string} character - Single character to check.
 * @return {boolean} - Whether `character` can be inside
 *   an unquoted attribute value.
 */
function isUnquotedAttributeCharacter(character) {
  return character !== C_DOUBLE_QUOTE &&
    character !== C_SINGLE_QUOTE &&
    character !== C_EQUALS &&
    character !== C_LT &&
    character !== C_GT &&
    character !== '`';
}

/**
 * Check whether `character` can be inside a double-quoted
 * attribute value.
 *
 * @property {string} delimiter - Closing delimiter.
 * @param {string} character - Single character to check.
 * @return {boolean} - Whether `character` can be inside
 *   a double-quoted attribute value.
 */
function isDoubleQuotedAttributeCharacter(character) {
  return character !== C_DOUBLE_QUOTE;
}

isDoubleQuotedAttributeCharacter.delimiter = C_DOUBLE_QUOTE;

/**
 * Check whether `character` can be inside a single-quoted
 * attribute value.
 *
 * @property {string} delimiter - Closing delimiter.
 * @param {string} character - Single character to check.
 * @return {boolean} - Whether `character` can be inside
 *   a single-quoted attribute value.
 */
function isSingleQuotedAttributeCharacter(character) {
  return character !== C_SINGLE_QUOTE;
}

isSingleQuotedAttributeCharacter.delimiter = C_SINGLE_QUOTE;

},{"../block-elements.json":222,"is-alphabetical":185,"is-decimal":189,"is-whitespace-character":191}],272:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:util:normalize
 * @fileoverview Normalize an identifier.
 */

'use strict';

/* Dependencies. */
var collapseWhiteSpace = require('collapse-white-space');

/* Expose. */
module.exports = normalize;

/**
 * Normalize an identifier.  Collapses multiple white space
 * characters into a single space, and removes casing.
 *
 * @example
 *   normalizeIdentifier('FOO\t bar'); // 'foo bar'
 *
 * @param {string} value - Content to normalize.
 * @return {string} - Normalized content.
 */
function normalize(value) {
  return collapseWhiteSpace(value).toLowerCase();
}

},{"collapse-white-space":43}],273:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:parse:util:remove-indentation
 * @fileoverview Remove indentation.
 */

'use strict';

/* Dependencies. */
var trim = require('trim');
var repeat = require('repeat-string');
var getIndent = require('./get-indentation');

/* Expose. */
module.exports = indentation;

/* Characters. */
var C_SPACE = ' ';
var C_NEWLINE = '\n';
var C_TAB = '\t';

/**
 * Remove the minimum indent from every line in `value`.
 * Supports both tab, spaced, and mixed indentation (as
 * well as possible).
 *
 * @example
 *   removeIndentation('  foo'); // 'foo'
 *   removeIndentation('    foo', 2); // '  foo'
 *   removeIndentation('\tfoo', 2); // '  foo'
 *   removeIndentation('  foo\n bar'); // ' foo\n bar'
 *
 * @param {string} value - Value to trim.
 * @param {number?} [maximum] - Maximum indentation
 *   to remove.
 * @return {string} - Unindented `value`.
 */
function indentation(value, maximum) {
  var values = value.split(C_NEWLINE);
  var position = values.length + 1;
  var minIndent = Infinity;
  var matrix = [];
  var index;
  var indentation;
  var stops;
  var padding;

  values.unshift(repeat(C_SPACE, maximum) + '!');

  while (position--) {
    indentation = getIndent(values[position]);

    matrix[position] = indentation.stops;

    if (trim(values[position]).length === 0) {
      continue;
    }

    if (indentation.indent) {
      if (indentation.indent > 0 && indentation.indent < minIndent) {
        minIndent = indentation.indent;
      }
    } else {
      minIndent = Infinity;

      break;
    }
  }

  if (minIndent !== Infinity) {
    position = values.length;

    while (position--) {
      stops = matrix[position];
      index = minIndent;

      while (index && !(index in stops)) {
        index--;
      }

      if (
        trim(values[position]).length !== 0 &&
        minIndent &&
        index !== minIndent
      ) {
        padding = C_TAB;
      } else {
        padding = '';
      }

      values[position] = padding + values[position].slice(
        index in stops ? stops[index] + 1 : 0
      );
    }
  }

  values.shift();

  return values.join(C_NEWLINE);
}

},{"./get-indentation":265,"repeat-string":321,"trim":343}],274:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify
 * @fileoverview Markdown Compiler.
 */

'use strict';

/* Dependencies. */
var unherit = require('unherit');
var Compiler = require('./lib/compiler.js');

/* Expose. */
module.exports = stringify;

/**
 * Attacher.
 *
 * @param {unified} processor - Unified processor.
 */
function stringify(processor) {
  processor.Compiler = unherit(Compiler);
}

/* Patch `Compiler`. */
stringify.Compiler = Compiler;

},{"./lib/compiler.js":275,"unherit":345}],275:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify
 * @fileoverview Markdown compiler
 */

'use strict';

/* Dependencies. */
var xtend = require('xtend');
var toggle = require('state-toggle');

/* Expose. */
module.exports = Compiler;

/**
 * Construct a new compiler.
 *
 * @constructor
 * @class {Compiler}
 * @param {File} file - Virtual file.
 * @param {Object?} [options] - Passed to
 *   `Compiler#setOptions()`.
 */
function Compiler(file, options) {
  this.inLink = this.inTable = false;
  this.file = file;
  this.options = xtend(this.options);
  this.setOptions(options);
}

/* Cache prototype. */
var proto = Compiler.prototype;

/* Enter and exit helpers. */
proto.enterLink = toggle('inLink', false);
proto.enterTable = toggle('inTable', false);
proto.enterLinkReference = require('./util/enter-link-reference');

/* Configuration. */
proto.options = require('./defaults');
proto.setOptions = require('./set-options');

proto.compile = require('./macro/compile');
proto.visit = require('./macro/one');
proto.all = require('./macro/all');
proto.block = require('./macro/block');
proto.visitOrderedItems = require('./macro/ordered-items');
proto.visitUnorderedItems = require('./macro/unordered-items');

/* Expose visitors. */
proto.visitors = {
  root: require('./visitors/root'),
  text: require('./visitors/text'),
  heading: require('./visitors/heading'),
  paragraph: require('./visitors/paragraph'),
  blockquote: require('./visitors/blockquote'),
  list: require('./visitors/list'),
  listItem: require('./visitors/list-item'),
  inlineCode: require('./visitors/inline-code'),
  yaml: require('./visitors/yaml'),
  code: require('./visitors/code'),
  html: require('./visitors/html'),
  thematicBreak: require('./visitors/thematic-break'),
  strong: require('./visitors/strong'),
  emphasis: require('./visitors/emphasis'),
  break: require('./visitors/break'),
  delete: require('./visitors/delete'),
  link: require('./visitors/link'),
  linkReference: require('./visitors/link-reference'),
  imageReference: require('./visitors/image-reference'),
  definition: require('./visitors/definition'),
  image: require('./visitors/image'),
  footnote: require('./visitors/footnote'),
  footnoteReference: require('./visitors/footnote-reference'),
  footnoteDefinition: require('./visitors/footnote-definition'),
  table: require('./visitors/table'),
  tableCell: require('./visitors/table-cell')
};

},{"./defaults":276,"./macro/all":278,"./macro/block":279,"./macro/compile":280,"./macro/one":281,"./macro/ordered-items":282,"./macro/unordered-items":283,"./set-options":284,"./util/enter-link-reference":288,"./visitors/blockquote":293,"./visitors/break":294,"./visitors/code":295,"./visitors/definition":296,"./visitors/delete":297,"./visitors/emphasis":298,"./visitors/footnote":301,"./visitors/footnote-definition":299,"./visitors/footnote-reference":300,"./visitors/heading":302,"./visitors/html":303,"./visitors/image":305,"./visitors/image-reference":304,"./visitors/inline-code":306,"./visitors/link":308,"./visitors/link-reference":307,"./visitors/list":310,"./visitors/list-item":309,"./visitors/paragraph":311,"./visitors/root":312,"./visitors/strong":313,"./visitors/table":315,"./visitors/table-cell":314,"./visitors/text":316,"./visitors/thematic-break":317,"./visitors/yaml":318,"state-toggle":334,"xtend":375}],276:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:defaults
 * @fileoverview Default options for `stringify`.
 */

'use strict';

module.exports = {
  gfm: true,
  commonmark: false,
  pedantic: false,
  entities: 'false',
  setext: false,
  closeAtx: false,
  looseTable: false,
  spacedTable: true,
  incrementListMarker: true,
  fences: false,
  fence: '`',
  bullet: '-',
  listItemIndent: 'tab',
  rule: '*',
  ruleSpaces: true,
  ruleRepetition: 3,
  strong: '*',
  emphasis: '_'
};

},{}],277:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:escape
 * @fileoverview Escape text to prevent it turning
 *   into markdown syntax.
 */

'use strict';

/* Dependencies. */
var decimal = require('is-decimal');
var alphanumeric = require('is-alphanumeric');
var whitespace = require('is-whitespace-character');
var escapes = require('markdown-escapes');
var prefix = require('./util/entity-prefix-length');

/* Expose. */
module.exports = factory;

/* Constants. */
var BACKSLASH = '\\';
var BULLETS = ['*', '-', '+'];
var ALLIGNMENT = [':', '-', ' ', '|'];
var entities = {'<': '&lt;', ':': '&#x3A;', '&': '&amp;', '|': '&#x7C;', '~': '&#x7E;'};

/**
 * Factory to escape characters.
 *
 * @example
 *   var escape = escapeFactory({ commonmark: true });
 *   escape('x*x', { type: 'text', value: 'x*x' }) // 'x\\*x'
 *
 * @param {Object} options - Compiler options.
 * @return {function(value, node, parent): string} - Function which
 *   takes a value and a node and (optionally) its parent and returns
 *   its escaped value.
 */
function factory(options) {
  return escape;

  /**
   * Escape punctuation characters in a node's value.
   *
   * @param {string} value - Value to escape.
   * @param {Object} node - Node in which `value` exists.
   * @param {Object} [parent] - Parent of `node`.
   * @return {string} - Escaped `value`.
   */
  function escape(value, node, parent) {
    var self = this;
    var gfm = options.gfm;
    var commonmark = options.commonmark;
    var pedantic = options.pedantic;
    var markers = commonmark ? ['.', ')'] : ['.'];
    var siblings = parent && parent.children;
    var index = siblings && siblings.indexOf(node);
    var prev = siblings && siblings[index - 1];
    var next = siblings && siblings[index + 1];
    var length = value.length;
    var escapable = escapes(options);
    var position = -1;
    var queue = [];
    var escaped = queue;
    var afterNewLine;
    var character;
    var wordCharBefore;
    var wordCharAfter;
    var offset;
    var replace;

    if (prev) {
      afterNewLine = text(prev) && /\n\s*$/.test(prev.value);
    } else {
      afterNewLine = !parent || parent.type === 'root' || parent.type === 'paragraph';
    }

    function one(character) {
      return escapable.indexOf(character) === -1 ?
        entities[character] : BACKSLASH + character;
    }

    while (++position < length) {
      character = value.charAt(position);
      replace = false;

      if (character === '\n') {
        afterNewLine = true;
      } else if (
        character === BACKSLASH ||
        character === '`' ||
        character === '*' ||
        character === '[' ||
        character === '<' ||
        (character === '&' && prefix(value.slice(position)) > 0) ||
        (character === ']' && self.inLink) ||
        (gfm && character === '~' && value.charAt(position + 1) === '~') ||
        (gfm && character === '|' && (self.inTable || alignment(value, position))) ||
        (
          character === '_' &&
          /* Delegate leading/trailing underscores
           * to the multinode version below. */
          position > 0 &&
          position < length - 1 &&
          (
              pedantic ||
              !alphanumeric(value.charAt(position - 1)) ||
              !alphanumeric(value.charAt(position + 1))
          )
        ) ||
        (gfm && !self.inLink && character === ':' && protocol(queue.join('')))
      ) {
        replace = true;
      } else if (afterNewLine) {
        if (
          character === '>' ||
          character === '#' ||
          BULLETS.indexOf(character) !== -1
        ) {
          replace = true;
        } else if (decimal(character)) {
          offset = position + 1;

          while (offset < length) {
            if (!decimal(value.charAt(offset))) {
              break;
            }

            offset++;
          }

          if (markers.indexOf(value.charAt(offset)) !== -1) {
            queue.push(value.slice(position, offset));
            position = offset;
            character = value.charAt(position);
            replace = true;
          }
        }
      }

      if (afterNewLine && !whitespace(character)) {
        afterNewLine = false;
      }

      queue.push(replace ? one(character) : character);
    }

    /* Multi-node versions. */
    if (siblings && text(node)) {
      /* Check for an opening parentheses after a
       * link-reference (which can be joined by
       * white-space). */
      if (prev && prev.referenceType === 'shortcut') {
        position = -1;
        length = escaped.length;

        while (++position < length) {
          character = escaped[position];

          if (character === ' ' || character === '\t') {
            continue;
          }

          if (character === '(' || character === ':') {
            escaped[position] = one(character);
          }

          break;
        }

        /* If the current node is all spaces / tabs,
         * preceded by a shortcut, and followed by
         * a text starting with `(`, escape it. */
        if (
          text(next) &&
          position === length &&
          next.value.charAt(0) === '('
        ) {
          escaped.push(BACKSLASH);
        }
      }

      /* Ensure non-auto-links are not seen as links.
       * This pattern needs to check the preceding
       * nodes too. */
      if (
        gfm &&
        !self.inLink &&
        text(prev) &&
        value.charAt(0) === ':' &&
        protocol(prev.value.slice(-6))
      ) {
        escaped[0] = one(':');
      }

      /* Escape ampersand if it would otherwise
       * start an entity. */
      if (
        text(next) &&
        value.charAt(length - 1) === '&' &&
        prefix('&' + next.value) !== 0
      ) {
        escaped[escaped.length - 1] = one('&');
      }

      /* Escape double tildes in GFM. */
      if (
        gfm &&
        text(next) &&
        value.charAt(length - 1) === '~' &&
        next.value.charAt(0) === '~'
      ) {
        escaped.splice(escaped.length - 1, 0, BACKSLASH);
      }

      /* Escape underscores, but not mid-word (unless
       * in pedantic mode). */
      wordCharBefore = text(prev) && alphanumeric(prev.value.slice(-1));
      wordCharAfter = text(next) && alphanumeric(next.value.charAt(0));

      if (length === 1) {
        if (value === '_' && (pedantic || !wordCharBefore || !wordCharAfter)) {
          escaped.unshift(BACKSLASH);
        }
      } else {
        if (
          value.charAt(0) === '_' &&
          (pedantic || !wordCharBefore || !alphanumeric(value.charAt(1)))
        ) {
          escaped.unshift(BACKSLASH);
        }

        if (
          value.charAt(length - 1) === '_' &&
          (pedantic || !wordCharAfter || !alphanumeric(value.charAt(length - 2)))
        ) {
          escaped.splice(escaped.length - 1, 0, BACKSLASH);
        }
      }
    }

    return escaped.join('');
  }
}

/**
 * Check if `index` in `value` is inside an alignment row.
 */
function alignment(value, index) {
  var start = value.lastIndexOf('\n', index);
  var end = value.indexOf('\n', index);

  start = start === -1 ? -1 : start;
  end = end === -1 ? value.length : end;

  while (++start < end) {
    if (ALLIGNMENT.indexOf(value.charAt(start)) === -1) {
      return false;
    }
  }

  return true;
}

/**
 * Check if `node` is a text node.
 */
function text(node) {
  return node && node.type === 'text';
}

/**
 * Check if `value` ends in a protocol.
 */
function protocol(value) {
  var val = value.slice(-6).toLowerCase();
  return val === 'mailto' || val.slice(-5) === 'https' || val.slice(-4) === 'http';
}

},{"./util/entity-prefix-length":289,"is-alphanumeric":186,"is-decimal":189,"is-whitespace-character":191,"markdown-escapes":197}],278:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:macro:all
 * @fileoverview Stringify children in a node.
 */

'use strict';

/* Expose. */
module.exports = all;

/**
 * Visit all children of `parent`.
 *
 * @param {Object} parent - Parent node of children.
 * @return {Array.<string>} - List of compiled children.
 */
function all(parent) {
  var self = this;
  var children = parent.children;
  var length = children.length;
  var results = [];
  var index = -1;

  while (++index < length) {
    results[index] = self.visit(children[index], parent);
  }

  return results;
}

},{}],279:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:macro:block
 * @fileoverview Stringify a block.
 */

'use strict';

/* Expose. */
module.exports = block;

/**
 * Stringify a block node with block children (e.g., `root`
 * or `blockquote`).
 *
 * Knows about code following a list, or adjacent lists
 * with similar bullets, and places an extra newline
 * between them.
 *
 * @param {Object} node
 * @return {string} - Compiled children.
 */
function block(node) {
  var self = this;
  var values = [];
  var children = node.children;
  var length = children.length;
  var index = -1;
  var child;
  var prev;

  while (++index < length) {
    child = children[index];

    if (prev) {
      /* Duplicate nodes, such as a list
       * directly following another list,
       * often need multiple new lines.
       *
       * Additionally, code blocks following a list
       * might easily be mistaken for a paragraph
       * in the list itself. */
      if (child.type === prev.type && prev.type === 'list') {
        values.push(prev.ordered === child.ordered ? '\n\n\n' : '\n\n');
      } else if (prev.type === 'list' && child.type === 'code' && !child.lang) {
        values.push('\n\n\n');
      } else {
        values.push('\n\n');
      }
    }

    values.push(self.visit(child, node));

    prev = child;
  }

  return values.join('');
}

},{}],280:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:macro:compile
 * @fileoverview Compile the given node.
 */

'use strict';

/* Dependencies. */
var compact = require('mdast-util-compact');

/* Expose. */
module.exports = compile;

/**
 * Stringify the given tree.
 *
 * @param {Node} node - Syntax tree.
 * @return {string} - Markdown document.
 */
function compile(node) {
  return this.visit(compact(node, this.options.commonmark));
}

},{"mdast-util-compact":199}],281:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:macro:one
 * @fileoverview Stringify a node.
 */

'use strict';

/* Expose. */
module.exports = one;

/**
 * Visit a node.
 *
 * @param {Object} node - Node.
 * @param {Object?} [parent] - `node`s parent.
 * @return {string} - Compiled `node`.
 */
function one(node, parent) {
  var self = this;
  var visitors = self.visitors;

  /* Fail on unknown nodes. */
  if (typeof visitors[node.type] !== 'function') {
    self.file.fail(
      'Missing compiler for node of type `' +
      node.type + '`: `' + node + '`',
      node
    );
  }

  return visitors[node.type].call(self, node, parent);
}

},{}],282:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:macro:ordered-items
 * @fileoverview Stringify ordered list items.
 */

'use strict';

/* Expose. */
module.exports = orderedItems;

/**
 * Visit ordered list items.
 *
 * Starts the list with
 * `node.start` and increments each following list item
 * bullet by one:
 *
 *     2. foo
 *     3. bar
 *
 * In `incrementListMarker: false` mode, does not increment
 * each marker and stays on `node.start`:
 *
 *     1. foo
 *     1. bar
 *
 * Adds an extra line after an item if it has
 * `loose: true`.
 *
 * @param {Object} node - `list` node with
 *   `ordered: true`.
 * @return {string} - Compiled children.
 */
function orderedItems(node) {
  var self = this;
  var fn = self.visitors.listItem;
  var increment = self.options.incrementListMarker;
  var values = [];
  var start = node.start;
  var children = node.children;
  var length = children.length;
  var index = -1;
  var bullet;

  while (++index < length) {
    bullet = (increment ? start + index : start) + '.';
    values[index] = fn.call(self, children[index], node, index, bullet);
  }

  return values.join('\n');
}

},{}],283:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:macro:unordered-items
 * @fileoverview Stringify unordered list items.
 */

'use strict';

/* Expose. */
module.exports = unorderedItems;

/**
 * Visit unordered list items.
 *
 * Uses `options.bullet` as each item's bullet.
 *
 * @param {Object} node - `list` node with
 *   `ordered: false`.
 * @return {string} - Compiled children.
 */
function unorderedItems(node) {
  var self = this;
  var bullet = self.options.bullet;
  var fn = self.visitors.listItem;
  var children = node.children;
  var length = children.length;
  var index = -1;
  var values = [];

  while (++index < length) {
    values[index] = fn.call(self, children[index], node, index, bullet);
  }

  return values.join('\n');
}

},{}],284:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:set-options
 * @fileoverview Set configuration.
 */

'use strict';

/* Dependencies. */
var xtend = require('xtend');
var encode = require('stringify-entities');
var defaults = require('./defaults');
var escapeFactory = require('./escape');
var returner = require('./util/returner');

/* Expose. */
module.exports = setOptions;

/* Map of applicable enum's. */
var maps = {
  entities: {true: true, false: true, numbers: true, escape: true},
  bullet: {'*': true, '-': true, '+': true},
  rule: {'-': true, '_': true, '*': true},
  listItemIndent: {tab: true, mixed: true, 1: true},
  emphasis: {'_': true, '*': true},
  strong: {'_': true, '*': true},
  fence: {'`': true, '~': true}
};

/* Expose `validate`. */
var validate = {
  boolean: validateBoolean,
  string: validateString,
  number: validateNumber
};

/**
 * Set options.  Does not overwrite previously set
 * options.
 *
 * @this {Compiler}
 * @throws {Error} - When an option is invalid.
 * @param {Object?} [options] - Stringify settings.
 * @return {Compiler} - `self`.
 */
function setOptions(options) {
  var self = this;
  var current = self.options;
  var ruleRepetition;
  var key;

  if (options == null) {
    options = {};
  } else if (typeof options === 'object') {
    options = xtend(options);
  } else {
    throw new Error('Invalid value `' + options + '` for setting `options`');
  }

  for (key in defaults) {
    validate[typeof current[key]](options, key, current[key], maps[key]);
  }

  ruleRepetition = options.ruleRepetition;

  if (ruleRepetition && ruleRepetition < 3) {
    raise(ruleRepetition, 'options.ruleRepetition');
  }

  self.encode = encodeFactory(String(options.entities));
  self.escape = escapeFactory(options);

  self.options = options;

  return self;
}

/**
 * Throw an exception with in its `message` `value`
 * and `name`.
 *
 * @param {*} value - Invalid value.
 * @param {string} name - Setting name.
 */
function raise(value, name) {
  throw new Error('Invalid value `' + value + '` for setting `' + name + '`');
}

/**
 * Validate a value to be boolean. Defaults to `def`.
 * Raises an exception with `context[name]` when not
 * a boolean.
 *
 * @throws {Error} - When a setting is neither omitted nor
 *   a boolean.
 * @param {Object} context - Settings.
 * @param {string} name - Setting name.
 * @param {boolean} def - Default value.
 */
function validateBoolean(context, name, def) {
  var value = context[name];

  if (value == null) {
    value = def;
  }

  if (typeof value !== 'boolean') {
    raise(value, 'options.' + name);
  }

  context[name] = value;
}

/**
 * Validate a value to be boolean. Defaults to `def`.
 * Raises an exception with `context[name]` when not
 * a boolean.
 *
 * @throws {Error} - When a setting is neither omitted nor
 *   a number.
 * @param {Object} context - Settings.
 * @param {string} name - Setting name.
 * @param {number} def - Default value.
 */
function validateNumber(context, name, def) {
  var value = context[name];

  if (value == null) {
    value = def;
  }

  if (isNaN(value)) {
    raise(value, 'options.' + name);
  }

  context[name] = value;
}

/**
 * Validate a value to be in `map`. Defaults to `def`.
 * Raises an exception with `context[name]` when not
 * in `map`.
 *
 * @throws {Error} - When a setting is neither omitted nor
 *   in `map`.
 * @param {Object} context - Settings.
 * @param {string} name - Setting name.
 * @param {string} def - Default value.
 * @param {Object} map - Enum.
 */
function validateString(context, name, def, map) {
  var value = context[name];

  if (value == null) {
    value = def;
  }

  if (!(value in map)) {
    raise(value, 'options.' + name);
  }

  context[name] = value;
}

/**
 * Factory to encode HTML entities.
 * Creates a no-operation function when `type` is
 * `'false'`, a function which encodes using named
 * references when `type` is `'true'`, and a function
 * which encodes using numbered references when `type` is
 * `'numbers'`.
 *
 * @param {string} type - Either `'true'`, `'false'`, or
 *   `'numbers'`.
 * @return {function(string): string} - Function which
 *   takes a value and returns its encoded version.
 */
function encodeFactory(type) {
  var options = {};

  if (type === 'false') {
    return returner;
  }

  if (type === 'true') {
    options.useNamedReferences = true;
  }

  if (type === 'escape') {
    options.escapeOnly = options.useNamedReferences = true;
  }

  return wrapped;

  /**
   * Encode HTML entities using the bound options.
   *
   * @param {string} value - Content.
   * @param {Object} [node] - Node which is compiled.
   * @return {string} - Encoded content.
   */
  function wrapped(value) {
    return encode(value, options);
  }
}

},{"./defaults":276,"./escape":277,"./util/returner":292,"stringify-entities":336,"xtend":375}],285:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:util:copy-identifier-encoding
 * @fileoverview Encode based on the identifier.
 */

'use strict';

/* Dependencies. */
var entityPrefixLength = require('./entity-prefix-length');

/* Expose. */
module.exports = copy;

/* Punctuation characters. */
var PUNCTUATION = /[-!"#$%&'()*+,.\/:;<=>?@\[\\\]^`{|}~_]/;

/**
 * For shortcut and collapsed reference links, the contents
 * is also an identifier, so we need to restore the original
 * encoding and escaping that were present in the source
 * string.
 *
 * This function takes the unescaped & unencoded value from
 * shortcut's child nodes and the identifier and encodes
 * the former according to the latter.
 *
 * @example
 *   copyIdentifierEncoding('a*b', 'a\\*b*c')
 *   // 'a\\*b*c'
 *
 * @param {string} value - Unescaped and unencoded stringified
 *   link value.
 * @param {string} identifier - Link identifier.
 * @return {string} - Encoded link value.
 */
function copy(value, identifier) {
  var length = value.length;
  var count = identifier.length;
  var result = [];
  var position = 0;
  var index = 0;
  var start;

  while (index < length) {
    /* Take next non-punctuation characters from `value`. */
    start = index;

    while (index < length && !PUNCTUATION.test(value.charAt(index))) {
      index += 1;
    }

    result.push(value.slice(start, index));

    /* Advance `position` to the next punctuation character. */
    while (position < count && !PUNCTUATION.test(identifier.charAt(position))) {
      position += 1;
    }

    /* Take next punctuation characters from `identifier`. */
    start = position;

    while (position < count && PUNCTUATION.test(identifier.charAt(position))) {
      if (identifier.charAt(position) === '&') {
        position += entityPrefixLength(identifier.slice(position));
      }

      position += 1;
    }

    result.push(identifier.slice(start, position));

    /* Advance `index` to the next non-punctuation character. */
    while (index < length && PUNCTUATION.test(value.charAt(index))) {
      index += 1;
    }
  }

  return result.join('');
}

},{"./entity-prefix-length":289}],286:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:util:enclose-title
 * @fileoverview Quote a `title` the best way possible.
 */

'use strict';

/* Expose. */
module.exports = enclose;

/**
 * There is currently no way to support nested delimiters
 * across Markdown.pl, CommonMark, and GitHub (RedCarpet).
 * The following code supports Markdown.pl and GitHub.
 * CommonMark is not supported when mixing double- and
 * single quotes inside a title.
 *
 * @see https://github.com/vmg/redcarpet/issues/473
 * @see https://github.com/jgm/CommonMark/issues/308
 *
 * @example
 *   encloseTitle('foo') // '"foo"'
 *   encloseTitle('foo \'bar\' baz') // '"foo \'bar\' baz"'
 *   encloseTitle('foo "bar" baz') // '\'foo "bar" baz\''
 *   encloseTitle('foo "bar" \'baz\'') // '"foo "bar" \'baz\'"'
 *
 * @param {string} title - Content.
 * @return {string} - Properly enclosed title.
 */
function enclose(title) {
  var delimiter = title.indexOf('"') === -1 ? '"' : '\'';
  return delimiter + title + delimiter;
}

},{}],287:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:util:enclose-uri
 * @fileoverview Wrap `url` in angle brackets when needed.
 */

'use strict';

/* Dependencies. */
var count = require('ccount');

/* Expose. */
module.exports = enclose;

/* Constants. */
var re = /\s/;

/**
 * Wrap `url` in angle brackets when needed, or when
 * forced.
 *
 * In links, images, and definitions, the URL part needs
 * to be enclosed when it:
 *
 * - has a length of `0`;
 * - contains white-space;
 * - has more or less opening than closing parentheses.
 *
 * @example
 *   encloseURI('foo bar') // '<foo bar>'
 *   encloseURI('foo(bar(baz)') // '<foo(bar(baz)>'
 *   encloseURI('') // '<>'
 *   encloseURI('example.com') // 'example.com'
 *   encloseURI('example.com', true) // '<example.com>'
 *
 * @param {string} uri - URI to enclose.
 * @param {boolean?} [always] - Force enclosing.
 * @return {boolean} - Properly enclosed `uri`.
 */
function enclose(uri, always) {
  if (always || !uri.length || re.test(uri) || count(uri, '(') !== count(uri, ')')) {
    return '<' + uri + '>';
  }

  return uri;
}

},{"ccount":34}],288:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:util:enter-link-reference
 * @fileoverview Enter a reference.
 */

'use strict';

/* Dependencies. */
var returner = require('./returner');

/* Expose. */
module.exports = enter;

/**
 * Shortcut and collapsed link references need no escaping
 * and encoding during the processing of child nodes (it
 * must be implied from identifier).
 *
 * This toggler turns encoding and escaping off for shortcut
 * and collapsed references.
 *
 * Implies `enterLink`.
 *
 * @param {Compiler} compiler - Compiler instance.
 * @param {LinkReference} node - LinkReference node.
 * @return {Function} - Exit state.
 */
function enter(compiler, node) {
  var encode = compiler.encode;
  var escape = compiler.escape;
  var exit = compiler.enterLink();

  if (
    node.referenceType !== 'shortcut' &&
    node.referenceType !== 'collapsed'
  ) {
    return exit;
  }

  compiler.encode = compiler.escape = returner;

  return function () {
    compiler.encode = encode;
    compiler.escape = escape;
    exit();
  };
}

},{"./returner":292}],289:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:util:entity-prefix-length
 * @fileoverview Encode based on the identifier.
 */

'use strict';

/* Dependencies. */
var decode = require('parse-entities');

/* Expose. */
module.exports = length;

/**
 * Returns the length of HTML entity that is a prefix of
 * the given string (excluding the ampersand), 0 if it
 * does not start with an entity.
 *
 * @example
 *   entityPrefixLength('&copycat') // 4
 *   entityPrefixLength('&foo &amp &bar') // 0
 *
 * @param {string} value - Input string.
 * @return {number} - Length of an entity.
 */
function length(value) {
  var prefix;

  /* istanbul ignore if - Currently also tested for at
   * implemention, but we keep it here because that’s
   * proper. */
  if (value.charAt(0) !== '&') {
    return 0;
  }

  prefix = value.split('&', 2).join('&');

  return prefix.length - decode(prefix).length;
}

},{"parse-entities":205}],290:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:util:label
 * @fileoverview Stringify a reference label.
 */

'use strict';

/* Expose. */
module.exports = label;

/**
 * Stringify a reference label.
 *
 * Because link references are easily, mistakingly,
 * created (for example, `[foo]`), reference nodes have
 * an extra property depicting how it looked in the
 * original document, so stringification can cause minimal
 * changes.
 *
 * @param {Object} node - `linkReference` or
 *   `imageReference` node.
 * @return {string} - Markdown label reference.
 */
function label(node) {
  var type = node.referenceType;
  var value = type === 'full' ? node.identifier : '';

  return type === 'shortcut' ? value : '[' + value + ']';
}

},{}],291:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:util:pad
 * @fileoverview Pad a given value.
 */

'use strict';

/* Dependencies. */
var repeat = require('repeat-string');

/* Expose. */
module.exports = pad;

/* Constants. */
var INDENT = 4;

/**
 * Pad `value` with `level * INDENT` spaces.  Respects
 * lines. Ignores empty lines.
 *
 * @example
 *   pad('foo', 1) // '    foo'
 *
 * @param {string} value - Content.
 * @param {number} level - Indentation level.
 * @return {string} - Padded `value`.
 */
function pad(value, level) {
  var index;
  var padding;

  value = value.split('\n');

  index = value.length;
  padding = repeat(' ', level * INDENT);

  while (index--) {
    if (value[index].length !== 0) {
      value[index] = padding + value[index];
    }
  }

  return value.join('\n');
}

},{"repeat-string":321}],292:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:util:returner
 * @fileoverview Return the given value.
 */

'use strict';

/* Expose. */
module.exports = returner;

/**
 * @param {*} value - Anything.
 * @return {*} - Given `value`.
 */
function returner(value) {
  return value;
}

},{}],293:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:blockquote
 * @fileoverview Stringify a blockquote.
 */

'use strict';

/* Expose. */
module.exports = blockquote;

/**
 * Stringify a blockquote.
 *
 * @param {Object} node - `blockquote` node.
 * @return {string} - Markdown blockquote.
 */
function blockquote(node) {
  var values = this.block(node).split('\n');
  var result = [];
  var length = values.length;
  var index = -1;
  var value;

  while (++index < length) {
    value = values[index];
    result[index] = (value ? ' ' : '') + value;
  }

  return '>' + result.join('\n>');
}

},{}],294:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:break
 * @fileoverview Stringify a break.
 */

'use strict';

/* Expose. */
module.exports = lineBreak;

/* Constants. */
var map = {true: '\\\n', false: '  \n'};

/**
 * Stringify a hard break.
 *
 * In Commonmark mode, trailing backslash form is used in order
 * to preserve trailing whitespace that the line may end with,
 * and also for better visibility.
 *
 * @return {string} - Markdown break.
 */
function lineBreak() {
  return map[this.options.commonmark];
}

},{}],295:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:code
 * @fileoverview Stringify code.
 */

'use strict';

/* Dependencies. */
var streak = require('longest-streak');
var repeat = require('repeat-string');
var pad = require('../util/pad');

/* Expose. */
module.exports = code;

/* Constants. */
var FENCE = /([`~])\1{2}/;

/**
 * Stringify code.
 *
 * Creates indented code when:
 *
 * - No language tag exists;
 * - Not in `fences: true` mode;
 * - A non-empty value exists.
 *
 * Otherwise, GFM fenced code is created:
 *
 *     ```js
 *     foo();
 *     ```
 *
 * When in ``fence: `~` `` mode, uses tildes as fences:
 *
 *     ~~~js
 *     foo();
 *     ~~~
 *
 * Knows about internal fences (Note: GitHub/Kramdown does
 * not support this):
 *
 *     ````javascript
 *     ```markdown
 *     foo
 *     ```
 *     ````
 *
 * Supports named entities in the language flag with
 * `settings.encode` mode.
 *
 * @param {Object} node - `code` node.
 * @param {Object} parent - Parent of `node`.
 * @return {string} - Markdown code.
 */
function code(node, parent) {
  var self = this;
  var value = node.value;
  var options = self.options;
  var marker = options.fence;
  var language = self.encode(node.lang || '', node);
  var fence;

  /* Without (needed) fences. */
  if (!language && !options.fences && value) {
    /* Throw when pedantic, in a list item which
     * isn’t compiled using a tab. */
    if (
      parent &&
      parent.type === 'listItem' &&
      options.listItemIndent !== 'tab' &&
      options.pedantic
    ) {
      self.file.fail(
        'Cannot indent code properly. See http://git.io/vgFvT',
        node.position
      );
    }

    return pad(value, 1);
  }

  fence = streak(value, marker) + 1;

  /* Fix GFM / RedCarpet bug, where fence-like characters
   * inside fenced code can exit a code-block.
   * Yes, even when the outer fence uses different
   * characters, or is longer.
   * Thus, we can only pad the code to make it work. */
  if (FENCE.test(value)) {
    value = pad(value, 1);
  }

  fence = repeat(marker, Math.max(fence, 3));

  return fence + language + '\n' + value + '\n' + fence;
}

},{"../util/pad":291,"longest-streak":194,"repeat-string":321}],296:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:definition
 * @fileoverview Stringify a definition.
 */

'use strict';

/* Dependencies. */
var uri = require('../util/enclose-uri');
var title = require('../util/enclose-title');

/* Expose. */
module.exports = definition;

/**
 * Stringify an URL definition.
 *
 * Is smart about enclosing `url` (see `encloseURI()`) and
 * `title` (see `encloseTitle()`).
 *
 *    [foo]: <foo at bar dot com> 'An "example" e-mail'
 *
 * @param {Object} node - `definition` node.
 * @return {string} - Markdown definition.
 */
function definition(node) {
  var content = uri(node.url);

  if (node.title) {
    content += ' ' + title(node.title);
  }

  return '[' + node.identifier + ']: ' + content;
}

},{"../util/enclose-title":286,"../util/enclose-uri":287}],297:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:delete
 * @fileoverview Stringify a delete.
 */

'use strict';

/* Expose. */
module.exports = strikethrough;

/**
 * Stringify a `delete`.
 *
 * @param {Object} node - `delete` node.
 * @return {string} - Markdown strikethrough.
 */
function strikethrough(node) {
  return '~~' + this.all(node).join('') + '~~';
}

},{}],298:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:emphasis
 * @fileoverview Stringify a emphasis.
 */

'use strict';

/* Expose. */
module.exports = emphasis;

/**
 * Stringify a `emphasis`.
 *
 * The marker used is configurable through `emphasis`, which
 * defaults to an underscore (`'_'`) but also accepts an
 * asterisk (`'*'`):
 *
 *     *foo*
 *
 * @param {Object} node - `emphasis` node.
 * @return {string} - Markdown emphasis.
 */
function emphasis(node) {
  var marker = this.options.emphasis;
  return marker + this.all(node).join('') + marker;
}

},{}],299:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:footnote-definition
 * @fileoverview Stringify a footnote-definition.
 */

'use strict';

/* Dependencies. */
var repeat = require('repeat-string');

/* Expose. */
module.exports = footnoteDefinition;

/**
 * Stringify a footnote definition.
 *
 * @param {Object} node - `footnoteDefinition` node.
 * @return {string} - Markdown footnote definition.
 */
function footnoteDefinition(node) {
  var id = node.identifier.toLowerCase();
  var content = this.all(node).join('\n\n' + repeat(' ', 4));

  return '[^' + id + ']: ' + content;
}

},{"repeat-string":321}],300:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:footnote-reference
 * @fileoverview Stringify a footnote reference.
 */

'use strict';

/* Expose. */
module.exports = footnoteReference;

/**
 * Stringify a footnote reference.
 *
 * @param {Object} node - `footnoteReference` node.
 * @return {string} - Markdown footnote reference.
 */
function footnoteReference(node) {
  return '[^' + node.identifier + ']';
}

},{}],301:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:footnote
 * @fileoverview Stringify a footnote.
 */

'use strict';

/* Expose. */
module.exports = footnote;

/**
 * Stringify a footnote.
 *
 * @param {Object} node - `footnote` node.
 * @return {string} - Markdown footnote.
 */
function footnote(node) {
  return '[^' + this.all(node).join('') + ']';
}

},{}],302:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:heading
 * @fileoverview Stringify a heading.
 */

'use strict';

/* Dependencies. */
var repeat = require('repeat-string');

/* Expose. */
module.exports = heading;

/**
 * Stringify heading.
 *
 * In `setext: true` mode and when `depth` is smaller than
 * three, creates a setext header:
 *
 *     Foo
 *     ===
 *
 * Otherwise, an ATX header is generated:
 *
 *     ### Foo
 *
 * In `closeAtx: true` mode, the header is closed with
 * hashes:
 *
 *     ### Foo ###
 *
 * @param {Object} node - `heading` node.
 * @return {string} - Markdown heading.
 */
function heading(node) {
  var self = this;
  var depth = node.depth;
  var setext = self.options.setext;
  var closeAtx = self.options.closeAtx;
  var content = self.all(node).join('');
  var prefix;

  if (setext && depth < 3) {
    return content + '\n' + repeat(depth === 1 ? '=' : '-', content.length);
  }

  prefix = repeat('#', node.depth);

  return prefix + ' ' + content + (closeAtx ? ' ' + prefix : '');
}

},{"repeat-string":321}],303:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:html
 * @fileoverview Stringify html.
 */

'use strict';

/* Expose. */
module.exports = html;

/**
 * Stringify html.
 *
 * @param {Object} node - `html` node.
 * @return {string} - html.
 */
function html(node) {
  return node.value;
}

},{}],304:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:image-reference
 * @fileoverview Stringify an image reference.
 */

'use strict';

/* Dependencies. */
var label = require('../util/label');

/* Expose. */
module.exports = imageReference;

/**
 * Stringify an image reference.
 *
 * @param {Object} node - `imageReference` node.
 * @return {string} - Markdown image reference.
 */
function imageReference(node) {
  return '![' + (this.encode(node.alt, node) || '') + ']' + label(node);
}

},{"../util/label":290}],305:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:image
 * @fileoverview Stringify an image.
 */

'use strict';

/* Dependencies. */
var uri = require('../util/enclose-uri');
var title = require('../util/enclose-title');

/* Expose. */
module.exports = image;

/**
 * Stringify an image.
 *
 * Is smart about enclosing `url` (see `encloseURI()`) and
 * `title` (see `encloseTitle()`).
 *
 *    ![foo](</fav icon.png> 'My "favourite" icon')
 *
 * Supports named entities in `url`, `alt`, and `title`
 * when in `settings.encode` mode.
 *
 * @param {Object} node - `image` node.
 * @return {string} - Markdown image.
 */
function image(node) {
  var self = this;
  var content = uri(self.encode(node.url || '', node));
  var exit = self.enterLink();
  var alt = self.encode(self.escape(node.alt || '', node));

  exit();

  if (node.title) {
    content += ' ' + title(self.encode(node.title, node));
  }

  return '![' + alt + '](' + content + ')';
}

},{"../util/enclose-title":286,"../util/enclose-uri":287}],306:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:inline-code
 * @fileoverview Stringify inline code.
 */

'use strict';

/* Dependencies. */
var streak = require('longest-streak');
var repeat = require('repeat-string');

/* Expose. */
module.exports = inlineCode;

/**
 * Stringify inline code.
 *
 * Knows about internal ticks (`\``), and ensures one more
 * tick is used to enclose the inline code:
 *
 *     ```foo ``bar`` baz```
 *
 * Even knows about inital and final ticks:
 *
 *     `` `foo ``
 *     `` foo` ``
 *
 * @param {Object} node - `inlineCode` node.
 * @return {string} - Markdown inline code.
 */
function inlineCode(node) {
  var value = node.value;
  var ticks = repeat('`', streak(value, '`') + 1);
  var start = ticks;
  var end = ticks;

  if (value.charAt(0) === '`') {
    start += ' ';
  }

  if (value.charAt(value.length - 1) === '`') {
    end = ' ' + end;
  }

  return start + value + end;
}

},{"longest-streak":194,"repeat-string":321}],307:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:link-reference
 * @fileoverview Stringify a link reference.
 */

'use strict';

/* Dependencies. */
var copy = require('../util/copy-identifier-encoding');
var label = require('../util/label');

/* Expose. */
module.exports = linkReference;

/**
 * Stringify a link reference.
 *
 * @param {Object} node - `linkReference` node.
 * @return {string} - Markdown link reference.
 */
function linkReference(node) {
  var self = this;
  var type = node.referenceType;
  var exit = self.enterLinkReference(self, node);
  var value = self.all(node).join('');

  exit();

  if (type === 'shortcut' || type === 'collapsed') {
    value = copy(value, node.identifier);
  }

  return '[' + value + ']' + label(node);
}

},{"../util/copy-identifier-encoding":285,"../util/label":290}],308:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:link
 * @fileoverview Stringify a link.
 */

'use strict';

/* Dependencies. */
var uri = require('../util/enclose-uri');
var title = require('../util/enclose-title');

/* Expose. */
module.exports = link;

/* Expression for a protocol:
 * http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax */
var PROTOCOL = /^[a-z][a-z+.-]+:\/?/i;

/**
 * Stringify a link.
 *
 * When no title exists, the compiled `children` equal
 * `url`, and `url` starts with a protocol, an auto
 * link is created:
 *
 *     <http://example.com>
 *
 * Otherwise, is smart about enclosing `url` (see
 * `encloseURI()`) and `title` (see `encloseTitle()`).
 *
 *    [foo](<foo at bar dot com> 'An "example" e-mail')
 *
 * Supports named entities in the `url` and `title` when
 * in `settings.encode` mode.
 *
 * @param {Object} node - `link` node.
 * @return {string} - Markdown link.
 */
function link(node) {
  var self = this;
  var content = self.encode(node.url || '', node);
  var exit = self.enterLink();
  var escaped = self.encode(self.escape(node.url || '', node));
  var value = self.all(node).join('');

  exit();

  if (
    node.title == null &&
    PROTOCOL.test(content) &&
    (escaped === value || escaped === 'mailto:' + value)
  ) {
    /* Backslash escapes do not work in autolinks,
     * so we do not escape. */
    return uri(self.encode(node.url), true);
  }

  content = uri(content);

  if (node.title) {
    content += ' ' + title(self.encode(self.escape(node.title, node), node));
  }

  return '[' + value + '](' + content + ')';
}

},{"../util/enclose-title":286,"../util/enclose-uri":287}],309:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:list-item
 * @fileoverview Stringify a list item.
 */

'use strict';

/* Dependencies. */
var repeat = require('repeat-string');
var pad = require('../util/pad');

/* Expose. */
module.exports = listItem;

/* Which checkbox to use. */
var CHECKBOX_MAP = {};

CHECKBOX_MAP.undefined = CHECKBOX_MAP.null = '';
CHECKBOX_MAP.true = '[x] ';
CHECKBOX_MAP.false = '[ ] ';

/**
 * Stringify a list item.
 *
 * Prefixes the content with a checked checkbox when
 * `checked: true`:
 *
 *     [x] foo
 *
 * Prefixes the content with an unchecked checkbox when
 * `checked: false`:
 *
 *     [ ] foo
 *
 * @param {Object} node - `listItem` node.
 * @param {Object} parent - `list` node.
 * @param {number} position - Index of `node` in `parent`.
 * @param {string} bullet - Bullet to use.  This, and the
 *   `listItemIndent` setting define the used indent.
 * @return {string} - Markdown list item.
 */
function listItem(node, parent, position, bullet) {
  var self = this;
  var style = self.options.listItemIndent;
  var loose = node.loose;
  var children = node.children;
  var length = children.length;
  var values = [];
  var index = -1;
  var value;
  var indent;
  var spacing;

  while (++index < length) {
    values[index] = self.visit(children[index], node);
  }

  value = CHECKBOX_MAP[node.checked] + values.join(loose ? '\n\n' : '\n');

  if (style === '1' || (style === 'mixed' && value.indexOf('\n') === -1)) {
    indent = bullet.length + 1;
    spacing = ' ';
  } else {
    indent = Math.ceil((bullet.length + 1) / 4) * 4;
    spacing = repeat(' ', indent - bullet.length);
  }

  value = bullet + spacing + pad(value, indent / 4).slice(indent);

  if (loose && parent.children.length - 1 !== position) {
    value += '\n';
  }

  return value;
}

},{"../util/pad":291,"repeat-string":321}],310:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:list
 * @fileoverview Stringify a list.
 */

'use strict';

/* Expose. */
module.exports = list;

/* Which method to use based on `list.ordered`. */
var ORDERED_MAP = {
  true: 'visitOrderedItems',
  false: 'visitUnorderedItems'
};

/**
 * Stringify a list. See `Compiler#visitOrderedList()` and
 * `Compiler#visitUnorderedList()` for internal working.
 *
 * @param {Object} node - `list` node.
 * @return {string} - Markdown list.
 */
function list(node) {
  return this[ORDERED_MAP[node.ordered]](node);
}

},{}],311:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:paragraph
 * @fileoverview Stringify a paragraph.
 */

'use strict';

/* Expose. */
module.exports = paragraph;

/**
 * Stringify a paragraph.
 *
 * @param {Object} node - `paragraph` node.
 * @return {string} - Markdown paragraph.
 */
function paragraph(node) {
  return this.all(node).join('');
}

},{}],312:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:root
 * @fileoverview Stringify a root.
 */

'use strict';

/* Expose. */
module.exports = root;

/**
 * Stringify a root.
 *
 * Adds a final newline to ensure valid POSIX files.
 *
 * @param {Object} node - `root` node.
 * @return {string} - Document.
 */
function root(node) {
  return this.block(node) + '\n';
}

},{}],313:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:strong
 * @fileoverview Stringify a strong.
 */

'use strict';

/* Dependencies. */
var repeat = require('repeat-string');

/* Expose. */
module.exports = strong;

/**
 * Stringify a `strong`.
 *
 * The marker used is configurable by `strong`, which
 * defaults to an asterisk (`'*'`) but also accepts an
 * underscore (`'_'`):
 *
 *     __foo__
 *
 * @param {Object} node - `strong` node.
 * @return {string} - Markdown strong.
 */
function strong(node) {
  var marker = repeat(this.options.strong, 2);
  return marker + this.all(node).join('') + marker;
}

},{"repeat-string":321}],314:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:table-cell
 * @fileoverview Stringify a table-cell.
 */

'use strict';

/* Expose. */
module.exports = tableCell;

/**
 * Stringify a table cell.
 *
 * @param {Object} node - `tableCell` node.
 * @return {string} - Markdown table cell.
 */
function tableCell(node) {
  return this.all(node).join('');
}

},{}],315:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:table
 * @fileoverview Stringify a table.
 */

'use strict';

/* Dependencies. */
var markdownTable = require('markdown-table');

/* Expose. */
module.exports = table;

/**
 * Stringify table.
 *
 * Creates a fenced table by default, but not in
 * `looseTable: true` mode:
 *
 *     Foo | Bar
 *     :-: | ---
 *     Baz | Qux
 *
 * NOTE: Be careful with `looseTable: true` mode, as a
 * loose table inside an indented code block on GitHub
 * renders as an actual table!
 *
 * Creates a spaced table by default, but not in
 * `spacedTable: false`:
 *
 *     |Foo|Bar|
 *     |:-:|---|
 *     |Baz|Qux|
 *
 * @param {Object} node - `table` node.
 * @return {string} - Markdown table.
 */
function table(node) {
  var self = this;
  var loose = self.options.looseTable;
  var spaced = self.options.spacedTable;
  var rows = node.children;
  var index = rows.length;
  var exit = self.enterTable();
  var result = [];
  var start;
  var end;

  while (index--) {
    result[index] = self.all(rows[index]);
  }

  exit();

  if (loose) {
    start = end = '';
  } else if (spaced) {
    start = '| ';
    end = ' |';
  } else {
    start = end = '|';
  }

  return markdownTable(result, {
    align: node.align,
    start: start,
    end: end,
    delimiter: spaced ? ' | ' : '|'
  });
}

},{"markdown-table":198}],316:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:text
 * @fileoverview Stringify a text.
 */

'use strict';

/* Expose. */
module.exports = text;

/**
 * Stringify text.
 *
 * Supports named entities in `settings.encode: true` mode:
 *
 *     AT&amp;T
 *
 * Supports numbered entities in `settings.encode: numbers`
 * mode:
 *
 *     AT&#x26;T
 *
 * @param {Object} node - `text` node.
 * @param {Object?} [parent] - Parent of `node`.
 * @return {string} - Markdown text.
 */
function text(node, parent) {
  return this.encode(this.escape(node.value, node, parent), node);
}

},{}],317:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:thematic-break
 * @fileoverview Stringify a thematic-break.
 */

'use strict';

/* Dependencies. */
var repeat = require('repeat-string');

/* Expose. */
module.exports = thematic;

/**
 * Stringify a `thematic-break`.
 *
 * The character used is configurable through `rule`: (`'_'`)
 *
 *     ___
 *
 * The number of repititions is defined through
 * `ruleRepetition`: (`6`)
 *
 *     ******
 *
 * Whether spaces delimit each character, is configured
 * through `ruleSpaces`: (`true`)
 *
 *     * * *
 *
 * @return {string} - Markdown thematic break.
 */
function thematic() {
  var options = this.options;
  var rule = repeat(options.rule, options.ruleRepetition);
  return options.ruleSpaces ? rule.split('').join(' ') : rule;
}

},{"repeat-string":321}],318:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:stringify:visitors:yaml
 * @fileoverview Stringify yaml.
 */

'use strict';

/* Dependencies. */
var repeat = require('repeat-string');

/* Expose. */
module.exports = yaml;

/**
 * Stringify `yaml`.
 *
 * @param {Object} node - `yaml` node.
 * @return {string} - Markdown yaml.
 */
function yaml(node) {
  var marker = repeat('-', 3);
  return marker + (node.value ? '\n' + node.value : '') + '\n' + marker;
}

},{"repeat-string":321}],319:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark:vdom
 * @fileoverview Compile Markdown to VDOM with remark.
 */

'use strict';

/* Dependencies. */
var toHAST = require('mdast-util-to-hast');
var sanitize = require('hast-util-sanitize');
var toH = require('hast-to-hyperscript');
var hyperscript = require('virtual-dom/h');

/* Methods. */
var own = {}.hasOwnProperty;

/**
 * Attach a VDOM compiler.
 *
 * @param {Unified} processor - Instance.
 * @param {Object?} [options]
 * @param {Object?} [options.sanitize]
 *   - Sanitation schema.
 * @param {Object?} [options.components]
 *   - Components.
 * @param {string?} [options.prefix]
 *   - Key prefix.
 * @param {Function?} [options.createElement]
 *   - `h()`.
 */
function plugin(processor, options) {
  var settings = options || {};
  var components = settings.components || {};
  var h = settings.h || hyperscript;

  /**
   * Wrapper around `h` to pass components in.
   *
   * @param {string} name - Element name.
   * @param {Object} props - Attributes.
   * @return {VNode} - VDOM element.
   */
  function w(name, props, children) {
    var id = name.toLowerCase();
    var fn = own.call(components, id) ? components[id] : h;
    return fn(name, props, children);
  }

  /**
   * Extensible constructor.
   */
  function Compiler() {}

  /**
   * Wrap `children` in a HAST div.
   *
   * @param {Array.<Node>} children - Nodes.
   * @return {Node} - Div node.
   */
  function div(children) {
    return {
      type: 'element',
      tagName: 'div',
      properties: {},
      children: children
    };
  }

  /**
   * Compile MDAST to VDOM.
   *
   * @param {Node} node - MDAST node.
   * @return {VNode} - VDOM element.
   */
  function compile(node) {
    var clean = sanitize(div(toHAST(node).children), settings.sanitize);

    /* If `div` is removed by sanitation, add it back. */
    if (clean.type === 'root') {
      clean = div(clean.children);
    }

    return toH(w, clean, settings.prefix);
  }

  Compiler.prototype.compile = compile;

  processor.Compiler = Compiler;
}

/* Expose `plugin`. */
module.exports = plugin;

},{"hast-to-hyperscript":168,"hast-util-sanitize":169,"mdast-util-to-hast":201,"virtual-dom/h":358}],320:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module remark
 * @fileoverview Markdown processor powered by plugins.
 */

'use strict';

/* Dependencies. */
var unified = require('unified');
var parse = require('remark-parse');
var stringify = require('remark-stringify');

/* Expose. */
module.exports = unified().use(parse).use(stringify).abstract();

},{"remark-parse":221,"remark-stringify":274,"unified":346}],321:[function(require,module,exports){
/*!
 * repeat-string <https://github.com/jonschlinkert/repeat-string>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

'use strict';

/**
 * Results cache
 */

var res = '';
var cache;

/**
 * Expose `repeat`
 */

module.exports = repeat;

/**
 * Repeat the given `string` the specified `number`
 * of times.
 *
 * **Example:**
 *
 * ```js
 * var repeat = require('repeat-string');
 * repeat('A', 5);
 * //=> AAAAA
 * ```
 *
 * @param {String} `string` The string to repeat
 * @param {Number} `number` The number of times to repeat the string
 * @return {String} Repeated string
 * @api public
 */

function repeat(str, num) {
  if (typeof str !== 'string') {
    throw new TypeError('repeat-string expects a string.');
  }

  // cover common, quick use cases
  if (num === 1) return str;
  if (num === 2) return str + str;

  var max = str.length * num;
  if (cache !== str || typeof cache === 'undefined') {
    cache = str;
    res = '';
  }

  while (max > res.length && num > 0) {
    if (num & 1) {
      res += str;
    }

    num >>= 1;
    if (!num) break;
    str += str;
  }

  return res.substr(0, max);
}


},{}],322:[function(require,module,exports){
'use strict';

var path = require('path');

function replaceExt(npath, ext) {
  if (typeof npath !== 'string') {
    return npath;
  }

  if (npath.length === 0) {
    return npath;
  }

  var nFileName = path.basename(npath, path.extname(npath)) + ext;
  return path.join(path.dirname(npath), nFileName);
}

module.exports = replaceExt;

},{"path":206}],323:[function(require,module,exports){
;(function () {
  var parents = function (node, ps) {
    if (node.parentNode === null) { return ps; }

    return parents(node.parentNode, ps.concat([node]));
  };

  var style = function (node, prop) {
    return getComputedStyle(node, null).getPropertyValue(prop);
  };

  var overflow = function (node) {
    return style(node, "overflow") + style(node, "overflow-y") + style(node, "overflow-x");
  };

  var scroll = function (node) {
   return (/(auto|scroll)/).test(overflow(node));
  };

  var scrollParent = function (node) {
    if (!(node instanceof HTMLElement)) {
      return ;
    }

    var ps = parents(node.parentNode, []);

    for (var i = 0; i < ps.length; i += 1) {
      if (scroll(ps[i])) {
        return ps[i];
      }
    }

    return document.body;
  };

  // If common js is defined use it.
  if (typeof module === "object" && module !== null) {
    module.exports = scrollParent;
  } else {
    window.Scrollparent = scrollParent;
  }
})();

},{}],324:[function(require,module,exports){
'use strict';
module.exports = require('./lib/index');

},{"./lib/index":328}],325:[function(require,module,exports){
'use strict';

var randomFromSeed = require('./random/random-from-seed');

var ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';
var alphabet;
var previousSeed;

var shuffled;

function reset() {
    shuffled = false;
}

function setCharacters(_alphabet_) {
    if (!_alphabet_) {
        if (alphabet !== ORIGINAL) {
            alphabet = ORIGINAL;
            reset();
        }
        return;
    }

    if (_alphabet_ === alphabet) {
        return;
    }

    if (_alphabet_.length !== ORIGINAL.length) {
        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);
    }

    var unique = _alphabet_.split('').filter(function(item, ind, arr){
       return ind !== arr.lastIndexOf(item);
    });

    if (unique.length) {
        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));
    }

    alphabet = _alphabet_;
    reset();
}

function characters(_alphabet_) {
    setCharacters(_alphabet_);
    return alphabet;
}

function setSeed(seed) {
    randomFromSeed.seed(seed);
    if (previousSeed !== seed) {
        reset();
        previousSeed = seed;
    }
}

function shuffle() {
    if (!alphabet) {
        setCharacters(ORIGINAL);
    }

    var sourceArray = alphabet.split('');
    var targetArray = [];
    var r = randomFromSeed.nextValue();
    var characterIndex;

    while (sourceArray.length > 0) {
        r = randomFromSeed.nextValue();
        characterIndex = Math.floor(r * sourceArray.length);
        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);
    }
    return targetArray.join('');
}

function getShuffled() {
    if (shuffled) {
        return shuffled;
    }
    shuffled = shuffle();
    return shuffled;
}

/**
 * lookup shuffled letter
 * @param index
 * @returns {string}
 */
function lookup(index) {
    var alphabetShuffled = getShuffled();
    return alphabetShuffled[index];
}

module.exports = {
    characters: characters,
    seed: setSeed,
    lookup: lookup,
    shuffled: getShuffled
};

},{"./random/random-from-seed":331}],326:[function(require,module,exports){
'use strict';
var alphabet = require('./alphabet');

/**
 * Decode the id to get the version and worker
 * Mainly for debugging and testing.
 * @param id - the shortid-generated id.
 */
function decode(id) {
    var characters = alphabet.shuffled();
    return {
        version: characters.indexOf(id.substr(0, 1)) & 0x0f,
        worker: characters.indexOf(id.substr(1, 1)) & 0x0f
    };
}

module.exports = decode;

},{"./alphabet":325}],327:[function(require,module,exports){
'use strict';

var randomByte = require('./random/random-byte');

function encode(lookup, number) {
    var loopCounter = 0;
    var done;

    var str = '';

    while (!done) {
        str = str + lookup( ( (number >> (4 * loopCounter)) & 0x0f ) | randomByte() );
        done = number < (Math.pow(16, loopCounter + 1 ) );
        loopCounter++;
    }
    return str;
}

module.exports = encode;

},{"./random/random-byte":330}],328:[function(require,module,exports){
'use strict';

var alphabet = require('./alphabet');
var encode = require('./encode');
var decode = require('./decode');
var isValid = require('./is-valid');

// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.
// This number should be updated every year or so to keep the generated id short.
// To regenerate `new Date() - 0` and bump the version. Always bump the version!
var REDUCE_TIME = 1459707606518;

// don't change unless we change the algos or REDUCE_TIME
// must be an integer and less than 16
var version = 6;

// if you are using cluster or multiple servers use this to make each instance
// has a unique value for worker
// Note: I don't know if this is automatically set when using third
// party cluster solutions such as pm2.
var clusterWorkerId = require('./util/cluster-worker-id') || 0;

// Counter is used when shortid is called multiple times in one second.
var counter;

// Remember the last time shortid was called in case counter is needed.
var previousSeconds;

/**
 * Generate unique id
 * Returns string id
 */
function generate() {

    var str = '';

    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);

    if (seconds === previousSeconds) {
        counter++;
    } else {
        counter = 0;
        previousSeconds = seconds;
    }

    str = str + encode(alphabet.lookup, version);
    str = str + encode(alphabet.lookup, clusterWorkerId);
    if (counter > 0) {
        str = str + encode(alphabet.lookup, counter);
    }
    str = str + encode(alphabet.lookup, seconds);

    return str;
}


/**
 * Set the seed.
 * Highly recommended if you don't want people to try to figure out your id schema.
 * exposed as shortid.seed(int)
 * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.
 */
function seed(seedValue) {
    alphabet.seed(seedValue);
    return module.exports;
}

/**
 * Set the cluster worker or machine id
 * exposed as shortid.worker(int)
 * @param workerId worker must be positive integer.  Number less than 16 is recommended.
 * returns shortid module so it can be chained.
 */
function worker(workerId) {
    clusterWorkerId = workerId;
    return module.exports;
}

/**
 *
 * sets new characters to use in the alphabet
 * returns the shuffled alphabet
 */
function characters(newCharacters) {
    if (newCharacters !== undefined) {
        alphabet.characters(newCharacters);
    }

    return alphabet.shuffled();
}


// Export all other functions as properties of the generate function
module.exports = generate;
module.exports.generate = generate;
module.exports.seed = seed;
module.exports.worker = worker;
module.exports.characters = characters;
module.exports.decode = decode;
module.exports.isValid = isValid;

},{"./alphabet":325,"./decode":326,"./encode":327,"./is-valid":329,"./util/cluster-worker-id":332}],329:[function(require,module,exports){
'use strict';
var alphabet = require('./alphabet');

function isShortId(id) {
    if (!id || typeof id !== 'string' || id.length < 6 ) {
        return false;
    }

    var characters = alphabet.characters();
    var len = id.length;
    for(var i = 0; i < len;i++) {
        if (characters.indexOf(id[i]) === -1) {
            return false;
        }
    }
    return true;
}

module.exports = isShortId;

},{"./alphabet":325}],330:[function(require,module,exports){
'use strict';

var crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto

function randomByte() {
    if (!crypto || !crypto.getRandomValues) {
        return Math.floor(Math.random() * 256) & 0x30;
    }
    var dest = new Uint8Array(1);
    crypto.getRandomValues(dest);
    return dest[0] & 0x30;
}

module.exports = randomByte;

},{}],331:[function(require,module,exports){
'use strict';

// Found this seed-based random generator somewhere
// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)

var seed = 1;

/**
 * return a random number based on a seed
 * @param seed
 * @returns {number}
 */
function getNextValue() {
    seed = (seed * 9301 + 49297) % 233280;
    return seed/(233280.0);
}

function setSeed(_seed_) {
    seed = _seed_;
}

module.exports = {
    nextValue: getNextValue,
    seed: setSeed
};

},{}],332:[function(require,module,exports){
'use strict';

module.exports = 0;

},{}],333:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module space-separated-tokens
 * @fileoverview Parse and stringify space-separated tokens.
 */

'use strict';

/* eslint-env commonjs */

/*
 * Dependencies.
 */

var trim = require('trim');

/*
 * Constants.
 */

var EMPTY = '';

/*
 * Characters.
 */

var C_SPACE = ' ';

/*
 * Expressions.
 *
 * HTML white-space is slightly different from JavaScript’s
 * `\s`, as the latter includes vertical tabs.
 */

var RE_WHITE_SPACE = /[\ \t\n\r\f]+/g;

/**
 * Parse space-separated tokens to an array.
 *
 * @param {string} value - Attribute-value to parse.
 * @return {Array.<string>} - Tokens.
 */
function parse(value) {
    var input = trim(String(value || EMPTY));

    if (input === EMPTY) {
        return [];
    }

    return input.split(RE_WHITE_SPACE);
}

/**
 * Compile an array to space-separated tokens.
 *
 * @param {Array.<string>} values - Tokens.
 * @return {string} - Space-separated tokens.
 */
function stringify(values) {
    return trim(values.join(C_SPACE));
}

/*
 * Expose.
 */

module.exports = {
    'parse': parse,
    'stringify': stringify
};

},{"trim":343}],334:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module state-toggle
 * @fileoverview Enter/exit a state.
 */

'use strict';

/* eslint-env commonjs */

/* Expose. */
module.exports = factory;

/**
 * Construct a state `toggler`: a function which inverses
 * `property` in context based on its current value.
 * The by `toggler` returned function restores that value.
 *
 * @param {string} key - Property to toggle.
 * @param {boolean} state - Default state.
 * @param {Object?} [ctx] - Context object.
 * @return {Function} - Enter.
 */
function factory(key, state, ctx) {
  /**
   * Enter a state.
   *
   * @return {Function} - Exit state.
   */
  return function () {
    var context = ctx || this;
    var current = context[key];

    context[key] = !state;

    /**
     * Cancel state to its value before entering.
     */
    return function () {
      context[key] = current;
    };
  };
}

},{}],335:[function(require,module,exports){
'use strict';
module.exports = function (str) {
	return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
		return '%' + c.charCodeAt(0).toString(16).toUpperCase();
	});
};

},{}],336:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module stringify-entities
 * @fileoverview Encode HTML character references and character entities.
 */

'use strict';

/* eslint-env commonjs */

/* Dependencies. */
var entities = require('character-entities-html4');
var legacy = require('character-entities-legacy');
var dangerous = require('./lib/dangerous.json');

/* Methods. */
var has = {}.hasOwnProperty;

/* List of enforced escapes. */
var escapes = ['"', '\'', '<', '>', '&', '`'];

/* Map of characters to names. */
var characters = {};

(function () {
  var name;

  for (name in entities) {
    characters[entities[name]] = name;
  }
})();

/* Default escapes. */
var EXPRESSION_ESCAPE = toExpression(escapes);

/* Surrogate pairs. */
var EXPRESSION_SURROGATE_PAIR = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

/* Non-ASCII characters. */
var EXPRESSION_BMP = /[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;

/**
 * Get the first character in `char`.
 *
 * @param {string} char - Value.
 * @return {string} - First character.
 */
function charCode(char) {
  return char.charCodeAt(0);
}

/**
 * Check whether `char` is an alphanumeric.
 *
 * @param {string} char - Value.
 * @return {boolean} - Whether `char` is an
 *   alphanumeric.
 */
function isAlphanumeric(char) {
  var code = charCode(char);

  return (code >= 48 /* 0 */ && code <= 57 /* 9 */) ||
    (code >= 65 /* A */ && code <= 90 /* Z */) ||
    (code >= 97 /* a */ && code <= 122 /* z */);
}

/**
 * Check whether `char` is a hexadecimal.
 *
 * @param {string} char - Value.
 * @return {boolean} - Whether `char` is a
 *   hexadecimal.
 */
function isHexadecimal(char) {
  var code = charCode(char);

  return (code >= 48 /* 0 */ && code <= 57 /* 9 */) ||
    (code >= 65 /* A */ && code <= 70 /* F */) ||
    (code >= 97 /* a */ && code <= 102 /* f */);
}

/**
 * Transform `code` into a hexadecimal character reference.
 *
 * @param {number} code - Number to encode.
 * @param {string?} [next] - Next character.
 * @param {boolean?} [omit] - Omit optional semi-colons.
 * @return {string} - `code` encoded as hexadecimal.
 */
function toHexReference(code, next, omit) {
  var value = '&#x' + code.toString(16).toUpperCase();

  return omit && next && !isHexadecimal(next) ? value : value + ';';
}

/**
 * Transform `code` into an entity.
 *
 * @param {string} name - Name to wrap.
 * @param {string?} [next] - Next character.
 * @param {boolean?} [omit] - Omit optional semi-colons.
 * @param {boolean?} [attribute] - Stringify as attribute.
 * @return {string} - `name` encoded as hexadecimal.
 */
function toNamed(name, next, omit, attribute) {
  var value = '&' + name;

  if (
    omit &&
    has.call(legacy, name) &&
    dangerous.indexOf(name) === -1 &&
    (!attribute || (next && next !== '=' && !isAlphanumeric(next)))
  ) {
    return value;
  }

  return value + ';';
}

/**
 * Create an expression for `characters`.
 *
 * @param {Array.<string>} characters - Characters.
 * @return {RegExp} - Expression.
 */
function toExpression(characters) {
  return new RegExp('[' + characters.join('') + ']', 'g');
}

/**
 * Encode `char` according to `options`.
 *
 * @param {string} char - Character to encode.
 * @param {string} next - Character following `char`.
 * @param {Object} options - Configuration.
 * @return {string} - Entity.
 */
function one(char, next, options) {
  var shortest = options.useShortestReferences;
  var omit = options.omitOptionalSemicolons;
  var named;
  var numeric;

  if (
    (shortest || options.useNamedReferences) &&
    has.call(characters, char)
  ) {
    named = toNamed(characters[char], next, omit, options.attribute);
  }

  if (shortest || !named) {
    numeric = toHexReference(charCode(char), next, omit);
  }

  if (named && (!shortest || named.length < numeric.length)) {
    return named;
  }

  return numeric;
}

/**
 * Encode special characters in `value`.
 *
 * @param {string} value - Value to encode.
 * @param {Object?} [options] - Configuration.
 * @param {boolean?} [options.escapeOnly=false]
 *   - Whether to only escape required characters.
 * @param {Array.<string>} [options.subset=[]]
 *   - Subset of characters to encode.
 * @param {boolean?} [options.useNamedReferences=false]
 *   - Whether to use entities where possible.
 * @param {boolean?} [options.omitOptionalSemicolons=false]
 *   - Whether to omit optional semi-colons.
 * @param {boolean?} [options.attribute=false]
 *   - Whether to stringifying and attribute.
 * @return {string} - Encoded `value`.
 */
function encode(value, options) {
  var settings = options || {};
  var subset = settings.subset;
  var set = subset ? toExpression(subset) : EXPRESSION_ESCAPE;
  var escapeOnly = settings.escapeOnly;
  var omit = settings.omitOptionalSemicolons;

  value = value.replace(set, function (char, pos, val) {
    return one(char, val.charAt(pos + 1), settings);
  });

  if (subset || escapeOnly) {
    return value;
  }

  return value
    .replace(EXPRESSION_SURROGATE_PAIR, function (pair, pos, val) {
      return toHexReference(
        ((pair.charCodeAt(0) - 0xD800) * 0x400) +
        pair.charCodeAt(1) - 0xDC00 + 0x10000,
        val.charAt(pos + 2),
        omit
      );
    })
    .replace(EXPRESSION_BMP, function (char, pos, val) {
      return one(char, val.charAt(pos + 1), settings);
    });
}

/**
 * Shortcut to escape special characters in HTML.
 *
 * @param {string} value - Value to encode.
 * @return {string} - Encoded `value`.
 */
function escape(value) {
  return encode(value, {
    escapeOnly: true,
    useNamedReferences: true
  });
}

encode.escape = escape;

/* Expose. */
module.exports = encode;

},{"./lib/dangerous.json":337,"character-entities-html4":36,"character-entities-legacy":38}],337:[function(require,module,exports){
module.exports=[
  "cent",
  "copy",
  "divide",
  "gt",
  "lt",
  "not",
  "para",
  "times"
]

},{}],338:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = topologicallyCombineReducers;

var _toposortClass = require('toposort-class');

var _toposortClass2 = _interopRequireDefault(_toposortClass);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function topologicallyCombineReducers(reducers) {
    var dependencies = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    // create the toposort class
    var ts = new _toposortClass2.default();

    // add the dependencies into toposort class
    Object.keys(reducers).forEach(function (key) {
        ts = ts.add(key, dependencies[key] || []);
    });

    // create the processing order
    var order = ts.sort().reverse();

    // return the combined reducer
    return function () {
        var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
        var action = arguments[1];


        // process the reducers and return the newly combined state
        return order.reduce(function (state, key) {
            var oldChildState = state[key];
            var newChildState = reducers[key](oldChildState, action, state);

            // only create a new combined state if the child state changed
            if (oldChildState !== newChildState) {
                return _extends({}, state, _defineProperty({}, key, newChildState));
            }

            // otherwise return the old state object
            return state;
        }, state);
    };
}
},{"toposort-class":340}],339:[function(require,module,exports){
/****
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Gustavo Henke and Aaron Trent
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 ****/
(function( global, factory ) {
    if( typeof define === "function" && define.amd ) {
        define( "Toposort", ["exports", "module"], factory );
    } else if( typeof exports !== "undefined" && typeof module !== "undefined" ) {
        factory( exports, module );
    } else {
        var mod = {
            exports: {}
        };
        factory( mod.exports, mod );
        global.Toposort = mod.exports;
    }
})( this, function( exports, module ) {
    "use strict";

    function _classCallCheck( instance, Constructor ) {
        if( !(instance instanceof Constructor) ) {
            throw new TypeError( "Cannot call a class as a function" );
        }
    }

    var Toposort = (function() {
        function Toposort() {
            _classCallCheck( this, Toposort );

            this.edges = [];
            this.Toposort = Toposort;
        }

        /**
         * Adds dependency edges.
         *
         * @since   0.1.0
         * @param   {String} item               An dependent name. Must be an string and not empty
         * @param   {String[]|String} [deps]    An dependency or array of dependencies
         * @returns {Toposort}                  The Toposort instance
         */

        Toposort.prototype.add = function add( item, deps ) {
            if( typeof item !== "string" || !item ) {
                throw new TypeError( "Dependent name must be given as a not empty string" );
            }

            deps = Array.isArray( deps ) ? deps : [deps];

            if( deps.length > 0 ) {
                for( var _iterator = deps, _isArray = Array.isArray( _iterator ), _i = 0, _iterator = _isArray ?
                                                                                                      _iterator :
                                                                                                      _iterator[Symbol.iterator](); ; ) {
                    var _ref;

                    if( _isArray ) {
                        if( _i >= _iterator.length ) {
                            break;
                        }
                        _ref = _iterator[_i++];
                    } else {
                        _i = _iterator.next();
                        if( _i.done ) {
                            break;
                        }
                        _ref = _i.value;
                    }

                    var dep = _ref;

                    if( typeof dep !== "string" || !dep ) {
                        throw new TypeError( "Dependency name must be given as a not empty string" );
                    }

                    this.edges.push( [item, dep] );
                }
            } else {
                this.edges.push( [item] );
            }

            return this;
        };

        /**
         * Runs the toposorting and return an ordered array of strings
         *
         * @since   0.1.0
         * @returns {String[]}  The list of items topologically sorted.
         */

        Toposort.prototype.sort = function sort() {
            var _this = this;

            var nodes = [];

            //accumulate unique nodes into a large list
            for( var _iterator2 = this.edges, _isArray2 = Array.isArray( _iterator2 ), _i2 = 0, _iterator2 = _isArray2 ?
                                                                                                             _iterator2 :
                                                                                                             _iterator2[Symbol.iterator](); ; ) {
                var _ref2;

                if( _isArray2 ) {
                    if( _i2 >= _iterator2.length ) {
                        break;
                    }
                    _ref2 = _iterator2[_i2++];
                } else {
                    _i2 = _iterator2.next();
                    if( _i2.done ) {
                        break;
                    }
                    _ref2 = _i2.value;
                }

                var edge = _ref2;

                for( var _iterator3 = edge, _isArray3 = Array.isArray( _iterator3 ), _i3 = 0, _iterator3 = _isArray3 ?
                                                                                                           _iterator3 :
                                                                                                           _iterator3[Symbol.iterator](); ; ) {
                    var _ref3;

                    if( _isArray3 ) {
                        if( _i3 >= _iterator3.length ) {
                            break;
                        }
                        _ref3 = _iterator3[_i3++];
                    } else {
                        _i3 = _iterator3.next();
                        if( _i3.done ) {
                            break;
                        }
                        _ref3 = _i3.value;
                    }

                    var node = _ref3;

                    if( nodes.indexOf( node ) === -1 ) {
                        nodes.push( node );
                    }
                }
            }

            //initialize the placement of nodes into the sorted array at the end
            var place = nodes.length;

            //initialize the sorted array with the same length as the unique nodes array
            var sorted = new Array( nodes.length );

            //define a visitor function that recursively traverses dependencies.
            var visit = function visit( node, predecessors ) {
                //check if a node is dependent of itself
                if( predecessors.length !== 0 && predecessors.indexOf( node ) !== -1 ) {
                    throw new Error( "Cyclic dependency found. " + node + " is dependent of itself.\nDependency chain: "
                                     + predecessors.join( " -> " ) + " => " + node );
                }

                var index = nodes.indexOf( node );

                //if the node still exists, traverse its dependencies
                if( index !== -1 ) {
                    var copy = false;

                    //mark the node as false to exclude it from future iterations
                    nodes[index] = false;

                    //loop through all edges and follow dependencies of the current node
                    for( var _iterator4 = _this.edges, _isArray4 = Array.isArray( _iterator4 ), _i4 = 0, _iterator4 = _isArray4 ?
                                                                                                                      _iterator4 :
                                                                                                                      _iterator4[Symbol.iterator](); ; ) {
                        var _ref4;

                        if( _isArray4 ) {
                            if( _i4 >= _iterator4.length ) {
                                break;
                            }
                            _ref4 = _iterator4[_i4++];
                        } else {
                            _i4 = _iterator4.next();
                            if( _i4.done ) {
                                break;
                            }
                            _ref4 = _i4.value;
                        }

                        var edge = _ref4;

                        if( edge[0] === node ) {
                            //lazily create a copy of predecessors with the current node concatenated onto it
                            copy = copy || predecessors.concat( [node] );

                            //recurse to node dependencies
                            visit( edge[1], copy );
                        }
                    }

                    //add the node to the next place in the sorted array
                    sorted[--place] = node;
                }
            };

            for( var i = 0; i < nodes.length; i++ ) {
                var node = nodes[i];

                //ignore nodes that have been excluded
                if( node !== false ) {
                    //mark the node as false to exclude it from future iterations
                    nodes[i] = false;

                    //loop through all edges and follow dependencies of the current node
                    for( var _iterator5 = this.edges, _isArray5 = Array.isArray( _iterator5 ), _i5 = 0, _iterator5 = _isArray5 ?
                                                                                                                     _iterator5 :
                                                                                                                     _iterator5[Symbol.iterator](); ; ) {
                        var _ref5;

                        if( _isArray5 ) {
                            if( _i5 >= _iterator5.length ) {
                                break;
                            }
                            _ref5 = _iterator5[_i5++];
                        } else {
                            _i5 = _iterator5.next();
                            if( _i5.done ) {
                                break;
                            }
                            _ref5 = _i5.value;
                        }

                        var edge = _ref5;

                        if( edge[0] === node ) {
                            //recurse to node dependencies
                            visit( edge[1], [node] );
                        }
                    }

                    //add the node to the next place in the sorted array
                    sorted[--place] = node;
                }
            }

            return sorted;
        };

        /**
         * Clears edges
         *
         * @since   0.4.0
         * @returns {Toposort}                  The Toposort instance
         */

        Toposort.prototype.clear = function clear() {
            this.edges = [];

            return this;
        };

        return Toposort;
    })();

    module.exports = Toposort;
} );

},{}],340:[function(require,module,exports){
module.exports = require( './build/toposort.js' );

},{"./build/toposort.js":339}],341:[function(require,module,exports){
'use strict';

/*
 * Constants.
 */

var WHITE_SPACE_COLLAPSABLE_LINE = /[ \t]*\n+[ \t]*/g;
var LINE = '\n';

/**
 * Remove initial and final spaces and tabs at the
 * line breaks in `value`. Does not trim initial and
 * final spaces and tabs of the value itself.
 *
 * @example
 *   trimLines(' foo\t\n\n bar \n\tbaz '); // ' foo\nbar\nbaz '
 *
 * @param {string} value - Value with untrimmed line breaks,
 *   coerced to string.
 * @return {string} - Value with trimmed line breaks.
 */
function trimLines(value) {
    return String(value).replace(WHITE_SPACE_COLLAPSABLE_LINE, LINE);
}

/*
 * Expose.
 */

module.exports = trimLines;

},{}],342:[function(require,module,exports){
'use strict';

/*
 * Constants.
 */

var LINE = '\n';

/**
 * Remove final newline characters from `value`.
 *
 * @example
 *   trimTrailingLines('foo\nbar'); // 'foo\nbar'
 *   trimTrailingLines('foo\nbar\n'); // 'foo\nbar'
 *   trimTrailingLines('foo\nbar\n\n'); // 'foo\nbar'
 *
 * @param {string} value - Value with trailing newlines,
 *   coerced to string.
 * @return {string} - Value without trailing newlines.
 */
function trimTrailingLines(value) {
    var index;

    value = String(value);
    index = value.length;

    while (value.charAt(--index) === LINE) { /* empty */ }

    return value.slice(0, index + 1);
}

/*
 * Expose.
 */

module.exports = trimTrailingLines;

},{}],343:[function(require,module,exports){

exports = module.exports = trim;

function trim(str){
  return str.replace(/^\s*|\s*$/g, '');
}

exports.left = function(str){
  return str.replace(/^\s*/, '');
};

exports.right = function(str){
  return str.replace(/\s*$/, '');
};

},{}],344:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module trough
 * @fileoverview Middleware.  Inspired by `segmentio/ware`,
 *   but able to change the values from transformer to
 *   transformer.
 */

'use strict';

/* Expose. */
module.exports = trough;

/* Methods. */
var slice = [].slice;

/**
 * Create new middleware.
 *
 * @return {Object} - Middlewre.
 */
function trough() {
  var fns = [];
  var middleware = {};

  middleware.run = run;
  middleware.use = use;

  return middleware;

  /**
   * Run `fns`.  Last argument must be
   * a completion handler.
   *
   * @param {...*} input - Parameters
   */
  function run() {
    var index = -1;
    var input = slice.call(arguments, 0, -1);
    var done = arguments[arguments.length - 1];

    if (typeof done !== 'function') {
      throw new Error('Expected function as last argument, not ' + done);
    }

    next.apply(null, [null].concat(input));

    return;

    /**
     * Run the next `fn`, if any.
     *
     * @param {Error?} err - Failure.
     * @param {...*} values - Other input.
     */
    function next(err) {
      var fn = fns[++index];
      var params = slice.call(arguments, 0);
      var values = params.slice(1);
      var length = input.length;
      var pos = -1;

      if (err) {
        done(err);
        return;
      }

      /* Copy non-nully input into values. */
      while (++pos < length) {
        if (values[pos] === null || values[pos] === undefined) {
          values[pos] = input[pos];
        }
      }

      input = values;

      /* Next or done. */
      if (fn) {
        wrap(fn, next).apply(null, input);
      } else {
        done.apply(null, [null].concat(input));
      }
    }
  }

  /**
   * Add `fn` to the list.
   *
   * @param {Function} fn - Anything `wrap` accepts.
   */
  function use(fn) {
    if (typeof fn !== 'function') {
      throw new Error('Expected `fn` to be a function, not ' + fn);
    }

    fns.push(fn);

    return middleware;
  }
}

/**
 * Wrap `fn`.  Can be sync or async; return a promise,
 * receive a completion handler, return new values and
 * errors.
 *
 * @param {Function} fn - Thing to wrap.
 * @param {Function} next - Completion handler.
 * @return {Function} - Wrapped `fn`.
 */
function wrap(fn, next) {
  var invoked;

  return wrapped;

  function wrapped() {
    var params = slice.call(arguments, 0);
    var callback = fn.length > params.length;
    var result;

    if (callback) {
      params.push(done);
    }

    try {
      result = fn.apply(null, params);
    } catch (err) {
      /* Well, this is quite the pickle.  `fn` received
       * a callback and invoked it (thus continuing the
       * pipeline), but later also threw an error.
       * We’re not about to restart the pipeline again,
       * so the only thing left to do is to throw the
       * thing instea. */
      if (callback && invoked) {
        throw err;
      }

      return done(err);
    }

    if (!callback) {
      if (result && typeof result.then === 'function') {
        result.then(then, done);
      } else if (result instanceof Error) {
        done(result);
      } else {
        then(result);
      }
    }
  }

  /**
   * Invoke `next`, only once.
   *
   * @param {Error?} err - Optional error.
   */
  function done() {
    if (!invoked) {
      invoked = true;

      next.apply(null, arguments);
    }
  }

  /**
   * Invoke `done` with one value.
   * Tracks if an error is passed, too.
   *
   * @param {*} value - Optional value.
   */
  function then(value) {
    done(null, value);
  }
}

},{}],345:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module unherit
 * @fileoverview Create a custom constructor which can be modified
 *   without affecting the original class.
 */

'use strict';

/* Dependencies. */
var xtend = require('xtend');
var inherits = require('inherits');

/* Expose. */
module.exports = unherit;

/**
 * Create a custom constructor which can be modified
 * without affecting the original class.
 *
 * @param {Function} Super - Super-class.
 * @return {Function} - Constructor acting like `Super`,
 *   which can be modified without affecting the original
 *   class.
 */
function unherit(Super) {
  var result;
  var key;
  var value;

  inherits(Of, Super);
  inherits(From, Of);

  /* Clone values. */
  result = Of.prototype;

  for (key in result) {
    value = result[key];

    if (value && typeof value === 'object') {
      result[key] = 'concat' in value ? value.concat() : xtend(value);
    }
  }

  return Of;

  /**
   * Constructor accepting a single argument,
   * which itself is an `arguments` object.
   */
  function From(parameters) {
    return Super.apply(this, parameters);
  }

  /**
   * Constructor accepting variadic arguments.
   */
  function Of() {
    if (!(this instanceof Of)) {
      return new From(arguments);
    }

    return Super.apply(this, arguments);
  }
}

},{"inherits":184,"xtend":375}],346:[function(require,module,exports){
(function (global){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module unified
 * @fileoverview Pluggable text processing interface.
 */

'use strict';

/* Dependencies. */
var events = require('events');
var has = require('has');
var once = require('once');
var extend = require('extend');
var bail = require('bail');
var vfile = require('vfile');
var trough = require('trough');
var buffer = require('is-buffer');
var string = require('x-is-string');

/* Expose an abstract processor. */
module.exports = unified().abstract();

/* Methods. */
var slice = [].slice;

/* Process pipeline. */
var pipeline = trough()
  .use(function (p, ctx) {
    ctx.tree = p.parse(ctx.file, ctx.options);
  })
  .use(function (p, ctx, next) {
    p.run(ctx.tree, ctx.file, function (err, tree, file) {
      if (err) {
        next(err);
      } else {
        ctx.tree = tree;
        ctx.file = file;
        next();
      }
    });
  })
  .use(function (p, ctx) {
    ctx.file.contents = p.stringify(ctx.tree, ctx.file, ctx.options);
  });

/**
 * Function to create the first processor.
 *
 * @return {Function} - First processor.
 */
function unified() {
  var attachers = [];
  var transformers = trough();
  var namespace = {};
  var chunks = [];
  var emitter = new events.EventEmitter();
  var ended = false;
  var concrete = true;
  var settings;
  var key;

  /* Mix in methods. */
  for (key in emitter) {
    processor[key] = emitter[key];
  }

  /* Throw as early as possible.
   * As events are triggered synchroneously, the stack
   * is preserved. */
  processor.on('pipe', function () {
    assertConcrete();
  });

  /* Data management. */
  processor.data = data;

  /* Lock. */
  processor.abstract = abstract;

  /* Plug-ins. */
  processor.use = use;

  /* Streaming. */
  processor.writable = true;
  processor.readable = true;
  processor.write = write;
  processor.end = end;
  processor.pipe = pipe;

  /* API. */
  processor.parse = parse;
  processor.stringify = stringify;
  processor.run = run;
  processor.process = process;

  /* Expose. */
  return processor;

  /**
   * Create a new processor based on the processor
   * in the current scope.
   *
   * @return {Processor} - New concrete processor based
   *   on the descendant processor.
   */
  function processor() {
    var destination = unified();
    var length = attachers.length;
    var index = -1;

    while (++index < length) {
      destination.use.apply(null, attachers[index]);
    }

    destination.data(extend(true, {}, namespace));

    return destination;
  }

  /* Helpers. */

  /**
   * Assert a parser is available.
   *
   * @param {string} name - Name of callee.
   */
  function assertParser(name) {
    if (!isParser(processor.Parser)) {
      throw new Error('Cannot `' + name + '` without `Parser`');
    }
  }

  /**
   * Assert a compiler is available.
   *
   * @param {string} name - Name of callee.
   */
  function assertCompiler(name) {
    if (!isCompiler(processor.Compiler)) {
      throw new Error('Cannot `' + name + '` without `Compiler`');
    }
  }

  /**
   * Assert the processor is concrete.
   *
   * @param {string} name - Name of callee.
   */
  function assertConcrete(name) {
    if (!concrete) {
      throw new Error(
        'Cannot ' +
        (name ? 'invoke `' + name + '` on' : 'pipe into') +
        ' abstract processor.\n' +
        'To make the processor concrete, invoke it: ' +
        'use `processor()` instead of `processor`.'
      );
    }
  }

  /**
   * Assert `node` is a Unist node.
   *
   * @param {*} node - Value to check.
   */
  function assertNode(node) {
    if (!isNode(node)) {
      throw new Error('Expected node, got `' + node + '`');
    }
  }

  /**
   * Assert, if no `done` is given, that `complete` is
   * `true`.
   *
   * @param {string} name - Name of callee.
   * @param {boolean} complete - Whether an async process
   *   is complete.
   * @param {Function?} done - Optional handler of async
   *   results.
   */
  function assertDone(name, complete, done) {
    if (!complete && !done) {
      throw new Error(
        'Expected `done` to be given to `' + name + '` ' +
        'as async plug-ins are used'
      );
    }
  }

  /**
   * Abstract: used to signal an abstract processor which
   * should made concrete before using.
   *
   * For example, take unified itself.  It’s abstract.
   * Plug-ins should not be added to it.  Rather, it should
   * be made concrete (by invoking it) before modifying it.
   *
   * In essence, always invoke this when exporting a
   * processor.
   *
   * @return {Processor} - The operated on processor.
   */
  function abstract() {
    concrete = false;

    return processor;
  }

  /**
   * Data management.
   *
   * Getter / setter for processor-specific informtion.
   *
   * @param {string} key - Key to get or set.
   * @param {*} value - Value to set.
   * @return {*} - Either the operator on processor in
   *   setter mode; or the value stored as `key` in
   *   getter mode.
   */
  function data(key, value) {
    assertConcrete('data');

    if (string(key)) {
      /* Set `key`. */
      if (arguments.length === 2) {
        namespace[key] = value;

        return processor;
      }

      /* Get `key`. */
      return (has(namespace, key) && namespace[key]) || null;
    }

    /* Get space. */
    if (!key) {
      return namespace;
    }

    /* Set space. */
    namespace = key;

    return processor;
  }

  /**
   * Plug-in management.
   *
   * Pass it:
   * *   an attacher and options,
   * *   a list of attachers and options for all of them;
   * *   a tuple of one attacher and options.
   * *   a matrix: list containing any of the above and
   *     matrices.
   *
   * @param {...*} value - See description.
   * @return {Processor} - The operated on processor.
   */
  function use(value) {
    var args = slice.call(arguments, 0);
    var params = args.slice(1);
    var index;
    var length;
    var transformer;

    assertConcrete('use');

    /* Multiple attachers. */
    if ('length' in value && !isFunction(value)) {
      index = -1;
      length = value.length;

      if (!isFunction(value[0])) {
        /* Matrix of things. */
        while (++index < length) {
          use(value[index]);
        }
      } else if (isFunction(value[1])) {
        /* List of things. */
        while (++index < length) {
          use.apply(null, [value[index]].concat(params));
        }
      } else {
        /* Arguments. */
        use.apply(null, value);
      }

      return processor;
    }

    /* Store attacher. */
    attachers.push(args);

    /* Single attacher. */
    transformer = value.apply(null, [processor].concat(params));

    if (isFunction(transformer)) {
      transformers.use(transformer);
    }

    return processor;
  }

  /**
   * Parse a file (in string or VFile representation)
   * into a Unist node using the `Parser` on the
   * processor.
   *
   * @param {VFile?} [file] - File to process.
   * @param {Object?} [options] - Configuration.
   * @return {Node} - Unist node.
   */
  function parse(file, options) {
    assertConcrete('parse');
    assertParser('parse');

    return new processor.Parser(vfile(file), options, processor).parse();
  }

  /**
   * Run transforms on a Unist node representation of a file
   * (in string or VFile representation).
   *
   * @param {Node} node - Unist node.
   * @param {(string|VFile)?} [file] - File representation.
   * @param {Function?} [done] - Callback.
   * @return {Node} - The given or resulting Unist node.
   */
  function run(node, file, done) {
    var complete = false;
    var result;

    assertConcrete('run');
    assertNode(node);

    result = node;

    if (!done && isFunction(file)) {
      done = file;
      file = null;
    }

    transformers.run(node, vfile(file), function (err, tree, file) {
      complete = true;
      result = tree || node;

      (done || bail)(err, tree, file);
    });

    assertDone('run', complete, done);

    return result;
  }

  /**
   * Stringify a Unist node representation of a file
   * (in string or VFile representation) into a string
   * using the `Compiler` on the processor.
   *
   * @param {Node} node - Unist node.
   * @param {(string|VFile)?} [file] - File representation.
   * @param {Object?} [options] - Configuration.
   * @return {string} - String representation.
   */
  function stringify(node, file, options) {
    assertConcrete('stringify');
    assertCompiler('stringify');
    assertNode(node);

    if (
      !options &&
      !string(file) &&
      !buffer(file) &&
      !(typeof file === 'object' && 'messages' in file)
    ) {
      options = file;
      file = null;
    }

    return new processor.Compiler(vfile(file), options, processor).compile(node);
  }

  /**
   * Parse a file (in string or VFile representation)
   * into a Unist node using the `Parser` on the processor,
   * then run transforms on that node, and compile the
   * resulting node using the `Compiler` on the processor,
   * and store that result on the VFile.
   *
   * @param {(string|VFile)?} file - File representation.
   * @param {Object?} [options] - Configuration.
   * @param {Function?} [done] - Callback.
   * @return {VFile} - The given or resulting VFile.
   */
  function process(file, options, done) {
    var complete = false;

    assertConcrete('process');
    assertParser('process');
    assertCompiler('process');

    if (!done && isFunction(options)) {
      done = options;
      options = null;
    }

    file = vfile(file);

    pipeline.run(processor, {
      file: file,
      options: options || {}
    }, function (err) {
      complete = true;

      if (done) {
        done(err, file);
      } else {
        bail(err);
      }
    });

    assertDone('process', complete, done);

    return file;
  }

  /* Streams. */

  /**
   * Write a chunk into memory.
   *
   * @param {(Buffer|string)?} chunk - Value to write.
   * @param {string?} [encoding] - Encoding.
   * @param {Function?} [callback] - Callback.
   * @return {boolean} - Whether the write was succesful.
   */
  function write(chunk, encoding, callback) {
    assertConcrete('write');

    if (isFunction(encoding)) {
      callback = encoding;
      encoding = null;
    }

    if (ended) {
      throw new Error('Did not expect `write` after `end`');
    }

    chunks.push((chunk || '').toString(encoding || 'utf8'));

    if (callback) {
      callback();
    }

    /* Signal succesful write. */
    return true;
  }

  /**
   * End the writing.  Passes all arguments to a final
   * `write`.  Starts the process, which will trigger
   * `error`, with a fatal error, if any; `data`, with
   * the generated document in `string` form, if
   * succesful.  If messages are triggered during the
   * process, those are triggerd as `warning`s.
   *
   * @return {boolean} - Whether the last write was
   *   succesful.
   */
  function end() {
    assertConcrete('end');
    assertParser('end');
    assertCompiler('end');

    write.apply(null, arguments);

    ended = true;

    process(chunks.join(''), settings, function (err, file) {
      var messages = file.messages;
      var length = messages.length;
      var index = -1;

      chunks = settings = null;

      /* Trigger messages as warnings, except for fatal error. */
      while (++index < length) {
        if (messages[index] !== err) {
          processor.emit('warning', messages[index]);
        }
      }

      if (err) {
        /* Don’t enter an infinite error throwing loop. */
        global.setTimeout(function () {
          processor.emit('error', err);
        }, 4);
      } else {
        processor.emit('data', file.contents);
        processor.emit('end');
      }
    });

    return true;
  }

  /**
   * Pipe the processor into a writable stream.
   *
   * Basically `Stream#pipe`, but inlined and
   * simplified to keep the bundled size down.
   *
   * @see https://github.com/nodejs/node/blob/master/lib/stream.js#L26
   *
   * @param {Stream} dest - Writable stream.
   * @param {Object?} [options] - Processing
   *   configuration.
   * @return {Stream} - The destination stream.
   */
  function pipe(dest, options) {
    var onend = once(onended);

    assertConcrete('pipe');

    settings = options || {};

    processor.on('data', ondata);
    processor.on('error', onerror);
    processor.on('end', cleanup);
    processor.on('close', cleanup);

    /* If the 'end' option is not supplied, dest.end() will be
     * called when the 'end' or 'close' events are received.
     * Only dest.end() once. */
    if (!dest._isStdio && settings.end !== false) {
      processor.on('end', onend);
    }

    dest.on('error', onerror);
    dest.on('close', cleanup);

    dest.emit('pipe', processor);

    return dest;

    /** End destination. */
    function onended() {
      if (dest.end) {
        dest.end();
      }
    }

    /**
     * Handle data.
     *
     * @param {*} chunk - Data to pass through.
     */
    function ondata(chunk) {
      if (dest.writable) {
        dest.write(chunk);
      }
    }

    /**
     * Clean listeners.
     */
    function cleanup() {
      processor.removeListener('data', ondata);
      processor.removeListener('end', onend);
      processor.removeListener('error', onerror);
      processor.removeListener('end', cleanup);
      processor.removeListener('close', cleanup);

      dest.removeListener('error', onerror);
      dest.removeListener('close', cleanup);
    }

    /**
     * Close dangling pipes and handle unheard errors.
     *
     * @param {Error} err - Exception.
     */
    function onerror(err) {
      var handlers = processor._events.error;

      cleanup();

      /* Cannot use `listenerCount` in node <= 0.12. */
      if (!handlers || !handlers.length || handlers === onerror) {
        throw err; /* Unhandled stream error in pipe. */
      }
    }
  }
}

/**
 * Check if `node` is a Unist node.
 *
 * @param {*} node - Value.
 * @return {boolean} - Whether `node` is a Unist node.
 */
function isNode(node) {
  return node && string(node.type) && node.type.length !== 0;
}

/**
 * Check if `fn` is a function.
 *
 * @param {*} fn - Value.
 * @return {boolean} - Whether `fn` is a function.
 */
function isFunction(fn) {
  return typeof fn === 'function';
}

/**
 * Check if `compiler` is a Compiler.
 *
 * @param {*} compiler - Value.
 * @return {boolean} - Whether `compiler` is a Compiler.
 */
function isCompiler(compiler) {
  return isFunction(compiler) && compiler.prototype && isFunction(compiler.prototype.compile);
}

/**
 * Check if `parser` is a Parser.
 *
 * @param {*} parser - Value.
 * @return {boolean} - Whether `parser` is a Parser.
 */
function isParser(parser) {
  return isFunction(parser) && parser.prototype && isFunction(parser.prototype.parse);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"bail":31,"events":161,"extend":162,"has":167,"is-buffer":188,"once":204,"trough":344,"vfile":357,"x-is-string":374}],347:[function(require,module,exports){
'use strict';

var assign = require('object-assign');


module.exports = function u (type, props, value) {
  if (value == null && (typeof props != 'object' || Array.isArray(props))) {
    value = props;
    props = {};
  }

  return assign({}, props, { type: String(type) },
                value != null && (Array.isArray(value)
                                  ? { children: value }
                                  : { value: String(value) }));
};

},{"object-assign":203}],348:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module unist:util:is
 * @fileoverview Utility to check if a node passes a test.
 */

'use strict';

/* eslint-env commonjs */

/**
 * Test.
 *
 * @typedef {Function} is~test
 * @param {Node} node - Node to test.
 * @param {number} index - Position of `node` in `parent`.
 * @param {Node} parent - Parent of `node`.
 * @return {boolean?} - Whether this iteration passes.
 */

/**
 * Utility to return true.
 *
 * @type {is~test}
 */
function first() {
    return true;
}

/**
 * Utility to convert a string into a function which checks
 * a given node’s type for said string.
 *
 * @param {string} test - Node type to test.
 * @return {is~test} - Tester.
 */
function typeFactory(test) {
    return function (node) {
        return Boolean(node && node.type === test);
    }
}

/**
 * Utility to convert a node into a function which checks
 * a given node for strict equality.
 *
 * @param {Node} test - Node to test.
 * @return {is~test} - Tester.
 */
function nodeFactory(test) {
    return function (node) {
        return node === test;
    }
}

/**
 * Assert if `test` passes for `node`.
 * When a `parent` node is known the `index` of node
 *
 * @example
 *   is(null, {type: 'strong'}); // true
 *
 * @example
 *   is('strong', {type: 'strong'}); // true
 *   is('emphasis', {type: 'strong'}); // false
 *
 * @example
 *   var node = {type: 'strong'};
 *   is(node, node) // true
 *   is(node, {type: 'strong'}) // false
 *
 * @example
 *   var node = {type: 'strong'};
 *   var parent = {type: 'paragraph', children: [node]};
 *   function test(node, n) {return n === 5};
 *   is(test, {type: 'strong'}); // false
 *   is(test, {type: 'strong'}, 4, parent); // false
 *   is(test, {type: 'strong'}, 5, parent); // true
 *
 * @example
 *   var node = {type: 'strong'};
 *   var parent = {type: 'paragraph', children: [node]};
 *   is('strong'); // throws
 *   is('strong', node, 0) // throws
 *   is('strong', node, null, parent) // throws
 *   is('strong', node, 0, {type: 'paragraph'}) // throws
 *   is('strong', node, -1, parent) // throws
 *   is('strong', node, Infinity, parent) // throws
 *
 * @param {(string|Node|is~test)?} test - Tester.
 * @param {Node} node - Node to test.
 * @param {number?} [index] - Position of `node` in `parent`.
 * @param {Node?} [parent] - Parent of `node`.
 * @param {*} [context] - Context to invoke `test` with.
 * @return {boolean} - Whether `test` passes.
 */
function is(test, node, index, parent, context) {
    var hasParent = parent !== null && parent !== undefined;
    var hasIndex = index !== null && index !== undefined;

    if (typeof test === 'string') {
        test = typeFactory(test);
    } else if (test && test.type) {
        test = nodeFactory(test);
    } else if (test === null || test === undefined) {
        test = first;
    } else if (typeof test !== 'function') {
        throw new Error('Expected function, string, or node as test');
    }

    if (!node || !node.type) {
        throw new Error('Expected node');
    }

    if (
        hasIndex &&
        (typeof index !== 'number' || index < 0 || index === Infinity)
    ) {
        throw new Error('Expected positive finite index or child node');
    }

    if (hasParent && (!parent || !parent.type || !parent.children)) {
        throw new Error('Expected parent node');
    }

    if (hasParent !== hasIndex) {
        throw new Error('Expected both parent and index');
    }

    return Boolean(test.call(context, node, index, parent));
}

/*
 * Expose.
 */

module.exports = is;

},{}],349:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module unist:util:modify-children
 * @fileoverview Unist utility to modify direct children of a parent.
 */

'use strict';

/* eslint-env commonjs */

/*
 * Dependencies.
 */

var iterate = require('array-iterate');

/**
 * Modifier for children of `parent`.
 *
 * @typedef modifyChildren~callback
 * @param {Node} child - Current iteration;
 * @param {number} index - Position of `child` in `parent`;
 * @param {Node} parent - Parent node of `child`.
 * @return {number?} - Next position to iterate.
 */

/**
 * Function invoking a bound `fn` for each child of `parent`.
 *
 * @typedef modifyChildren~modifier
 * @param {Node} parent - Node with children.
 * @throws {Error} - When not given a parent node.
 */

/**
 * Pass the context as the third argument to `callback`.
 *
 * @param {modifyChildren~callback} callback - Function to wrap.
 * @return {function(Node, number): number?} - Intermediate
 *   version partially aplied version of
 *   `modifyChildren~modifier`.
 */
function wrapperFactory(callback) {
    return function (value, index) {
        return callback(value, index, this);
    };
}

/**
 * Turns `callback` into a ``iterator'' accepting a parent.
 *
 * see ``array-iterate'' for more info.
 *
 * @param {modifyChildren~callback} callback - Function to wrap.
 * @return {modifyChildren~modifier}
 */
function iteratorFactory(callback) {
    return function (parent) {
        var children = parent && parent.children;

        if (!children) {
            throw new Error('Missing children in `parent` for `modifier`');
        }

        return iterate(children, callback, parent);
    };
}

/**
 * Turns `callback` into a child-modifier accepting a parent.
 *
 * See `array-iterate` for more info.
 *
 * @param {modifyChildren~callback} callback - Function to wrap.
 * @return {modifyChildren~modifier} - Wrapped `fn`.
 */
function modifierFactory(callback) {
    return iteratorFactory(wrapperFactory(callback));
}

/*
 * Expose.
 */

module.exports = modifierFactory;

},{"array-iterate":1}],350:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module unist:util:position
 * @fileoverview Utility to get either the starting or the
 *   ending position of a node, and if its generated or not.
 */

'use strict';

/* eslint-env commonjs */

/**
 * Factory to get a position at `type`.
 *
 * @example
 *   positionFactory('start'); // Function
 *
 *   positionFactory('end'); // Function
 *
 * @param {string} type - Either `'start'` or `'end'`.
 * @return {function(Node): Object} - Getter.
 */
function positionFactory(type) {
    /**
     * Get a position in `node` at a bound `type`.
     *
     * @example
     *   // When bound to `start`.
     *   start({
     *     start: {
     *       line: 1,
     *       column: 1
     *     }
     *   }); // {line: 1, column: 1}
     *
     *   // When bound to `end`.
     *   end({
     *     end: {
     *       line: 1,
     *       column: 2
     *     }
     *   }); // {line: 1, column: 2}
     *
     * @param {Node} node - Node to check.
     * @return {Object} - Position at `type` in `node`, or
     *   an empty object.
     */
    return function (node) {
        var pos = (node && node.position && node.position[type]) || {};

        return {
            'line': pos.line || null,
            'column': pos.column || null,
            'offset': isNaN(pos.offset) ? null : pos.offset
        };
    };
}

/*
 * Getters.
 */

var position = {
    'start': positionFactory('start'),
    'end': positionFactory('end')
};

/**
 * Detect if a node was available in the original document.
 *
 * @example
 *   generated(); // true
 *
 *   generated({
 *     start: {
 *       line: 1,
 *       column: 1
 *     },
 *     end: {
 *       line: 1,
 *       column: 2
 *     }
 *   }); // false
 *
 * @param {Node} node - Node to test.
 * @return {boolean} - Whether or not `node` is generated.
 */
function generated(node) {
    var initial = position.start(node);
    var final = position.end(node);

    return initial.line === null || initial.column === null ||
        final.line === null || final.column === null;
}

/*
 * Expose.
 */

position.generated = generated;

module.exports = position;

},{}],351:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module unist:util:remove-position
 * @fileoverview Remove `position`s from a unist tree.
 */

'use strict';

/* eslint-env commonjs */

/* Dependencies. */
var visit = require('unist-util-visit');

/* Expose. */
module.exports = removePosition;

/**
 * Remove `position`s from `tree`.
 *
 * @param {Node} tree - Node.
 * @return {Node} - Node without `position`s.
 */
function removePosition(node, force) {
  visit(node, force ? hard : soft);
  return node;
}

/**
 * Delete `position`.
 */
function hard(node) {
  delete node.position;
}

/**
 * Remove `position` softly.
 */
function soft(node) {
  node.position = undefined;
}

},{"unist-util-visit":353}],352:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module unist:util:stringify-position
 * @fileoverview Stringify a Unist node, location, or position.
 */

'use strict';

/* eslint-env commonjs */

/*
 * Methods.
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Stringify a single index.
 *
 * @param {*} value - Index?
 * @return {string?} - Stringified index?
 */
function index(value) {
    return value && typeof value === 'number' ? value : 1;
}

/**
 * Stringify a single position.
 *
 * @param {*} pos - Position?
 * @return {string?} - Stringified position?
 */
function position(pos) {
    if (!pos || typeof pos !== 'object') {
        pos = {};
    }

    return index(pos.line) + ':' + index(pos.column);
}

/**
 * Stringify a single location.
 *
 * @param {*} loc - Location?
 * @return {string?} - Stringified location?
 */
function location(loc) {
    if (!loc || typeof loc !== 'object') {
        loc = {};
    }

    return position(loc.start) + '-' + position(loc.end);
}

/**
 * Stringify a node, location, or position into a range or
 * a point.
 *
 * @param {Node|Position|Location} value - Thing to stringify.
 * @return {string?} - Stringified positional information?
 */
function stringify(value) {
    /* Nothing. */
    if (!value || typeof value !== 'object') {
        return null;
    }

    /* Node. */
    if (has.call(value, 'position') || has.call(value, 'type')) {
        return location(value.position);
    }

    /* Location. */
    if (has.call(value, 'start') || has.call(value, 'end')) {
        return location(value);
    }

    /* Position. */
    if (has.call(value, 'line') || has.call(value, 'column')) {
        return position(value);
    }

    /* ? */
    return null;
}

/*
 * Expose.
 */

module.exports = stringify;

},{}],353:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module unist:util:visit
 * @fileoverview Recursively walk over unist nodes.
 */

'use strict';

/* eslint-env commonjs */

/**
 * Visit.
 *
 * @param {Node} tree - Root node
 * @param {string} [type] - Node type.
 * @param {function(node): boolean?} visitor - Invoked
 *   with each found node.  Can return `false` to stop.
 * @param {boolean} [reverse] - By default, `visit` will
 *   walk forwards, when `reverse` is `true`, `visit`
 *   walks backwards.
 */
function visit(tree, type, visitor, reverse) {
    if (typeof type === 'function') {
        reverse = visitor;
        visitor = type;
        type = null;
    }

    /**
     * Visit children in `parent`.
     *
     * @param {Array.<Node>} children - Children of `node`.
     * @param {Node?} parent - Parent of `node`.
     * @return {boolean?} - `false` if the visiting stopped.
     */
    function all(children, parent) {
        var step = reverse ? -1 : 1;
        var max = children.length;
        var min = -1;
        var index = (reverse ? max : min) + step;
        var child;

        while (index > min && index < max) {
            child = children[index];

            if (child && one(child, index, parent) === false) {
                return false;
            }

            index += step;
        }

        return true;
    }

    /**
     * Visit a single node.
     *
     * @param {Node} node - Node to visit.
     * @param {number?} [index] - Position of `node` in `parent`.
     * @param {Node?} [parent] - Parent of `node`.
     * @return {boolean?} - A result of invoking `visitor`.
     */
    function one(node, index, parent) {
        var result;

        index = index || (parent ? 0 : null);

        if (!type || node.type === type) {
            result = visitor(node, index, parent || null);
        }

        if (node.children && result !== false) {
            return all(node.children, node);
        }

        return result;
    }

    one(tree);
}

/*
 * Expose.
 */

module.exports = visit;

},{}],354:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],355:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":354,"_process":33,"inherits":184}],356:[function(require,module,exports){
/**
 * @author Titus Wormer
 * @copyright 2016 Titus Wormer
 * @license MIT
 * @module vfile-location
 * @fileoverview Convert between positions (line and column-based)
 *   and offsets (range-based) locations in a virtual file.
 */

'use strict';

/* Expose. */
module.exports = factory;

/**
 * Factory.
 *
 * @param {VFile|string|Buffer} file - Virtual file or document.
 */
function factory(file) {
  var contents = indices(String(file));

  return {
    toPosition: offsetToPositionFactory(contents),
    toOffset: positionToOffsetFactory(contents)
  };
}

/**
 * Factory to get the line and column-based `position` for
 * `offset` in the bound indices.
 *
 * @param {Array.<number>} indices - Indices of
 *   line-breaks in `value`.
 * @return {Function} - Bound method.
 */
function offsetToPositionFactory(indices) {
  return offsetToPosition;

  /**
   * Get the line and column-based `position` for
   * `offset` in the bound indices.
   *
   * @param {number} offset - Offset.
   * @return {Position} - Object with `line`, `column`,
   *   and `offset` properties based on the bound
   *   `indices`.  An empty object when given invalid
   *   or out of bounds input.
   */
  function offsetToPosition(offset) {
    var index = -1;
    var length = indices.length;

    if (offset < 0) {
      return {};
    }

    while (++index < length) {
      if (indices[index] > offset) {
        return {
          line: index + 1,
          column: (offset - (indices[index - 1] || 0)) + 1,
          offset: offset
        };
      }
    }

    return {};
  }
}

/**
 * Factory to get the `offset` for a line and column-based
 * `position` in the bound indices.
 *
 * @param {Array.<number>} indices - Indices of
 *   line-breaks in `value`.
 * @return {Function} - Bound method.
 */
function positionToOffsetFactory(indices) {
  return positionToOffset;

  /**
   * Get the `offset` for a line and column-based
   * `position` in the bound indices.
   *
   * @param {Position} position - Object with `line` and
   *   `column` properties.
   * @return {number} - Offset. `-1` when given invalid
   *   or out of bounds input.
   */
  function positionToOffset(position) {
    var line = position && position.line;
    var column = position && position.column;

    if (!isNaN(line) && !isNaN(column) && line - 1 in indices) {
      return ((indices[line - 2] || 0) + column - 1) || 0;
    }

    return -1;
  }
}

/**
 * Get indices of line-breaks in `value`.
 *
 * @param {string} value - Value.
 * @return {Array.<number>} - List of indices of
 *   line-breaks.
 */
function indices(value) {
  var result = [];
  var index = value.indexOf('\n');

  while (index !== -1) {
    result.push(index + 1);
    index = value.indexOf('\n', index + 1);
  }

  result.push(value.length + 1);

  return result;
}

},{}],357:[function(require,module,exports){
(function (process){
/**
 * @author Titus Wormer
 * @copyright 2015 Titus Wormer
 * @license MIT
 * @module vfile
 * @fileoverview Virtual file format to attach additional
 *   information related to processed input.  Similar to
 *   `wearefractal/vinyl`.
 */

'use strict';

/* Dependencies. */
var path = require('path');
var has = require('has');
var replace = require('replace-ext');
var stringify = require('unist-util-stringify-position');
var buffer = require('is-buffer');
var string = require('x-is-string');

/* Expose. */
module.exports = VFile;

/* Methods. */
var proto = VFile.prototype;

proto.toString = toString;
proto.message = message;
proto.fail = fail;

/* Slight backwards compatibility.  Remove in the future. */
proto.warn = message;

/* Order of setting (least specific to most). */
var order = [
  'history',
  'path',
  'basename',
  'stem',
  'extname',
  'dirname'
];

/**
 * Construct a new file.
 *
 * @constructor
 * @param {Object|VFile|string} [options] - File, contents, or config.
 */
function VFile(options) {
  var prop;
  var index;
  var length;

  if (!options) {
    options = {};
  } else if (string(options) || buffer(options)) {
    options = {contents: options};
  } else if ('message' in options && 'messages' in options) {
    return options;
  }

  if (!(this instanceof VFile)) {
    return new VFile(options);
  }

  this.data = {};
  this.messages = [];
  this.history = [];
  this.cwd = process.cwd();

  /* Set path related properties in the correct order. */
  index = -1;
  length = order.length;

  while (++index < length) {
    prop = order[index];

    if (has(options, prop)) {
      this[prop] = options[prop];
    }
  }

  /* Set non-path related properties. */
  for (prop in options) {
    if (order.indexOf(prop) === -1) {
      this[prop] = options[prop];
    }
  }
}

/**
 * Access complete path (`~/index.min.js`).
 */
Object.defineProperty(proto, 'path', {
  get: function () {
    return this.history[this.history.length - 1];
  },
  set: function (path) {
    assertNonEmpty(path, 'path');

    if (path !== this.path) {
      this.history.push(path);
    }
  }
});

/**
 * Access parent path (`~`).
 */
Object.defineProperty(proto, 'dirname', {
  get: function () {
    return string(this.path) ? path.dirname(this.path) : undefined;
  },
  set: function (dirname) {
    assertPath(this.path, 'dirname');
    this.path = path.join(dirname || '', this.basename);
  }
});

/**
 * Access basename (`index.min.js`).
 */
Object.defineProperty(proto, 'basename', {
  get: function () {
    return string(this.path) ? path.basename(this.path) : undefined;
  },
  set: function (basename) {
    assertNonEmpty(basename, 'basename');
    assertPart(basename, 'basename');
    this.path = path.join(this.dirname || '', basename);
  }
});

/**
 * Access extname (`.js`).
 */
Object.defineProperty(proto, 'extname', {
  get: function () {
    return string(this.path) ? path.extname(this.path) : undefined;
  },
  set: function (extname) {
    var ext = extname || '';

    assertPart(ext, 'extname');
    assertPath(this.path, 'extname');

    if (ext) {
      if (ext.charAt(0) !== '.') {
        throw new Error('`extname` must start with `.`');
      }

      if (ext.indexOf('.', 1) !== -1) {
        throw new Error('`extname` cannot contain multiple dots');
      }
    }

    this.path = replace(this.path, ext);
  }
});

/**
 * Access stem (`index.min`).
 */
Object.defineProperty(proto, 'stem', {
  get: function () {
    return string(this.path) ? path.basename(this.path, this.extname) : undefined;
  },
  set: function (stem) {
    assertNonEmpty(stem, 'stem');
    assertPart(stem, 'stem');
    this.path = path.join(this.dirname || '', stem + (this.extname || ''));
  }
});

/**
 * Get the value of the file.
 *
 * @return {string} - Contents.
 */
function toString(encoding) {
  var value = this.contents || '';
  return buffer(value) ? value.toString(encoding) : String(value);
}

/**
 * Create a message with `reason` at `position`.
 * When an error is passed in as `reason`, copies the
 * stack.  This does not add a message to `messages`.
 *
 * @param {string|Error} reason - Reason for message.
 * @param {Node|Location|Position} [position] - Place of message.
 * @param {string} [ruleId] - Category of message.
 * @return {VMessage} - Message.
 */
function message(reason, position, ruleId) {
  var filePath = this.path;
  var range = stringify(position) || '1:1';
  var location;
  var err;

  location = {
    start: {line: null, column: null},
    end: {line: null, column: null}
  };

  if (position && position.position) {
    position = position.position;
  }

  if (position) {
    /* Location. */
    if (position.start) {
      location = position;
      position = position.start;
    } else {
      /* Position. */
      location.start = position;
      location.end.line = null;
      location.end.column = null;
    }
  }

  err = new VMessage(reason.message || reason);

  err.name = (filePath ? filePath + ':' : '') + range;
  err.file = filePath || '';
  err.reason = reason.message || reason;
  err.line = position ? position.line : null;
  err.column = position ? position.column : null;
  err.location = location;
  err.ruleId = ruleId || null;
  err.source = null;
  err.fatal = false;

  if (reason.stack) {
    err.stack = reason.stack;
  }

  this.messages.push(err);

  return err;
}

/**
 * Fail. Creates a vmessage, associates it with the file,
 * and throws it.
 *
 * @throws {VMessage} - Fatal exception.
 */
function fail() {
  var message = this.message.apply(this, arguments);

  message.fatal = true;

  throw message;
}

/* Inherit from `Error#`. */
function VMessagePrototype() {}
VMessagePrototype.prototype = Error.prototype;
VMessage.prototype = new VMessagePrototype();

/* Message properties. */
proto = VMessage.prototype;

proto.file = proto.name = proto.reason = proto.message = proto.stack = '';
proto.fatal = proto.column = proto.line = null;

/**
 * Construct a new file message.
 *
 * Note: We cannot invoke `Error` on the created context,
 * as that adds readonly `line` and `column` attributes on
 * Safari 9, thus throwing and failing the data.
 *
 * @constructor
 * @param {string} reason - Reason for messaging.
 */
function VMessage(reason) {
  this.message = reason;
}

/* Assert that `part` is not a path (i.e., does
 * not contain `path.sep`). */
function assertPart(part, name) {
  if (part.indexOf(path.sep) !== -1) {
    throw new Error(
      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'
    );
  }
}

/* Assert that `part` is not empty. */
function assertNonEmpty(part, name) {
  if (!part) {
    throw new Error('`' + name + '` cannot be empty');
  }
}

/* Assert `path` exists. */
function assertPath(path, name) {
  if (!path) {
    throw new Error(
      'Setting `' + name + '` requires `path` to be set too'
    );
  }
}

}).call(this,require('_process'))

},{"_process":33,"has":167,"is-buffer":188,"path":206,"replace-ext":322,"unist-util-stringify-position":352,"x-is-string":374}],358:[function(require,module,exports){
var h = require("./virtual-hyperscript/index.js")

module.exports = h

},{"./virtual-hyperscript/index.js":361}],359:[function(require,module,exports){
'use strict';

var EvStore = require('ev-store');

module.exports = EvHook;

function EvHook(value) {
    if (!(this instanceof EvHook)) {
        return new EvHook(value);
    }

    this.value = value;
}

EvHook.prototype.hook = function (node, propertyName) {
    var es = EvStore(node);
    var propName = propertyName.substr(3);

    es[propName] = this.value;
};

EvHook.prototype.unhook = function(node, propertyName) {
    var es = EvStore(node);
    var propName = propertyName.substr(3);

    es[propName] = undefined;
};

},{"ev-store":160}],360:[function(require,module,exports){
'use strict';

module.exports = SoftSetHook;

function SoftSetHook(value) {
    if (!(this instanceof SoftSetHook)) {
        return new SoftSetHook(value);
    }

    this.value = value;
}

SoftSetHook.prototype.hook = function (node, propertyName) {
    if (node[propertyName] !== this.value) {
        node[propertyName] = this.value;
    }
};

},{}],361:[function(require,module,exports){
'use strict';

var isArray = require('x-is-array');

var VNode = require('../vnode/vnode.js');
var VText = require('../vnode/vtext.js');
var isVNode = require('../vnode/is-vnode');
var isVText = require('../vnode/is-vtext');
var isWidget = require('../vnode/is-widget');
var isHook = require('../vnode/is-vhook');
var isVThunk = require('../vnode/is-thunk');

var parseTag = require('./parse-tag.js');
var softSetHook = require('./hooks/soft-set-hook.js');
var evHook = require('./hooks/ev-hook.js');

module.exports = h;

function h(tagName, properties, children) {
    var childNodes = [];
    var tag, props, key, namespace;

    if (!children && isChildren(properties)) {
        children = properties;
        props = {};
    }

    props = props || properties || {};
    tag = parseTag(tagName, props);

    // support keys
    if (props.hasOwnProperty('key')) {
        key = props.key;
        props.key = undefined;
    }

    // support namespace
    if (props.hasOwnProperty('namespace')) {
        namespace = props.namespace;
        props.namespace = undefined;
    }

    // fix cursor bug
    if (tag === 'INPUT' &&
        !namespace &&
        props.hasOwnProperty('value') &&
        props.value !== undefined &&
        !isHook(props.value)
    ) {
        props.value = softSetHook(props.value);
    }

    transformProperties(props);

    if (children !== undefined && children !== null) {
        addChild(children, childNodes, tag, props);
    }


    return new VNode(tag, props, childNodes, key, namespace);
}

function addChild(c, childNodes, tag, props) {
    if (typeof c === 'string') {
        childNodes.push(new VText(c));
    } else if (typeof c === 'number') {
        childNodes.push(new VText(String(c)));
    } else if (isChild(c)) {
        childNodes.push(c);
    } else if (isArray(c)) {
        for (var i = 0; i < c.length; i++) {
            addChild(c[i], childNodes, tag, props);
        }
    } else if (c === null || c === undefined) {
        return;
    } else {
        throw UnexpectedVirtualElement({
            foreignObject: c,
            parentVnode: {
                tagName: tag,
                properties: props
            }
        });
    }
}

function transformProperties(props) {
    for (var propName in props) {
        if (props.hasOwnProperty(propName)) {
            var value = props[propName];

            if (isHook(value)) {
                continue;
            }

            if (propName.substr(0, 3) === 'ev-') {
                // add ev-foo support
                props[propName] = evHook(value);
            }
        }
    }
}

function isChild(x) {
    return isVNode(x) || isVText(x) || isWidget(x) || isVThunk(x);
}

function isChildren(x) {
    return typeof x === 'string' || isArray(x) || isChild(x);
}

function UnexpectedVirtualElement(data) {
    var err = new Error();

    err.type = 'virtual-hyperscript.unexpected.virtual-element';
    err.message = 'Unexpected virtual child passed to h().\n' +
        'Expected a VNode / Vthunk / VWidget / string but:\n' +
        'got:\n' +
        errorString(data.foreignObject) +
        '.\n' +
        'The parent vnode is:\n' +
        errorString(data.parentVnode)
        '\n' +
        'Suggested fix: change your `h(..., [ ... ])` callsite.';
    err.foreignObject = data.foreignObject;
    err.parentVnode = data.parentVnode;

    return err;
}

function errorString(obj) {
    try {
        return JSON.stringify(obj, null, '    ');
    } catch (e) {
        return String(obj);
    }
}

},{"../vnode/is-thunk":363,"../vnode/is-vhook":364,"../vnode/is-vnode":365,"../vnode/is-vtext":366,"../vnode/is-widget":367,"../vnode/vnode.js":369,"../vnode/vtext.js":370,"./hooks/ev-hook.js":359,"./hooks/soft-set-hook.js":360,"./parse-tag.js":362,"x-is-array":373}],362:[function(require,module,exports){
'use strict';

var split = require('browser-split');

var classIdSplit = /([\.#]?[a-zA-Z0-9\u007F-\uFFFF_:-]+)/;
var notClassId = /^\.|#/;

module.exports = parseTag;

function parseTag(tag, props) {
    if (!tag) {
        return 'DIV';
    }

    var noId = !(props.hasOwnProperty('id'));

    var tagParts = split(tag, classIdSplit);
    var tagName = null;

    if (notClassId.test(tagParts[1])) {
        tagName = 'DIV';
    }

    var classes, part, type, i;

    for (i = 0; i < tagParts.length; i++) {
        part = tagParts[i];

        if (!part) {
            continue;
        }

        type = part.charAt(0);

        if (!tagName) {
            tagName = part;
        } else if (type === '.') {
            classes = classes || [];
            classes.push(part.substring(1, part.length));
        } else if (type === '#' && noId) {
            props.id = part.substring(1, part.length);
        }
    }

    if (classes) {
        if (props.className) {
            classes.push(props.className);
        }

        props.className = classes.join(' ');
    }

    return props.namespace ? tagName : tagName.toUpperCase();
}

},{"browser-split":32}],363:[function(require,module,exports){
module.exports = isThunk

function isThunk(t) {
    return t && t.type === "Thunk"
}

},{}],364:[function(require,module,exports){
module.exports = isHook

function isHook(hook) {
    return hook &&
      (typeof hook.hook === "function" && !hook.hasOwnProperty("hook") ||
       typeof hook.unhook === "function" && !hook.hasOwnProperty("unhook"))
}

},{}],365:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualNode

function isVirtualNode(x) {
    return x && x.type === "VirtualNode" && x.version === version
}

},{"./version":368}],366:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualText

function isVirtualText(x) {
    return x && x.type === "VirtualText" && x.version === version
}

},{"./version":368}],367:[function(require,module,exports){
module.exports = isWidget

function isWidget(w) {
    return w && w.type === "Widget"
}

},{}],368:[function(require,module,exports){
module.exports = "2"

},{}],369:[function(require,module,exports){
var version = require("./version")
var isVNode = require("./is-vnode")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")
var isVHook = require("./is-vhook")

module.exports = VirtualNode

var noProperties = {}
var noChildren = []

function VirtualNode(tagName, properties, children, key, namespace) {
    this.tagName = tagName
    this.properties = properties || noProperties
    this.children = children || noChildren
    this.key = key != null ? String(key) : undefined
    this.namespace = (typeof namespace === "string") ? namespace : null

    var count = (children && children.length) || 0
    var descendants = 0
    var hasWidgets = false
    var hasThunks = false
    var descendantHooks = false
    var hooks

    for (var propName in properties) {
        if (properties.hasOwnProperty(propName)) {
            var property = properties[propName]
            if (isVHook(property) && property.unhook) {
                if (!hooks) {
                    hooks = {}
                }

                hooks[propName] = property
            }
        }
    }

    for (var i = 0; i < count; i++) {
        var child = children[i]
        if (isVNode(child)) {
            descendants += child.count || 0

            if (!hasWidgets && child.hasWidgets) {
                hasWidgets = true
            }

            if (!hasThunks && child.hasThunks) {
                hasThunks = true
            }

            if (!descendantHooks && (child.hooks || child.descendantHooks)) {
                descendantHooks = true
            }
        } else if (!hasWidgets && isWidget(child)) {
            if (typeof child.destroy === "function") {
                hasWidgets = true
            }
        } else if (!hasThunks && isThunk(child)) {
            hasThunks = true;
        }
    }

    this.count = count + descendants
    this.hasWidgets = hasWidgets
    this.hasThunks = hasThunks
    this.hooks = hooks
    this.descendantHooks = descendantHooks
}

VirtualNode.prototype.version = version
VirtualNode.prototype.type = "VirtualNode"

},{"./is-thunk":363,"./is-vhook":364,"./is-vnode":365,"./is-widget":367,"./version":368}],370:[function(require,module,exports){
var version = require("./version")

module.exports = VirtualText

function VirtualText(text) {
    this.text = String(text)
}

VirtualText.prototype.version = version
VirtualText.prototype.type = "VirtualText"

},{"./version":368}],371:[function(require,module,exports){
// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
//     You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//     See the License for the specific language governing permissions and
// limitations under the License.

!function(a,b){var c={},d={},e={},f=null;!function(a,b){function c(a){if("number"==typeof a)return a;var b={};for(var c in a)b[c]=a[c];return b}function d(){this._delay=0,this._endDelay=0,this._fill="none",this._iterationStart=0,this._iterations=1,this._duration=0,this._playbackRate=1,this._direction="normal",this._easing="linear",this._easingFunction=x}function e(){return a.isDeprecated("Invalid timing inputs","2016-03-02","TypeError exceptions will be thrown instead.",!0)}function f(b,c,e){var f=new d;return c&&(f.fill="both",f.duration="auto"),"number"!=typeof b||isNaN(b)?void 0!==b&&Object.getOwnPropertyNames(b).forEach(function(c){if("auto"!=b[c]){if(("number"==typeof f[c]||"duration"==c)&&("number"!=typeof b[c]||isNaN(b[c])))return;if("fill"==c&&v.indexOf(b[c])==-1)return;if("direction"==c&&w.indexOf(b[c])==-1)return;if("playbackRate"==c&&1!==b[c]&&a.isDeprecated("AnimationEffectTiming.playbackRate","2014-11-28","Use Animation.playbackRate instead."))return;f[c]=b[c]}}):f.duration=b,f}function g(a){return"number"==typeof a&&(a=isNaN(a)?{duration:0}:{duration:a}),a}function h(b,c){return b=a.numericTimingToObject(b),f(b,c)}function i(a,b,c,d){return a<0||a>1||c<0||c>1?x:function(e){function f(a,b,c){return 3*a*(1-c)*(1-c)*c+3*b*(1-c)*c*c+c*c*c}if(e<=0){var g=0;return a>0?g=b/a:!b&&c>0&&(g=d/c),g*e}if(e>=1){var h=0;return c<1?h=(d-1)/(c-1):1==c&&a<1&&(h=(b-1)/(a-1)),1+h*(e-1)}for(var i=0,j=1;i<j;){var k=(i+j)/2,l=f(a,c,k);if(Math.abs(e-l)<1e-5)return f(b,d,k);l<e?i=k:j=k}return f(b,d,k)}}function j(a,b){return function(c){if(c>=1)return 1;var d=1/a;return c+=b*d,c-c%d}}function k(a){C||(C=document.createElement("div").style),C.animationTimingFunction="",C.animationTimingFunction=a;var b=C.animationTimingFunction;if(""==b&&e())throw new TypeError(a+" is not a valid value for easing");return b}function l(a){if("linear"==a)return x;var b=E.exec(a);if(b)return i.apply(this,b.slice(1).map(Number));var c=F.exec(a);if(c)return j(Number(c[1]),{start:y,middle:z,end:A}[c[2]]);var d=B[a];return d?d:x}function m(a){return Math.abs(n(a)/a.playbackRate)}function n(a){return 0===a.duration||0===a.iterations?0:a.duration*a.iterations}function o(a,b,c){if(null==b)return G;var d=c.delay+a+c.endDelay;return b<Math.min(c.delay,d)?H:b>=Math.min(c.delay+a,d)?I:J}function p(a,b,c,d,e){switch(d){case H:return"backwards"==b||"both"==b?0:null;case J:return c-e;case I:return"forwards"==b||"both"==b?a:null;case G:return null}}function q(a,b,c,d,e){var f=e;return 0===a?b!==H&&(f+=c):f+=d/a,f}function r(a,b,c,d,e,f){var g=a===1/0?b%1:a%1;return 0!==g||c!==I||0===d||0===e&&0!==f||(g=1),g}function s(a,b,c,d){return a===I&&b===1/0?1/0:1===c?Math.floor(d)-1:Math.floor(d)}function t(a,b,c){var d=a;if("normal"!==a&&"reverse"!==a){var e=b;"alternate-reverse"===a&&(e+=1),d="normal",e!==1/0&&e%2!==0&&(d="reverse")}return"normal"===d?c:1-c}function u(a,b,c){var d=o(a,b,c),e=p(a,c.fill,b,d,c.delay);if(null===e)return null;var f=q(c.duration,d,c.iterations,e,c.iterationStart),g=r(f,c.iterationStart,d,c.iterations,e,c.duration),h=s(d,c.iterations,g,f),i=t(c.direction,h,g);return c._easingFunction(i)}var v="backwards|forwards|both|none".split("|"),w="reverse|alternate|alternate-reverse".split("|"),x=function(a){return a};d.prototype={_setMember:function(b,c){this["_"+b]=c,this._effect&&(this._effect._timingInput[b]=c,this._effect._timing=a.normalizeTimingInput(this._effect._timingInput),this._effect.activeDuration=a.calculateActiveDuration(this._effect._timing),this._effect._animation&&this._effect._animation._rebuildUnderlyingAnimation())},get playbackRate(){return this._playbackRate},set delay(a){this._setMember("delay",a)},get delay(){return this._delay},set endDelay(a){this._setMember("endDelay",a)},get endDelay(){return this._endDelay},set fill(a){this._setMember("fill",a)},get fill(){return this._fill},set iterationStart(a){if((isNaN(a)||a<0)&&e())throw new TypeError("iterationStart must be a non-negative number, received: "+timing.iterationStart);this._setMember("iterationStart",a)},get iterationStart(){return this._iterationStart},set duration(a){if("auto"!=a&&(isNaN(a)||a<0)&&e())throw new TypeError("duration must be non-negative or auto, received: "+a);this._setMember("duration",a)},get duration(){return this._duration},set direction(a){this._setMember("direction",a)},get direction(){return this._direction},set easing(a){this._easingFunction=l(k(a)),this._setMember("easing",a)},get easing(){return this._easing},set iterations(a){if((isNaN(a)||a<0)&&e())throw new TypeError("iterations must be non-negative, received: "+a);this._setMember("iterations",a)},get iterations(){return this._iterations}};var y=1,z=.5,A=0,B={ease:i(.25,.1,.25,1),"ease-in":i(.42,0,1,1),"ease-out":i(0,0,.58,1),"ease-in-out":i(.42,0,.58,1),"step-start":j(1,y),"step-middle":j(1,z),"step-end":j(1,A)},C=null,D="\\s*(-?\\d+\\.?\\d*|-?\\.\\d+)\\s*",E=new RegExp("cubic-bezier\\("+D+","+D+","+D+","+D+"\\)"),F=/steps\(\s*(\d+)\s*,\s*(start|middle|end)\s*\)/,G=0,H=1,I=2,J=3;a.cloneTimingInput=c,a.makeTiming=f,a.numericTimingToObject=g,a.normalizeTimingInput=h,a.calculateActiveDuration=m,a.calculateIterationProgress=u,a.calculatePhase=o,a.normalizeEasing=k,a.parseEasingFunction=l}(c,f),function(a,b){function c(a,b){return a in k?k[a][b]||b:b}function d(a){return"display"===a||0===a.lastIndexOf("animation",0)||0===a.lastIndexOf("transition",0)}function e(a,b,e){if(!d(a)){var f=h[a];if(f){i.style[a]=b;for(var g in f){var j=f[g],k=i.style[j];e[j]=c(j,k)}}else e[a]=c(a,b)}}function f(a){var b=[];for(var c in a)if(!(c in["easing","offset","composite"])){var d=a[c];Array.isArray(d)||(d=[d]);for(var e,f=d.length,g=0;g<f;g++)e={},"offset"in a?e.offset=a.offset:1==f?e.offset=1:e.offset=g/(f-1),"easing"in a&&(e.easing=a.easing),"composite"in a&&(e.composite=a.composite),e[c]=d[g],b.push(e)}return b.sort(function(a,b){return a.offset-b.offset}),b}function g(b){function c(){var a=d.length;null==d[a-1].offset&&(d[a-1].offset=1),a>1&&null==d[0].offset&&(d[0].offset=0);for(var b=0,c=d[0].offset,e=1;e<a;e++){var f=d[e].offset;if(null!=f){for(var g=1;g<e-b;g++)d[b+g].offset=c+(f-c)*g/(e-b);b=e,c=f}}}if(null==b)return[];window.Symbol&&Symbol.iterator&&Array.prototype.from&&b[Symbol.iterator]&&(b=Array.from(b)),Array.isArray(b)||(b=f(b));for(var d=b.map(function(b){var c={};for(var d in b){var f=b[d];if("offset"==d){if(null!=f){if(f=Number(f),!isFinite(f))throw new TypeError("Keyframe offsets must be numbers.");if(f<0||f>1)throw new TypeError("Keyframe offsets must be between 0 and 1.")}}else if("composite"==d){if("add"==f||"accumulate"==f)throw{type:DOMException.NOT_SUPPORTED_ERR,name:"NotSupportedError",message:"add compositing is not supported"};if("replace"!=f)throw new TypeError("Invalid composite mode "+f+".")}else f="easing"==d?a.normalizeEasing(f):""+f;e(d,f,c)}return void 0==c.offset&&(c.offset=null),void 0==c.easing&&(c.easing="linear"),c}),g=!0,h=-(1/0),i=0;i<d.length;i++){var j=d[i].offset;if(null!=j){if(j<h)throw new TypeError("Keyframes are not loosely sorted by offset. Sort or specify offsets.");h=j}else g=!1}return d=d.filter(function(a){return a.offset>=0&&a.offset<=1}),g||c(),d}var h={background:["backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","backgroundAttachment","backgroundOrigin","backgroundClip","backgroundColor"],border:["borderTopColor","borderTopStyle","borderTopWidth","borderRightColor","borderRightStyle","borderRightWidth","borderBottomColor","borderBottomStyle","borderBottomWidth","borderLeftColor","borderLeftStyle","borderLeftWidth"],borderBottom:["borderBottomWidth","borderBottomStyle","borderBottomColor"],borderColor:["borderTopColor","borderRightColor","borderBottomColor","borderLeftColor"],borderLeft:["borderLeftWidth","borderLeftStyle","borderLeftColor"],borderRadius:["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],borderRight:["borderRightWidth","borderRightStyle","borderRightColor"],borderTop:["borderTopWidth","borderTopStyle","borderTopColor"],borderWidth:["borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth"],flex:["flexGrow","flexShrink","flexBasis"],font:["fontFamily","fontSize","fontStyle","fontVariant","fontWeight","lineHeight"],margin:["marginTop","marginRight","marginBottom","marginLeft"],outline:["outlineColor","outlineStyle","outlineWidth"],padding:["paddingTop","paddingRight","paddingBottom","paddingLeft"]},i=document.createElementNS("http://www.w3.org/1999/xhtml","div"),j={thin:"1px",medium:"3px",thick:"5px"},k={borderBottomWidth:j,borderLeftWidth:j,borderRightWidth:j,borderTopWidth:j,fontSize:{"xx-small":"60%","x-small":"75%",small:"89%",medium:"100%",large:"120%","x-large":"150%","xx-large":"200%"},fontWeight:{normal:"400",bold:"700"},outlineWidth:j,textShadow:{none:"0px 0px 0px transparent"},boxShadow:{none:"0px 0px 0px 0px transparent"}};a.convertToArrayForm=f,a.normalizeKeyframes=g}(c,f),function(a){var b={};a.isDeprecated=function(a,c,d,e){var f=e?"are":"is",g=new Date,h=new Date(c);return h.setMonth(h.getMonth()+3),!(g<h&&(a in b||console.warn("Web Animations: "+a+" "+f+" deprecated and will stop working on "+h.toDateString()+". "+d),b[a]=!0,1))},a.deprecated=function(b,c,d,e){var f=e?"are":"is";if(a.isDeprecated(b,c,d,e))throw new Error(b+" "+f+" no longer supported. "+d)}}(c),function(){if(document.documentElement.animate){var a=document.documentElement.animate([],0),b=!0;if(a&&(b=!1,"play|currentTime|pause|reverse|playbackRate|cancel|finish|startTime|playState".split("|").forEach(function(c){void 0===a[c]&&(b=!0)})),!b)return}!function(a,b,c){function d(a){for(var b={},c=0;c<a.length;c++)for(var d in a[c])if("offset"!=d&&"easing"!=d&&"composite"!=d){var e={offset:a[c].offset,easing:a[c].easing,value:a[c][d]};b[d]=b[d]||[],b[d].push(e)}for(var f in b){var g=b[f];if(0!=g[0].offset||1!=g[g.length-1].offset)throw{type:DOMException.NOT_SUPPORTED_ERR,name:"NotSupportedError",message:"Partial keyframes are not supported"}}return b}function e(c){var d=[];for(var e in c)for(var f=c[e],g=0;g<f.length-1;g++){var h=g,i=g+1,j=f[h].offset,k=f[i].offset,l=j,m=k;0==g&&(l=-(1/0),0==k&&(i=h)),g==f.length-2&&(m=1/0,1==j&&(h=i)),d.push({applyFrom:l,applyTo:m,startOffset:f[h].offset,endOffset:f[i].offset,easingFunction:a.parseEasingFunction(f[h].easing),property:e,interpolation:b.propertyInterpolation(e,f[h].value,f[i].value)})}return d.sort(function(a,b){return a.startOffset-b.startOffset}),d}b.convertEffectInput=function(c){var f=a.normalizeKeyframes(c),g=d(f),h=e(g);return function(a,c){if(null!=c)h.filter(function(a){return c>=a.applyFrom&&c<a.applyTo}).forEach(function(d){var e=c-d.startOffset,f=d.endOffset-d.startOffset,g=0==f?0:d.easingFunction(e/f);b.apply(a,d.property,d.interpolation(g))});else for(var d in g)"offset"!=d&&"easing"!=d&&"composite"!=d&&b.clear(a,d)}}}(c,d,f),function(a,b,c){function d(a){return a.replace(/-(.)/g,function(a,b){return b.toUpperCase()})}function e(a,b,c){h[c]=h[c]||[],h[c].push([a,b])}function f(a,b,c){for(var f=0;f<c.length;f++){var g=c[f];e(a,b,d(g))}}function g(c,e,f){var g=c;/-/.test(c)&&!a.isDeprecated("Hyphenated property names","2016-03-22","Use camelCase instead.",!0)&&(g=d(c)),"initial"!=e&&"initial"!=f||("initial"==e&&(e=i[g]),"initial"==f&&(f=i[g]));for(var j=e==f?[]:h[g],k=0;j&&k<j.length;k++){var l=j[k][0](e),m=j[k][0](f);if(void 0!==l&&void 0!==m){var n=j[k][1](l,m);if(n){var o=b.Interpolation.apply(null,n);return function(a){return 0==a?e:1==a?f:o(a)}}}}return b.Interpolation(!1,!0,function(a){return a?f:e})}var h={};b.addPropertiesHandler=f;var i={backgroundColor:"transparent",backgroundPosition:"0% 0%",borderBottomColor:"currentColor",borderBottomLeftRadius:"0px",borderBottomRightRadius:"0px",borderBottomWidth:"3px",borderLeftColor:"currentColor",borderLeftWidth:"3px",borderRightColor:"currentColor",borderRightWidth:"3px",borderSpacing:"2px",borderTopColor:"currentColor",borderTopLeftRadius:"0px",borderTopRightRadius:"0px",borderTopWidth:"3px",bottom:"auto",clip:"rect(0px, 0px, 0px, 0px)",color:"black",fontSize:"100%",fontWeight:"400",height:"auto",left:"auto",letterSpacing:"normal",lineHeight:"120%",marginBottom:"0px",marginLeft:"0px",marginRight:"0px",marginTop:"0px",maxHeight:"none",maxWidth:"none",minHeight:"0px",minWidth:"0px",opacity:"1.0",outlineColor:"invert",outlineOffset:"0px",outlineWidth:"3px",paddingBottom:"0px",paddingLeft:"0px",paddingRight:"0px",paddingTop:"0px",right:"auto",textIndent:"0px",textShadow:"0px 0px 0px transparent",top:"auto",transform:"",verticalAlign:"0px",visibility:"visible",width:"auto",wordSpacing:"normal",zIndex:"auto"};b.propertyInterpolation=g}(c,d,f),function(a,b,c){function d(b){var c=a.calculateActiveDuration(b),d=function(d){return a.calculateIterationProgress(c,d,b)};return d._totalDuration=b.delay+c+b.endDelay,d}b.KeyframeEffect=function(c,e,f,g){var h,i=d(a.normalizeTimingInput(f)),j=b.convertEffectInput(e),k=function(){j(c,h)};return k._update=function(a){return h=i(a),null!==h},k._clear=function(){j(c,null)},k._hasSameTarget=function(a){return c===a},k._target=c,k._totalDuration=i._totalDuration,k._id=g,k},b.NullEffect=function(a){var b=function(){a&&(a(),a=null)};return b._update=function(){return null},b._totalDuration=0,b._hasSameTarget=function(){return!1},b}}(c,d,f),function(a,b){function c(a,b,c){c.enumerable=!0,c.configurable=!0,Object.defineProperty(a,b,c)}function d(a){this._surrogateStyle=document.createElementNS("http://www.w3.org/1999/xhtml","div").style,this._style=a.style,this._length=0,this._isAnimatedProperty={};for(var b=0;b<this._style.length;b++){var c=this._style[b];this._surrogateStyle[c]=this._style[c]}this._updateIndices()}function e(a){if(!a._webAnimationsPatchedStyle){var b=new d(a);try{c(a,"style",{get:function(){return b}})}catch(b){a.style._set=function(b,c){a.style[b]=c},a.style._clear=function(b){a.style[b]=""}}a._webAnimationsPatchedStyle=a.style}}var f={cssText:1,length:1,parentRule:1},g={getPropertyCSSValue:1,getPropertyPriority:1,getPropertyValue:1,item:1,removeProperty:1,setProperty:1},h={removeProperty:1,setProperty:1};d.prototype={get cssText(){return this._surrogateStyle.cssText},set cssText(a){for(var b={},c=0;c<this._surrogateStyle.length;c++)b[this._surrogateStyle[c]]=!0;this._surrogateStyle.cssText=a,this._updateIndices();for(var c=0;c<this._surrogateStyle.length;c++)b[this._surrogateStyle[c]]=!0;for(var d in b)this._isAnimatedProperty[d]||this._style.setProperty(d,this._surrogateStyle.getPropertyValue(d))},get length(){return this._surrogateStyle.length},get parentRule(){return this._style.parentRule},_updateIndices:function(){for(;this._length<this._surrogateStyle.length;)Object.defineProperty(this,this._length,{configurable:!0,enumerable:!1,get:function(a){return function(){return this._surrogateStyle[a]}}(this._length)}),this._length++;for(;this._length>this._surrogateStyle.length;)this._length--,Object.defineProperty(this,this._length,{configurable:!0,enumerable:!1,value:void 0})},_set:function(a,b){this._style[a]=b,this._isAnimatedProperty[a]=!0},_clear:function(a){this._style[a]=this._surrogateStyle[a],delete this._isAnimatedProperty[a]}};for(var i in g)d.prototype[i]=function(a,b){return function(){var c=this._surrogateStyle[a].apply(this._surrogateStyle,arguments);return b&&(this._isAnimatedProperty[arguments[0]]||this._style[a].apply(this._style,arguments),this._updateIndices()),c}}(i,i in h);for(var j in document.documentElement.style)j in f||j in g||!function(a){c(d.prototype,a,{get:function(){return this._surrogateStyle[a]},set:function(b){this._surrogateStyle[a]=b,this._updateIndices(),this._isAnimatedProperty[a]||(this._style[a]=b)}})}(j);a.apply=function(b,c,d){e(b),b.style._set(a.propertyName(c),d)},a.clear=function(b,c){b._webAnimationsPatchedStyle&&b.style._clear(a.propertyName(c))}}(d,f),function(a){window.Element.prototype.animate=function(b,c){var d="";return c&&c.id&&(d=c.id),a.timeline._play(a.KeyframeEffect(this,b,c,d))}}(d),function(a,b){function c(a,b,d){if("number"==typeof a&&"number"==typeof b)return a*(1-d)+b*d;if("boolean"==typeof a&&"boolean"==typeof b)return d<.5?a:b;if(a.length==b.length){for(var e=[],f=0;f<a.length;f++)e.push(c(a[f],b[f],d));return e}throw"Mismatched interpolation arguments "+a+":"+b}a.Interpolation=function(a,b,d){return function(e){return d(c(a,b,e))}}}(d,f),function(a,b){function c(a,b,c){return Math.max(Math.min(a,c),b)}function d(b,d,e){var f=a.dot(b,d);f=c(f,-1,1);var g=[];if(1===f)g=b;else for(var h=Math.acos(f),i=1*Math.sin(e*h)/Math.sqrt(1-f*f),j=0;j<4;j++)g.push(b[j]*(Math.cos(e*h)-f*i)+d[j]*i);return g}var e=function(){function a(a,b){for(var c=[[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]],d=0;d<4;d++)for(var e=0;e<4;e++)for(var f=0;f<4;f++)c[d][e]+=b[d][f]*a[f][e];return c}function b(a){return 0==a[0][2]&&0==a[0][3]&&0==a[1][2]&&0==a[1][3]&&0==a[2][0]&&0==a[2][1]&&1==a[2][2]&&0==a[2][3]&&0==a[3][2]&&1==a[3][3]}function c(c,d,e,f,g){for(var h=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]],i=0;i<4;i++)h[i][3]=g[i];for(var i=0;i<3;i++)for(var j=0;j<3;j++)h[3][i]+=c[j]*h[j][i];var k=f[0],l=f[1],m=f[2],n=f[3],o=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]];o[0][0]=1-2*(l*l+m*m),o[0][1]=2*(k*l-m*n),o[0][2]=2*(k*m+l*n),o[1][0]=2*(k*l+m*n),o[1][1]=1-2*(k*k+m*m),o[1][2]=2*(l*m-k*n),o[2][0]=2*(k*m-l*n),o[2][1]=2*(l*m+k*n),o[2][2]=1-2*(k*k+l*l),h=a(h,o);var p=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]];e[2]&&(p[2][1]=e[2],h=a(h,p)),e[1]&&(p[2][1]=0,p[2][0]=e[0],h=a(h,p)),e[0]&&(p[2][0]=0,p[1][0]=e[0],h=a(h,p));for(var i=0;i<3;i++)for(var j=0;j<3;j++)h[i][j]*=d[i];return b(h)?[h[0][0],h[0][1],h[1][0],h[1][1],h[3][0],h[3][1]]:h[0].concat(h[1],h[2],h[3])}return c}();a.composeMatrix=e,a.quat=d}(d,f),function(a,b,c){a.sequenceNumber=0;var d=function(a,b,c){this.target=a,this.currentTime=b,this.timelineTime=c,this.type="finish",this.bubbles=!1,this.cancelable=!1,this.currentTarget=a,this.defaultPrevented=!1,this.eventPhase=Event.AT_TARGET,this.timeStamp=Date.now()};b.Animation=function(b){this.id="",b&&b._id&&(this.id=b._id),this._sequenceNumber=a.sequenceNumber++,this._currentTime=0,this._startTime=null,this._paused=!1,this._playbackRate=1,this._inTimeline=!0,this._finishedFlag=!0,this.onfinish=null,this._finishHandlers=[],this._effect=b,this._inEffect=this._effect._update(0),this._idle=!0,this._currentTimePending=!1},b.Animation.prototype={_ensureAlive:function(){this.playbackRate<0&&0===this.currentTime?this._inEffect=this._effect._update(-1):this._inEffect=this._effect._update(this.currentTime),this._inTimeline||!this._inEffect&&this._finishedFlag||(this._inTimeline=!0,b.timeline._animations.push(this))},_tickCurrentTime:function(a,b){a!=this._currentTime&&(this._currentTime=a,this._isFinished&&!b&&(this._currentTime=this._playbackRate>0?this._totalDuration:0),this._ensureAlive())},get currentTime(){return this._idle||this._currentTimePending?null:this._currentTime},set currentTime(a){a=+a,isNaN(a)||(b.restart(),this._paused||null==this._startTime||(this._startTime=this._timeline.currentTime-a/this._playbackRate),this._currentTimePending=!1,this._currentTime!=a&&(this._idle&&(this._idle=!1,this._paused=!0),this._tickCurrentTime(a,!0),b.applyDirtiedAnimation(this)))},get startTime(){return this._startTime},set startTime(a){a=+a,isNaN(a)||this._paused||this._idle||(this._startTime=a,this._tickCurrentTime((this._timeline.currentTime-this._startTime)*this.playbackRate),b.applyDirtiedAnimation(this))},get playbackRate(){return this._playbackRate},set playbackRate(a){if(a!=this._playbackRate){var c=this.currentTime;this._playbackRate=a,this._startTime=null,"paused"!=this.playState&&"idle"!=this.playState&&(this._finishedFlag=!1,this._idle=!1,this._ensureAlive(),b.applyDirtiedAnimation(this)),null!=c&&(this.currentTime=c)}},get _isFinished(){return!this._idle&&(this._playbackRate>0&&this._currentTime>=this._totalDuration||this._playbackRate<0&&this._currentTime<=0)},get _totalDuration(){return this._effect._totalDuration},get playState(){return this._idle?"idle":null==this._startTime&&!this._paused&&0!=this.playbackRate||this._currentTimePending?"pending":this._paused?"paused":this._isFinished?"finished":"running"},_rewind:function(){if(this._playbackRate>=0)this._currentTime=0;else{if(!(this._totalDuration<1/0))throw new DOMException("Unable to rewind negative playback rate animation with infinite duration","InvalidStateError");this._currentTime=this._totalDuration}},play:function(){this._paused=!1,(this._isFinished||this._idle)&&(this._rewind(),this._startTime=null),this._finishedFlag=!1,this._idle=!1,this._ensureAlive(),b.applyDirtiedAnimation(this)},pause:function(){this._isFinished||this._paused||this._idle?this._idle&&(this._rewind(),this._idle=!1):this._currentTimePending=!0,this._startTime=null,this._paused=!0},finish:function(){this._idle||(this.currentTime=this._playbackRate>0?this._totalDuration:0,this._startTime=this._totalDuration-this.currentTime,this._currentTimePending=!1,b.applyDirtiedAnimation(this))},cancel:function(){this._inEffect&&(this._inEffect=!1,this._idle=!0,this._paused=!1,this._isFinished=!0,this._finishedFlag=!0,this._currentTime=0,this._startTime=null,this._effect._update(null),b.applyDirtiedAnimation(this))},reverse:function(){this.playbackRate*=-1,this.play()},addEventListener:function(a,b){"function"==typeof b&&"finish"==a&&this._finishHandlers.push(b)},removeEventListener:function(a,b){if("finish"==a){var c=this._finishHandlers.indexOf(b);c>=0&&this._finishHandlers.splice(c,1)}},_fireEvents:function(a){if(this._isFinished){if(!this._finishedFlag){var b=new d(this,this._currentTime,a),c=this._finishHandlers.concat(this.onfinish?[this.onfinish]:[]);setTimeout(function(){c.forEach(function(a){a.call(b.target,b)})},0),this._finishedFlag=!0}}else this._finishedFlag=!1},_tick:function(a,b){this._idle||this._paused||(null==this._startTime?b&&(this.startTime=a-this._currentTime/this.playbackRate):this._isFinished||this._tickCurrentTime((a-this._startTime)*this.playbackRate)),b&&(this._currentTimePending=!1,this._fireEvents(a))},get _needsTick(){return this.playState in{pending:1,running:1}||!this._finishedFlag},_targetAnimations:function(){var a=this._effect._target;return a._activeAnimations||(a._activeAnimations=[]),a._activeAnimations},_markTarget:function(){var a=this._targetAnimations();a.indexOf(this)===-1&&a.push(this)},_unmarkTarget:function(){var a=this._targetAnimations(),b=a.indexOf(this);b!==-1&&a.splice(b,1)}}}(c,d,f),function(a,b,c){function d(a){var b=j;j=[],a<q.currentTime&&(a=q.currentTime),q._animations.sort(e),q._animations=h(a,!0,q._animations)[0],b.forEach(function(b){b[1](a)}),g(),l=void 0}function e(a,b){return a._sequenceNumber-b._sequenceNumber}function f(){this._animations=[],this.currentTime=window.performance&&performance.now?performance.now():0}function g(){o.forEach(function(a){a()}),o.length=0}function h(a,c,d){p=!0,n=!1;var e=b.timeline;e.currentTime=a,m=!1;var f=[],g=[],h=[],i=[];return d.forEach(function(b){b._tick(a,c),b._inEffect?(g.push(b._effect),b._markTarget()):(f.push(b._effect),b._unmarkTarget()),b._needsTick&&(m=!0);var d=b._inEffect||b._needsTick;b._inTimeline=d,d?h.push(b):i.push(b)}),o.push.apply(o,f),o.push.apply(o,g),m&&requestAnimationFrame(function(){}),p=!1,[h,i]}var i=window.requestAnimationFrame,j=[],k=0;window.requestAnimationFrame=function(a){var b=k++;return 0==j.length&&i(d),j.push([b,a]),b},window.cancelAnimationFrame=function(a){j.forEach(function(b){b[0]==a&&(b[1]=function(){})})},f.prototype={_play:function(c){c._timing=a.normalizeTimingInput(c.timing);var d=new b.Animation(c);return d._idle=!1,d._timeline=this,this._animations.push(d),b.restart(),b.applyDirtiedAnimation(d),d}};var l=void 0,m=!1,n=!1;b.restart=function(){return m||(m=!0,requestAnimationFrame(function(){}),n=!0),n},b.applyDirtiedAnimation=function(a){if(!p){a._markTarget();var c=a._targetAnimations();c.sort(e);var d=h(b.timeline.currentTime,!1,c.slice())[1];d.forEach(function(a){var b=q._animations.indexOf(a);b!==-1&&q._animations.splice(b,1)}),g()}};var o=[],p=!1,q=new f;b.timeline=q}(c,d,f),function(a,b){function c(a,b){for(var c=0,d=0;d<a.length;d++)c+=a[d]*b[d];return c}function d(a,b){return[a[0]*b[0]+a[4]*b[1]+a[8]*b[2]+a[12]*b[3],a[1]*b[0]+a[5]*b[1]+a[9]*b[2]+a[13]*b[3],a[2]*b[0]+a[6]*b[1]+a[10]*b[2]+a[14]*b[3],a[3]*b[0]+a[7]*b[1]+a[11]*b[2]+a[15]*b[3],a[0]*b[4]+a[4]*b[5]+a[8]*b[6]+a[12]*b[7],a[1]*b[4]+a[5]*b[5]+a[9]*b[6]+a[13]*b[7],a[2]*b[4]+a[6]*b[5]+a[10]*b[6]+a[14]*b[7],a[3]*b[4]+a[7]*b[5]+a[11]*b[6]+a[15]*b[7],a[0]*b[8]+a[4]*b[9]+a[8]*b[10]+a[12]*b[11],a[1]*b[8]+a[5]*b[9]+a[9]*b[10]+a[13]*b[11],a[2]*b[8]+a[6]*b[9]+a[10]*b[10]+a[14]*b[11],a[3]*b[8]+a[7]*b[9]+a[11]*b[10]+a[15]*b[11],a[0]*b[12]+a[4]*b[13]+a[8]*b[14]+a[12]*b[15],a[1]*b[12]+a[5]*b[13]+a[9]*b[14]+a[13]*b[15],a[2]*b[12]+a[6]*b[13]+a[10]*b[14]+a[14]*b[15],a[3]*b[12]+a[7]*b[13]+a[11]*b[14]+a[15]*b[15]]}function e(a){var b=a.rad||0,c=a.deg||0,d=a.grad||0,e=a.turn||0,f=(c/360+d/400+e)*(2*Math.PI)+b;return f}function f(a){switch(a.t){case"rotatex":var b=e(a.d[0]);return[1,0,0,0,0,Math.cos(b),Math.sin(b),0,0,-Math.sin(b),Math.cos(b),0,0,0,0,1];case"rotatey":var b=e(a.d[0]);return[Math.cos(b),0,-Math.sin(b),0,0,1,0,0,Math.sin(b),0,Math.cos(b),0,0,0,0,1];case"rotate":case"rotatez":var b=e(a.d[0]);return[Math.cos(b),Math.sin(b),0,0,-Math.sin(b),Math.cos(b),0,0,0,0,1,0,0,0,0,1];case"rotate3d":var c=a.d[0],d=a.d[1],f=a.d[2],b=e(a.d[3]),g=c*c+d*d+f*f;if(0===g)c=1,d=0,f=0;else if(1!==g){var h=Math.sqrt(g);c/=h,d/=h,f/=h}var i=Math.sin(b/2),j=i*Math.cos(b/2),k=i*i;return[1-2*(d*d+f*f)*k,2*(c*d*k+f*j),2*(c*f*k-d*j),0,2*(c*d*k-f*j),1-2*(c*c+f*f)*k,2*(d*f*k+c*j),0,2*(c*f*k+d*j),2*(d*f*k-c*j),1-2*(c*c+d*d)*k,0,0,0,0,1];case"scale":return[a.d[0],0,0,0,0,a.d[1],0,0,0,0,1,0,0,0,0,1];case"scalex":return[a.d[0],0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];case"scaley":return[1,0,0,0,0,a.d[0],0,0,0,0,1,0,0,0,0,1];case"scalez":return[1,0,0,0,0,1,0,0,0,0,a.d[0],0,0,0,0,1];case"scale3d":return[a.d[0],0,0,0,0,a.d[1],0,0,0,0,a.d[2],0,0,0,0,1];case"skew":var l=e(a.d[0]),m=e(a.d[1]);return[1,Math.tan(m),0,0,Math.tan(l),1,0,0,0,0,1,0,0,0,0,1];case"skewx":var b=e(a.d[0]);return[1,0,0,0,Math.tan(b),1,0,0,0,0,1,0,0,0,0,1];case"skewy":var b=e(a.d[0]);return[1,Math.tan(b),0,0,0,1,0,0,0,0,1,0,0,0,0,1];case"translate":var c=a.d[0].px||0,d=a.d[1].px||0;return[1,0,0,0,0,1,0,0,0,0,1,0,c,d,0,1];case"translatex":var c=a.d[0].px||0;return[1,0,0,0,0,1,0,0,0,0,1,0,c,0,0,1];case"translatey":var d=a.d[0].px||0;return[1,0,0,0,0,1,0,0,0,0,1,0,0,d,0,1];case"translatez":var f=a.d[0].px||0;return[1,0,0,0,0,1,0,0,0,0,1,0,0,0,f,1];case"translate3d":var c=a.d[0].px||0,d=a.d[1].px||0,f=a.d[2].px||0;return[1,0,0,0,0,1,0,0,0,0,1,0,c,d,f,1];case"perspective":var n=a.d[0].px?-1/a.d[0].px:0;return[1,0,0,0,0,1,0,0,0,0,1,n,0,0,0,1];case"matrix":return[a.d[0],a.d[1],0,0,a.d[2],a.d[3],0,0,0,0,1,0,a.d[4],a.d[5],0,1];case"matrix3d":return a.d}}function g(a){return 0===a.length?[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]:a.map(f).reduce(d)}function h(a){return[i(g(a))]}var i=function(){function a(a){return a[0][0]*a[1][1]*a[2][2]+a[1][0]*a[2][1]*a[0][2]+a[2][0]*a[0][1]*a[1][2]-a[0][2]*a[1][1]*a[2][0]-a[1][2]*a[2][1]*a[0][0]-a[2][2]*a[0][1]*a[1][0]}function b(b){for(var c=1/a(b),d=b[0][0],e=b[0][1],f=b[0][2],g=b[1][0],h=b[1][1],i=b[1][2],j=b[2][0],k=b[2][1],l=b[2][2],m=[[(h*l-i*k)*c,(f*k-e*l)*c,(e*i-f*h)*c,0],[(i*j-g*l)*c,(d*l-f*j)*c,(f*g-d*i)*c,0],[(g*k-h*j)*c,(j*e-d*k)*c,(d*h-e*g)*c,0]],n=[],o=0;o<3;o++){for(var p=0,q=0;q<3;q++)p+=b[3][q]*m[q][o];n.push(p)}return n.push(1),m.push(n),m}function d(a){return[[a[0][0],a[1][0],a[2][0],a[3][0]],[a[0][1],a[1][1],a[2][1],a[3][1]],[a[0][2],a[1][2],a[2][2],a[3][2]],[a[0][3],a[1][3],a[2][3],a[3][3]]]}function e(a,b){for(var c=[],d=0;d<4;d++){for(var e=0,f=0;f<4;f++)e+=a[f]*b[f][d];c.push(e)}return c}function f(a){var b=g(a);return[a[0]/b,a[1]/b,a[2]/b]}function g(a){return Math.sqrt(a[0]*a[0]+a[1]*a[1]+a[2]*a[2])}function h(a,b,c,d){return[c*a[0]+d*b[0],c*a[1]+d*b[1],c*a[2]+d*b[2]]}function i(a,b){return[a[1]*b[2]-a[2]*b[1],a[2]*b[0]-a[0]*b[2],a[0]*b[1]-a[1]*b[0]]}function j(j){var k=[j.slice(0,4),j.slice(4,8),j.slice(8,12),j.slice(12,16)];if(1!==k[3][3])return null;for(var l=[],m=0;m<4;m++)l.push(k[m].slice());for(var m=0;m<3;m++)l[m][3]=0;if(0===a(l))return!1;var n,o=[];if(k[0][3]||k[1][3]||k[2][3]){o.push(k[0][3]),o.push(k[1][3]),o.push(k[2][3]),o.push(k[3][3]);var p=b(l),q=d(p);n=e(o,q)}else n=[0,0,0,1];var r=k[3].slice(0,3),s=[];s.push(k[0].slice(0,3));var t=[];t.push(g(s[0])),s[0]=f(s[0]);var u=[];s.push(k[1].slice(0,3)),u.push(c(s[0],s[1])),s[1]=h(s[1],s[0],1,-u[0]),t.push(g(s[1])),s[1]=f(s[1]),u[0]/=t[1],s.push(k[2].slice(0,3)),u.push(c(s[0],s[2])),s[2]=h(s[2],s[0],1,-u[1]),u.push(c(s[1],s[2])),s[2]=h(s[2],s[1],1,-u[2]),t.push(g(s[2])),s[2]=f(s[2]),u[1]/=t[2],u[2]/=t[2];var v=i(s[1],s[2]);if(c(s[0],v)<0)for(var m=0;m<3;m++)t[m]*=-1,s[m][0]*=-1,s[m][1]*=-1,s[m][2]*=-1;var w,x,y=s[0][0]+s[1][1]+s[2][2]+1;return y>1e-4?(w=.5/Math.sqrt(y),x=[(s[2][1]-s[1][2])*w,(s[0][2]-s[2][0])*w,(s[1][0]-s[0][1])*w,.25/w]):s[0][0]>s[1][1]&&s[0][0]>s[2][2]?(w=2*Math.sqrt(1+s[0][0]-s[1][1]-s[2][2]),x=[.25*w,(s[0][1]+s[1][0])/w,(s[0][2]+s[2][0])/w,(s[2][1]-s[1][2])/w]):s[1][1]>s[2][2]?(w=2*Math.sqrt(1+s[1][1]-s[0][0]-s[2][2]),x=[(s[0][1]+s[1][0])/w,.25*w,(s[1][2]+s[2][1])/w,(s[0][2]-s[2][0])/w]):(w=2*Math.sqrt(1+s[2][2]-s[0][0]-s[1][1]),x=[(s[0][2]+s[2][0])/w,(s[1][2]+s[2][1])/w,.25*w,(s[1][0]-s[0][1])/w]),[r,t,u,x,n]}return j}();a.dot=c,a.makeMatrixDecomposition=h}(d,f),function(a){function b(a,b){var c=a.exec(b);if(c)return c=a.ignoreCase?c[0].toLowerCase():c[0],[c,b.substr(c.length)]}function c(a,b){b=b.replace(/^\s*/,"");var c=a(b);if(c)return[c[0],c[1].replace(/^\s*/,"")]}function d(a,d,e){a=c.bind(null,a);for(var f=[];;){var g=a(e);if(!g)return[f,e];if(f.push(g[0]),e=g[1],g=b(d,e),!g||""==g[1])return[f,e];e=g[1]}}function e(a,b){for(var c=0,d=0;d<b.length&&(!/\s|,/.test(b[d])||0!=c);d++)if("("==b[d])c++;else if(")"==b[d]&&(c--,0==c&&d++,c<=0))break;var e=a(b.substr(0,d));return void 0==e?void 0:[e,b.substr(d)]}function f(a,b){for(var c=a,d=b;c&&d;)c>d?c%=d:d%=c;return c=a*b/(c+d)}function g(a){return function(b){var c=a(b);return c&&(c[0]=void 0),c}}function h(a,b){return function(c){var d=a(c);return d?d:[b,c]}}function i(b,c){for(var d=[],e=0;e<b.length;e++){var f=a.consumeTrimmed(b[e],c);if(!f||""==f[0])return;void 0!==f[0]&&d.push(f[0]),c=f[1]}if(""==c)return d}function j(a,b,c,d,e){for(var g=[],h=[],i=[],j=f(d.length,e.length),k=0;k<j;k++){var l=b(d[k%d.length],e[k%e.length]);if(!l)return;g.push(l[0]),h.push(l[1]),i.push(l[2])}return[g,h,function(b){var d=b.map(function(a,b){return i[b](a)}).join(c);return a?a(d):d}]}function k(a,b,c){for(var d=[],e=[],f=[],g=0,h=0;h<c.length;h++)if("function"==typeof c[h]){var i=c[h](a[g],b[g++]);d.push(i[0]),e.push(i[1]),f.push(i[2])}else!function(a){d.push(!1),e.push(!1),f.push(function(){return c[a]})}(h);return[d,e,function(a){for(var b="",c=0;c<a.length;c++)b+=f[c](a[c]);return b}]}a.consumeToken=b,a.consumeTrimmed=c,a.consumeRepeated=d,a.consumeParenthesised=e,a.ignore=g,a.optional=h,a.consumeList=i,a.mergeNestedRepeated=j.bind(null,null),a.mergeWrappedNestedRepeated=j,a.mergeList=k}(d),function(a){function b(b){function c(b){var c=a.consumeToken(/^inset/i,b);if(c)return d.inset=!0,c;var c=a.consumeLengthOrPercent(b);if(c)return d.lengths.push(c[0]),c;var c=a.consumeColor(b);return c?(d.color=c[0],c):void 0}var d={inset:!1,lengths:[],color:null},e=a.consumeRepeated(c,/^/,b);if(e&&e[0].length)return[d,e[1]]}function c(c){var d=a.consumeRepeated(b,/^,/,c);if(d&&""==d[1])return d[0]}function d(b,c){for(;b.lengths.length<Math.max(b.lengths.length,c.lengths.length);)b.lengths.push({px:0});for(;c.lengths.length<Math.max(b.lengths.length,c.lengths.length);)c.lengths.push({px:0});if(b.inset==c.inset&&!!b.color==!!c.color){for(var d,e=[],f=[[],0],g=[[],0],h=0;h<b.lengths.length;h++){var i=a.mergeDimensions(b.lengths[h],c.lengths[h],2==h);f[0].push(i[0]),g[0].push(i[1]),e.push(i[2])}if(b.color&&c.color){var j=a.mergeColors(b.color,c.color);f[1]=j[0],g[1]=j[1],d=j[2];
}return[f,g,function(a){for(var c=b.inset?"inset ":" ",f=0;f<e.length;f++)c+=e[f](a[0][f])+" ";return d&&(c+=d(a[1])),c}]}}function e(b,c,d,e){function f(a){return{inset:a,color:[0,0,0,0],lengths:[{px:0},{px:0},{px:0},{px:0}]}}for(var g=[],h=[],i=0;i<d.length||i<e.length;i++){var j=d[i]||f(e[i].inset),k=e[i]||f(d[i].inset);g.push(j),h.push(k)}return a.mergeNestedRepeated(b,c,g,h)}var f=e.bind(null,d,", ");a.addPropertiesHandler(c,f,["box-shadow","text-shadow"])}(d),function(a,b){function c(a){return a.toFixed(3).replace(".000","")}function d(a,b,c){return Math.min(b,Math.max(a,c))}function e(a){if(/^\s*[-+]?(\d*\.)?\d+\s*$/.test(a))return Number(a)}function f(a,b){return[a,b,c]}function g(a,b){if(0!=a)return i(0,1/0)(a,b)}function h(a,b){return[a,b,function(a){return Math.round(d(1,1/0,a))}]}function i(a,b){return function(e,f){return[e,f,function(e){return c(d(a,b,e))}]}}function j(a,b){return[a,b,Math.round]}a.clamp=d,a.addPropertiesHandler(e,i(0,1/0),["border-image-width","line-height"]),a.addPropertiesHandler(e,i(0,1),["opacity","shape-image-threshold"]),a.addPropertiesHandler(e,g,["flex-grow","flex-shrink"]),a.addPropertiesHandler(e,h,["orphans","widows"]),a.addPropertiesHandler(e,j,["z-index"]),a.parseNumber=e,a.mergeNumbers=f,a.numberToString=c}(d,f),function(a,b){function c(a,b){if("visible"==a||"visible"==b)return[0,1,function(c){return c<=0?a:c>=1?b:"visible"}]}a.addPropertiesHandler(String,c,["visibility"])}(d),function(a,b){function c(a){a=a.trim(),f.fillStyle="#000",f.fillStyle=a;var b=f.fillStyle;if(f.fillStyle="#fff",f.fillStyle=a,b==f.fillStyle){f.fillRect(0,0,1,1);var c=f.getImageData(0,0,1,1).data;f.clearRect(0,0,1,1);var d=c[3]/255;return[c[0]*d,c[1]*d,c[2]*d,d]}}function d(b,c){return[b,c,function(b){function c(a){return Math.max(0,Math.min(255,a))}if(b[3])for(var d=0;d<3;d++)b[d]=Math.round(c(b[d]/b[3]));return b[3]=a.numberToString(a.clamp(0,1,b[3])),"rgba("+b.join(",")+")"}]}var e=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");e.width=e.height=1;var f=e.getContext("2d");a.addPropertiesHandler(c,d,["background-color","border-bottom-color","border-left-color","border-right-color","border-top-color","color","outline-color","text-decoration-color"]),a.consumeColor=a.consumeParenthesised.bind(null,c),a.mergeColors=d}(d,f),function(a,b){function c(a,b){if(b=b.trim().toLowerCase(),"0"==b&&"px".search(a)>=0)return{px:0};if(/^[^(]*$|^calc/.test(b)){b=b.replace(/calc\(/g,"(");var c={};b=b.replace(a,function(a){return c[a]=null,"U"+a});for(var d="U("+a.source+")",e=b.replace(/[-+]?(\d*\.)?\d+/g,"N").replace(new RegExp("N"+d,"g"),"D").replace(/\s[+-]\s/g,"O").replace(/\s/g,""),f=[/N\*(D)/g,/(N|D)[*\/]N/g,/(N|D)O\1/g,/\((N|D)\)/g],g=0;g<f.length;)f[g].test(e)?(e=e.replace(f[g],"$1"),g=0):g++;if("D"==e){for(var h in c){var i=eval(b.replace(new RegExp("U"+h,"g"),"").replace(new RegExp(d,"g"),"*0"));if(!isFinite(i))return;c[h]=i}return c}}}function d(a,b){return e(a,b,!0)}function e(b,c,d){var e,f=[];for(e in b)f.push(e);for(e in c)f.indexOf(e)<0&&f.push(e);return b=f.map(function(a){return b[a]||0}),c=f.map(function(a){return c[a]||0}),[b,c,function(b){var c=b.map(function(c,e){return 1==b.length&&d&&(c=Math.max(c,0)),a.numberToString(c)+f[e]}).join(" + ");return b.length>1?"calc("+c+")":c}]}var f="px|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc",g=c.bind(null,new RegExp(f,"g")),h=c.bind(null,new RegExp(f+"|%","g")),i=c.bind(null,/deg|rad|grad|turn/g);a.parseLength=g,a.parseLengthOrPercent=h,a.consumeLengthOrPercent=a.consumeParenthesised.bind(null,h),a.parseAngle=i,a.mergeDimensions=e;var j=a.consumeParenthesised.bind(null,g),k=a.consumeRepeated.bind(void 0,j,/^/),l=a.consumeRepeated.bind(void 0,k,/^,/);a.consumeSizePairList=l;var m=function(a){var b=l(a);if(b&&""==b[1])return b[0]},n=a.mergeNestedRepeated.bind(void 0,d," "),o=a.mergeNestedRepeated.bind(void 0,n,",");a.mergeNonNegativeSizePair=n,a.addPropertiesHandler(m,o,["background-size"]),a.addPropertiesHandler(h,d,["border-bottom-width","border-image-width","border-left-width","border-right-width","border-top-width","flex-basis","font-size","height","line-height","max-height","max-width","outline-width","width"]),a.addPropertiesHandler(h,e,["border-bottom-left-radius","border-bottom-right-radius","border-top-left-radius","border-top-right-radius","bottom","left","letter-spacing","margin-bottom","margin-left","margin-right","margin-top","min-height","min-width","outline-offset","padding-bottom","padding-left","padding-right","padding-top","perspective","right","shape-margin","text-indent","top","vertical-align","word-spacing"])}(d,f),function(a,b){function c(b){return a.consumeLengthOrPercent(b)||a.consumeToken(/^auto/,b)}function d(b){var d=a.consumeList([a.ignore(a.consumeToken.bind(null,/^rect/)),a.ignore(a.consumeToken.bind(null,/^\(/)),a.consumeRepeated.bind(null,c,/^,/),a.ignore(a.consumeToken.bind(null,/^\)/))],b);if(d&&4==d[0].length)return d[0]}function e(b,c){return"auto"==b||"auto"==c?[!0,!1,function(d){var e=d?b:c;if("auto"==e)return"auto";var f=a.mergeDimensions(e,e);return f[2](f[0])}]:a.mergeDimensions(b,c)}function f(a){return"rect("+a+")"}var g=a.mergeWrappedNestedRepeated.bind(null,f,e,", ");a.parseBox=d,a.mergeBoxes=g,a.addPropertiesHandler(d,g,["clip"])}(d,f),function(a,b){function c(a){return function(b){var c=0;return a.map(function(a){return a===k?b[c++]:a})}}function d(a){return a}function e(b){if(b=b.toLowerCase().trim(),"none"==b)return[];for(var c,d=/\s*(\w+)\(([^)]*)\)/g,e=[],f=0;c=d.exec(b);){if(c.index!=f)return;f=c.index+c[0].length;var g=c[1],h=n[g];if(!h)return;var i=c[2].split(","),j=h[0];if(j.length<i.length)return;for(var k=[],o=0;o<j.length;o++){var p,q=i[o],r=j[o];if(p=q?{A:function(b){return"0"==b.trim()?m:a.parseAngle(b)},N:a.parseNumber,T:a.parseLengthOrPercent,L:a.parseLength}[r.toUpperCase()](q):{a:m,n:k[0],t:l}[r],void 0===p)return;k.push(p)}if(e.push({t:g,d:k}),d.lastIndex==b.length)return e}}function f(a){return a.toFixed(6).replace(".000000","")}function g(b,c){if(b.decompositionPair!==c){b.decompositionPair=c;var d=a.makeMatrixDecomposition(b)}if(c.decompositionPair!==b){c.decompositionPair=b;var e=a.makeMatrixDecomposition(c)}return null==d[0]||null==e[0]?[[!1],[!0],function(a){return a?c[0].d:b[0].d}]:(d[0].push(0),e[0].push(1),[d,e,function(b){var c=a.quat(d[0][3],e[0][3],b[5]),g=a.composeMatrix(b[0],b[1],b[2],c,b[4]),h=g.map(f).join(",");return h}])}function h(a){return a.replace(/[xy]/,"")}function i(a){return a.replace(/(x|y|z|3d)?$/,"3d")}function j(b,c){var d=a.makeMatrixDecomposition&&!0,e=!1;if(!b.length||!c.length){b.length||(e=!0,b=c,c=[]);for(var f=0;f<b.length;f++){var j=b[f].t,k=b[f].d,l="scale"==j.substr(0,5)?1:0;c.push({t:j,d:k.map(function(a){if("number"==typeof a)return l;var b={};for(var c in a)b[c]=l;return b})})}}var m=function(a,b){return"perspective"==a&&"perspective"==b||("matrix"==a||"matrix3d"==a)&&("matrix"==b||"matrix3d"==b)},o=[],p=[],q=[];if(b.length!=c.length){if(!d)return;var r=g(b,c);o=[r[0]],p=[r[1]],q=[["matrix",[r[2]]]]}else for(var f=0;f<b.length;f++){var j,s=b[f].t,t=c[f].t,u=b[f].d,v=c[f].d,w=n[s],x=n[t];if(m(s,t)){if(!d)return;var r=g([b[f]],[c[f]]);o.push(r[0]),p.push(r[1]),q.push(["matrix",[r[2]]])}else{if(s==t)j=s;else if(w[2]&&x[2]&&h(s)==h(t))j=h(s),u=w[2](u),v=x[2](v);else{if(!w[1]||!x[1]||i(s)!=i(t)){if(!d)return;var r=g(b,c);o=[r[0]],p=[r[1]],q=[["matrix",[r[2]]]];break}j=i(s),u=w[1](u),v=x[1](v)}for(var y=[],z=[],A=[],B=0;B<u.length;B++){var C="number"==typeof u[B]?a.mergeNumbers:a.mergeDimensions,r=C(u[B],v[B]);y[B]=r[0],z[B]=r[1],A.push(r[2])}o.push(y),p.push(z),q.push([j,A])}}if(e){var D=o;o=p,p=D}return[o,p,function(a){return a.map(function(a,b){var c=a.map(function(a,c){return q[b][1][c](a)}).join(",");return"matrix"==q[b][0]&&16==c.split(",").length&&(q[b][0]="matrix3d"),q[b][0]+"("+c+")"}).join(" ")}]}var k=null,l={px:0},m={deg:0},n={matrix:["NNNNNN",[k,k,0,0,k,k,0,0,0,0,1,0,k,k,0,1],d],matrix3d:["NNNNNNNNNNNNNNNN",d],rotate:["A"],rotatex:["A"],rotatey:["A"],rotatez:["A"],rotate3d:["NNNA"],perspective:["L"],scale:["Nn",c([k,k,1]),d],scalex:["N",c([k,1,1]),c([k,1])],scaley:["N",c([1,k,1]),c([1,k])],scalez:["N",c([1,1,k])],scale3d:["NNN",d],skew:["Aa",null,d],skewx:["A",null,c([k,m])],skewy:["A",null,c([m,k])],translate:["Tt",c([k,k,l]),d],translatex:["T",c([k,l,l]),c([k,l])],translatey:["T",c([l,k,l]),c([l,k])],translatez:["L",c([l,l,k])],translate3d:["TTL",d]};a.addPropertiesHandler(e,j,["transform"])}(d,f),function(a){function b(a){var b=Number(a);if(!(isNaN(b)||b<100||b>900||b%100!==0))return b}function c(b){return b=100*Math.round(b/100),b=a.clamp(100,900,b),400===b?"normal":700===b?"bold":String(b)}function d(a,b){return[a,b,c]}a.addPropertiesHandler(b,d,["font-weight"])}(d),function(a){function b(a){var b={};for(var c in a)b[c]=-a[c];return b}function c(b){return a.consumeToken(/^(left|center|right|top|bottom)\b/i,b)||a.consumeLengthOrPercent(b)}function d(b,d){var e=a.consumeRepeated(c,/^/,d);if(e&&""==e[1]){var f=e[0];if(f[0]=f[0]||"center",f[1]=f[1]||"center",3==b&&(f[2]=f[2]||{px:0}),f.length==b){if(/top|bottom/.test(f[0])||/left|right/.test(f[1])){var h=f[0];f[0]=f[1],f[1]=h}if(/left|right|center|Object/.test(f[0])&&/top|bottom|center|Object/.test(f[1]))return f.map(function(a){return"object"==typeof a?a:g[a]})}}}function e(d){var e=a.consumeRepeated(c,/^/,d);if(e){for(var f=e[0],h=[{"%":50},{"%":50}],i=0,j=!1,k=0;k<f.length;k++){var l=f[k];"string"==typeof l?(j=/bottom|right/.test(l),i={left:0,right:0,center:i,top:1,bottom:1}[l],h[i]=g[l],"center"==l&&i++):(j&&(l=b(l),l["%"]=(l["%"]||0)+100),h[i]=l,i++,j=!1)}return[h,e[1]]}}function f(b){var c=a.consumeRepeated(e,/^,/,b);if(c&&""==c[1])return c[0]}var g={left:{"%":0},center:{"%":50},right:{"%":100},top:{"%":0},bottom:{"%":100}},h=a.mergeNestedRepeated.bind(null,a.mergeDimensions," ");a.addPropertiesHandler(d.bind(null,3),h,["transform-origin"]),a.addPropertiesHandler(d.bind(null,2),h,["perspective-origin"]),a.consumePosition=e,a.mergeOffsetList=h;var i=a.mergeNestedRepeated.bind(null,h,", ");a.addPropertiesHandler(f,i,["background-position","object-position"])}(d),function(a){function b(b){var c=a.consumeToken(/^circle/,b);if(c&&c[0])return["circle"].concat(a.consumeList([a.ignore(a.consumeToken.bind(void 0,/^\(/)),d,a.ignore(a.consumeToken.bind(void 0,/^at/)),a.consumePosition,a.ignore(a.consumeToken.bind(void 0,/^\)/))],c[1]));var f=a.consumeToken(/^ellipse/,b);if(f&&f[0])return["ellipse"].concat(a.consumeList([a.ignore(a.consumeToken.bind(void 0,/^\(/)),e,a.ignore(a.consumeToken.bind(void 0,/^at/)),a.consumePosition,a.ignore(a.consumeToken.bind(void 0,/^\)/))],f[1]));var g=a.consumeToken(/^polygon/,b);return g&&g[0]?["polygon"].concat(a.consumeList([a.ignore(a.consumeToken.bind(void 0,/^\(/)),a.optional(a.consumeToken.bind(void 0,/^nonzero\s*,|^evenodd\s*,/),"nonzero,"),a.consumeSizePairList,a.ignore(a.consumeToken.bind(void 0,/^\)/))],g[1])):void 0}function c(b,c){if(b[0]===c[0])return"circle"==b[0]?a.mergeList(b.slice(1),c.slice(1),["circle(",a.mergeDimensions," at ",a.mergeOffsetList,")"]):"ellipse"==b[0]?a.mergeList(b.slice(1),c.slice(1),["ellipse(",a.mergeNonNegativeSizePair," at ",a.mergeOffsetList,")"]):"polygon"==b[0]&&b[1]==c[1]?a.mergeList(b.slice(2),c.slice(2),["polygon(",b[1],g,")"]):void 0}var d=a.consumeParenthesised.bind(null,a.parseLengthOrPercent),e=a.consumeRepeated.bind(void 0,d,/^/),f=a.mergeNestedRepeated.bind(void 0,a.mergeDimensions," "),g=a.mergeNestedRepeated.bind(void 0,f,",");a.addPropertiesHandler(b,c,["shape-outside"])}(d),function(a,b){function c(a,b){b.concat([a]).forEach(function(b){b in document.documentElement.style&&(d[a]=b)})}var d={};c("transform",["webkitTransform","msTransform"]),c("transformOrigin",["webkitTransformOrigin"]),c("perspective",["webkitPerspective"]),c("perspectiveOrigin",["webkitPerspectiveOrigin"]),a.propertyName=function(a){return d[a]||a}}(d,f)}(),!function(){if(void 0===document.createElement("div").animate([]).oncancel){var a;if(window.performance&&performance.now)var a=function(){return performance.now()};else var a=function(){return Date.now()};var b=function(a,b,c){this.target=a,this.currentTime=b,this.timelineTime=c,this.type="cancel",this.bubbles=!1,this.cancelable=!1,this.currentTarget=a,this.defaultPrevented=!1,this.eventPhase=Event.AT_TARGET,this.timeStamp=Date.now()},c=window.Element.prototype.animate;window.Element.prototype.animate=function(d,e){var f=c.call(this,d,e);f._cancelHandlers=[],f.oncancel=null;var g=f.cancel;f.cancel=function(){g.call(this);var c=new b(this,null,a()),d=this._cancelHandlers.concat(this.oncancel?[this.oncancel]:[]);setTimeout(function(){d.forEach(function(a){a.call(c.target,c)})},0)};var h=f.addEventListener;f.addEventListener=function(a,b){"function"==typeof b&&"cancel"==a?this._cancelHandlers.push(b):h.call(this,a,b)};var i=f.removeEventListener;return f.removeEventListener=function(a,b){if("cancel"==a){var c=this._cancelHandlers.indexOf(b);c>=0&&this._cancelHandlers.splice(c,1)}else i.call(this,a,b)},f}}}(),function(a){var b=document.documentElement,c=null,d=!1;try{var e=getComputedStyle(b).getPropertyValue("opacity"),f="0"==e?"1":"0";c=b.animate({opacity:[f,f]},{duration:1}),c.currentTime=0,d=getComputedStyle(b).getPropertyValue("opacity")==f}catch(a){}finally{c&&c.cancel()}if(!d){var g=window.Element.prototype.animate;window.Element.prototype.animate=function(b,c){return window.Symbol&&Symbol.iterator&&Array.prototype.from&&b[Symbol.iterator]&&(b=Array.from(b)),Array.isArray(b)||null===b||(b=a.convertToArrayForm(b)),g.call(this,b,c)}}}(c),b.true=a}({},function(){return this}());

},{}],372:[function(require,module,exports){
// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy
function wrappy (fn, cb) {
  if (fn && cb) return wrappy(fn)(cb)

  if (typeof fn !== 'function')
    throw new TypeError('need wrapper function')

  Object.keys(fn).forEach(function (k) {
    wrapper[k] = fn[k]
  })

  return wrapper

  function wrapper() {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i]
    }
    var ret = fn.apply(this, args)
    var cb = args[args.length-1]
    if (typeof ret === 'function' && ret !== cb) {
      Object.keys(cb).forEach(function (k) {
        ret[k] = cb[k]
      })
    }
    return ret
  }
}

},{}],373:[function(require,module,exports){
var nativeIsArray = Array.isArray
var toString = Object.prototype.toString

module.exports = nativeIsArray || isArray

function isArray(obj) {
    return toString.call(obj) === "[object Array]"
}

},{}],374:[function(require,module,exports){
var toString = Object.prototype.toString

module.exports = isString

function isString(obj) {
    return toString.call(obj) === "[object String]"
}

},{}],375:[function(require,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],376:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = applyState;
var type = exports.type = '@@APPLY_STATE';

function applyState(payload) {
	return {
		type: type,
		payload: payload
	};
}

},{}],377:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _urlQuery = require('../utils/url-query');

var _urlQuery2 = _interopRequireDefault(_urlQuery);

var _ = require('./');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = changeConcern;
var type = exports.type = 'CHANGE_CONCERN';

function changeConcern(concern) {
	return function (dispatch, getState) {
		var state = getState();
		var location = state.routing.locationBeforeTransitions;
		var parsed = _urlQuery2.default.parse(location.query.source);
		var previous = parsed.pathname;
		var ext = _path2.default.extname(previous);

		var hasDemo = state.pattern.files.some(function (file) {
			return file.concern === 'demo' && file.type === ext.slice(1);
		});

		var type = concern === 'index' && hasDemo ? 'source' : parsed.query.type;

		var source = _urlQuery2.default.format({
			pathname: _path2.default.dirname(previous) + '/' + concern + ext,
			query: (0, _extends3.default)({}, parsed.query, {
				type: type
			})
		});

		dispatch((0, _.patchLocation)({
			query: {
				source: source
			}
		}));
	};
}

changeConcern.type = type;

},{"../utils/url-query":510,"./":385,"babel-runtime/helpers/extends":23,"path":206}],378:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _ = require('./');

var _urlQuery = require('../utils/url-query');

var _urlQuery2 = _interopRequireDefault(_urlQuery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = changeEnvironment;
var type = exports.type = 'CHANGE_ENVIRONMENT';

function changeEnvironment(environment) {
	return function (dispatch, getState) {
		var location = getState().routing.locationBeforeTransitions;
		var parsed = _urlQuery2.default.parse(location.pathname);
		var pathname = _urlQuery2.default.format((0, _extends3.default)({}, parsed, {
			query: {
				environment: environment
			}
		}));

		dispatch((0, _.patchLocation)({ pathname: pathname }));
	};
}

changeEnvironment.type = type;

},{"../utils/url-query":510,"./":385,"babel-runtime/helpers/extends":23}],379:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _lodash = require('lodash');

var _urlQuery = require('../utils/url-query');

var _urlQuery2 = _interopRequireDefault(_urlQuery);

var _ = require('./');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = changeType;
var type = exports.type = 'CHANGE_TYPE';

function changeType(input) {
	_assert2.default.equal(typeof input === 'undefined' ? 'undefined' : (0, _typeof3.default)(input), 'string', 'input for changeType action must be of type string');

	return function (dispatch, getState) {
		var location = getState().routing.locationBeforeTransitions;
		var parsed = _urlQuery2.default.parse(location.query.source || '');
		var type = ['source', 'transformed'].includes(input) ? input : 'source';
		var query = { type: type };
		var source = _urlQuery2.default.format((0, _lodash.merge)({}, parsed, { query: query }));
		dispatch((0, _.patchLocation)({ query: { source: source } }));
	};
}

changeType.type = type;

},{"../utils/url-query":510,"./":385,"assert":2,"babel-runtime/helpers/typeof":29,"lodash":"lodash"}],380:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _ = require('./');

exports.default = closeAllTheThings;
var type = exports.type = 'CLOSE_ALL_THE_THINGS';

function closeAllTheThings() {
	return function (dispatch) {
		dispatch((0, _.dismissAllMessages)());
		dispatch((0, _.patchLocation)({
			query: {
				'issue': null,
				'lightbox': null,
				'menu-enabled': null,
				'source': null,
				'source-expanded': null
			}
		}));
	};
}

closeAllTheThings.type = type;

},{"./":385}],381:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reduxActions = require('redux-actions');

exports.default = (0, _reduxActions.createAction)('DEMO_CONTENT_RESIZE', function (_ref) {
  var width = _ref.width;
  var height = _ref.height;
  return { width: width, height: height };
});
module.exports = exports['default'];

},{"redux-actions":"redux-actions"}],382:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reduxActions = require('redux-actions');

exports.default = (0, _reduxActions.createAction)('DISMISS_ALL_MESSAGES');
module.exports = exports['default'];

},{"redux-actions":"redux-actions"}],383:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reduxActions = require('redux-actions');

exports.default = (0, _reduxActions.createAction)('DISMISS_MESSAGE');
module.exports = exports['default'];

},{"redux-actions":"redux-actions"}],384:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _reduxActions = require('redux-actions');

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = handleDependentActions;


function partialReduce(deps) {
	return function (handlers) {
		return (0, _entries2.default)(handlers).reduce(function (registry, entry) {
			var _entry = (0, _slicedToArray3.default)(entry, 2);

			var name = _entry[0];
			var fn = _entry[1];

			registry[name] = function (state, action) {
				return fn(state, action, deps);
			};
			return registry;
		}, {});
	};
}

function handleDependentActions(actionHandlers, options) {
	_assert2.default.ok(Array.isArray(options.dependencies), 'options.dependencies must be an array');

	var handler = function handler() {
		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		var _args$ = args[2];
		var dependencies = _args$ === undefined ? {} : _args$;


		if ((0, _keys2.default)(dependencies).length > 0) {
			var missing = options.dependencies.filter(function (dependency) {
				return !(dependency in dependencies);
			});
			_assert2.default.ok(missing.length === 0, 'dependencies must be present in state. missing: ' + missing.join(','));
		}

		var deps = (0, _lodash.pick)(dependencies, options.dependencies);
		var handlers = partialReduce(deps)(actionHandlers);
		var reducer = (0, _reduxActions.handleActions)(handlers, options.defaultValue);
		return reducer.apply(undefined, args);
	};
	handler.dependencies = options.dependencies;
	return handler;
}
module.exports = exports['default'];

},{"assert":2,"babel-runtime/core-js/object/entries":10,"babel-runtime/core-js/object/keys":13,"babel-runtime/helpers/slicedToArray":27,"lodash":"lodash","redux-actions":"redux-actions"}],385:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.windowResize = exports.toggleTheme = exports.toggleSearchFocus = exports.toggleRulers = exports.toggleOpacity = exports.toggleKeyboardShortcuts = exports.toggleIssue = exports.toggleExpandMenu = exports.toggleConsole = exports.themeLoaded = exports.search = exports.scrollTo = exports.scrollDemo = exports.resizeDemo = exports.patternDemoError = exports.patchLocation = exports.openFullscreen = exports.openDocumentation = exports.loadPatternFile = exports.loadPatternDemo = exports.loadPatternData = exports.loadPattern = exports.dismissMessage = exports.dismissAllMessages = exports.demoContentResize = exports.closeAllTheThings = exports.changeType = exports.changeEnvironment = exports.changeConcern = exports.applyState = undefined;

var _applyState2 = require('./apply-state');

var _applyState3 = _interopRequireDefault(_applyState2);

var _changeConcern2 = require('./change-concern');

var _changeConcern3 = _interopRequireDefault(_changeConcern2);

var _changeEnvironment2 = require('./change-environment');

var _changeEnvironment3 = _interopRequireDefault(_changeEnvironment2);

var _changeType2 = require('./change-type');

var _changeType3 = _interopRequireDefault(_changeType2);

var _closeAllTheThings2 = require('./close-all-the-things');

var _closeAllTheThings3 = _interopRequireDefault(_closeAllTheThings2);

var _demoContentResize2 = require('./demo-content-resize');

var _demoContentResize3 = _interopRequireDefault(_demoContentResize2);

var _dismissAllMessages2 = require('./dismiss-all-messages');

var _dismissAllMessages3 = _interopRequireDefault(_dismissAllMessages2);

var _dismissMessage2 = require('./dismiss-message');

var _dismissMessage3 = _interopRequireDefault(_dismissMessage2);

var _loadPattern2 = require('./load-pattern');

var _loadPattern3 = _interopRequireDefault(_loadPattern2);

var _loadPatternData2 = require('./load-pattern-data');

var _loadPatternData3 = _interopRequireDefault(_loadPatternData2);

var _loadPatternDemo2 = require('./load-pattern-demo');

var _loadPatternDemo3 = _interopRequireDefault(_loadPatternDemo2);

var _loadPatternFile2 = require('./load-pattern-file');

var _loadPatternFile3 = _interopRequireDefault(_loadPatternFile2);

var _openDocumentation2 = require('./open-documentation');

var _openDocumentation3 = _interopRequireDefault(_openDocumentation2);

var _openFullscreen2 = require('./open-fullscreen');

var _openFullscreen3 = _interopRequireDefault(_openFullscreen2);

var _patchLocation2 = require('./patch-location');

var _patchLocation3 = _interopRequireDefault(_patchLocation2);

var _patternDemoError2 = require('./pattern-demo-error');

var _patternDemoError3 = _interopRequireDefault(_patternDemoError2);

var _resizeDemo2 = require('./resize-demo');

var _resizeDemo3 = _interopRequireDefault(_resizeDemo2);

var _scrollDemo2 = require('./scroll-demo');

var _scrollDemo3 = _interopRequireDefault(_scrollDemo2);

var _scrollTo2 = require('./scroll-to');

var _scrollTo3 = _interopRequireDefault(_scrollTo2);

var _search2 = require('./search');

var _search3 = _interopRequireDefault(_search2);

var _themeLoaded2 = require('./theme-loaded');

var _themeLoaded3 = _interopRequireDefault(_themeLoaded2);

var _toggleConsole2 = require('./toggle-console');

var _toggleConsole3 = _interopRequireDefault(_toggleConsole2);

var _toggleExpandMenu2 = require('./toggle-expand-menu');

var _toggleExpandMenu3 = _interopRequireDefault(_toggleExpandMenu2);

var _toggleIssue2 = require('./toggle-issue');

var _toggleIssue3 = _interopRequireDefault(_toggleIssue2);

var _toggleKeyboardShortcuts2 = require('./toggle-keyboard-shortcuts');

var _toggleKeyboardShortcuts3 = _interopRequireDefault(_toggleKeyboardShortcuts2);

var _toggleOpacity2 = require('./toggle-opacity');

var _toggleOpacity3 = _interopRequireDefault(_toggleOpacity2);

var _toggleRulers2 = require('./toggle-rulers');

var _toggleRulers3 = _interopRequireDefault(_toggleRulers2);

var _toggleSearchFocus2 = require('./toggle-search-focus');

var _toggleSearchFocus3 = _interopRequireDefault(_toggleSearchFocus2);

var _toggleTheme2 = require('./toggle-theme');

var _toggleTheme3 = _interopRequireDefault(_toggleTheme2);

var _windowResize2 = require('./window-resize');

var _windowResize3 = _interopRequireDefault(_windowResize2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.applyState = _applyState3.default;
exports.changeConcern = _changeConcern3.default;
exports.changeEnvironment = _changeEnvironment3.default;
exports.changeType = _changeType3.default;
exports.closeAllTheThings = _closeAllTheThings3.default;
exports.demoContentResize = _demoContentResize3.default;
exports.dismissAllMessages = _dismissAllMessages3.default;
exports.dismissMessage = _dismissMessage3.default;

/**
 * Pattern fetching related action
 **/

exports.loadPattern = _loadPattern3.default;
exports.loadPatternData = _loadPatternData3.default;
exports.loadPatternDemo = _loadPatternDemo3.default;
exports.loadPatternFile = _loadPatternFile3.default;
exports.openDocumentation = _openDocumentation3.default;
exports.openFullscreen = _openFullscreen3.default;
exports.patchLocation = _patchLocation3.default;
exports.patternDemoError = _patternDemoError3.default;
exports.resizeDemo = _resizeDemo3.default;
exports.scrollDemo = _scrollDemo3.default;
exports.scrollTo = _scrollTo3.default;
exports.search = _search3.default;
exports.themeLoaded = _themeLoaded3.default;

/**
 * Automagic state toggles
 */

exports.toggleConsole = _toggleConsole3.default;
exports.toggleExpandMenu = _toggleExpandMenu3.default;
exports.toggleIssue = _toggleIssue3.default;
exports.toggleKeyboardShortcuts = _toggleKeyboardShortcuts3.default;
exports.toggleOpacity = _toggleOpacity3.default;
exports.toggleRulers = _toggleRulers3.default;
exports.toggleSearchFocus = _toggleSearchFocus3.default;
exports.toggleTheme = _toggleTheme3.default;
exports.windowResize = _windowResize3.default;

},{"./apply-state":376,"./change-concern":377,"./change-environment":378,"./change-type":379,"./close-all-the-things":380,"./demo-content-resize":381,"./dismiss-all-messages":382,"./dismiss-message":383,"./load-pattern":389,"./load-pattern-data":386,"./load-pattern-demo":387,"./load-pattern-file":388,"./open-documentation":391,"./open-fullscreen":392,"./patch-location":393,"./pattern-demo-error":394,"./resize-demo":396,"./scroll-demo":397,"./scroll-to":398,"./search":399,"./theme-loaded":400,"./toggle-console":401,"./toggle-expand-menu":402,"./toggle-issue":403,"./toggle-keyboard-shortcuts":404,"./toggle-opacity":405,"./toggle-rulers":406,"./toggle-search-focus":407,"./toggle-theme":408,"./window-resize":409}],386:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var getError = function () {
	var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(response, payload) {
		var json, error;
		return _regenerator2.default.wrap(function _callee$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						_context.prev = 0;
						_context.next = 3;
						return response.json();

					case 3:
						json = _context.sent;
						error = new Error(json.message);

						error.payload = payload;
						return _context.abrupt('return', (0, _lodash.merge)(error, json));

					case 9:
						_context.prev = 9;
						_context.t0 = _context['catch'](0);

						_context.t0.message = ['Request for ' + response.uri + ' failed with code ' + response.status + ': ' + response.statusText, _context.t0.message].join('\n');
						_context.t0.payload = payload;
						return _context.abrupt('return', _context.t0);

					case 14:
					case 'end':
						return _context.stop();
				}
			}
		}, _callee, this, [[0, 9]]);
	}));

	return function getError(_x, _x2) {
		return _ref.apply(this, arguments);
	};
}();

require('isomorphic-fetch');

var _lodash = require('lodash');

var _promiseThunkAction = require('./promise-thunk-action');

var _urlQuery = require('../utils/url-query');

var _urlQuery2 = _interopRequireDefault(_urlQuery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var headers = { headers: { accept: 'application/json' }, credentials: 'include' };

exports.default = (0, _promiseThunkAction.createPromiseThunkAction)('LOAD_PATTERN_DATA', function () {
	var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(payload) {
		var id, query, base, uri, response;
		return _regenerator2.default.wrap(function _callee2$(_context2) {
			while (1) {
				switch (_context2.prev = _context2.next) {
					case 0:
						id = payload.id;
						query = payload.query;
						base = payload.options.base;
						uri = _urlQuery2.default.format({
							pathname: base + 'api/pattern/' + id + '.json', query: query
						});
						_context2.next = 6;
						return global.fetch(uri, headers);

					case 6:
						response = _context2.sent;

						if (!(response.status >= 400)) {
							_context2.next = 11;
							break;
						}

						_context2.next = 10;
						return getError(response, payload);

					case 10:
						throw _context2.sent;

					case 11:
						return _context2.abrupt('return', response.json());

					case 12:
					case 'end':
						return _context2.stop();
				}
			}
		}, _callee2, undefined);
	}));

	return function (_x3) {
		return _ref2.apply(this, arguments);
	};
}());
module.exports = exports['default'];

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../utils/url-query":510,"./promise-thunk-action":395,"babel-runtime/helpers/asyncToGenerator":19,"babel-runtime/regenerator":30,"isomorphic-fetch":"isomorphic-fetch","lodash":"lodash"}],387:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reduxActions = require('redux-actions');

exports.default = (0, _reduxActions.createAction)('LOAD_PATTERN_DEMO');
module.exports = exports['default'];

},{"redux-actions":"redux-actions"}],388:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var getError = function () {
	var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(response, payload) {
		var json, error;
		return _regenerator2.default.wrap(function _callee$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						_context.prev = 0;
						_context.next = 3;
						return response.json();

					case 3:
						json = _context.sent;
						error = new Error(json.message);

						error.payload = payload;
						return _context.abrupt('return', (0, _lodash.merge)(error, json));

					case 9:
						_context.prev = 9;
						_context.t0 = _context['catch'](0);

						_context.t0.message = ['Request for ' + response.uri + ' failed with code ' + response.status + ': ' + response.statusText, _context.t0.message].join('\n');
						_context.t0.payload = payload;
						return _context.abrupt('return', _context.t0);

					case 14:
					case 'end':
						return _context.stop();
				}
			}
		}, _callee, this, [[0, 9]]);
	}));

	return function getError(_x, _x2) {
		return _ref.apply(this, arguments);
	};
}();

require('isomorphic-fetch');

var _lodash = require('lodash');

var _promiseThunkAction = require('./promise-thunk-action');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _promiseThunkAction.createPromiseThunkAction)('LOAD_PATTERN_FILE', function () {
	var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(payload) {
		var id, base, uri, response, error, source;
		return _regenerator2.default.wrap(function _callee2$(_context2) {
			while (1) {
				switch (_context2.prev = _context2.next) {
					case 0:
						id = payload.id;
						base = payload.base;
						uri = base + 'api/file/' + id;
						_context2.next = 5;
						return global.fetch(uri);

					case 5:
						response = _context2.sent;

						if (!(response.status >= 400)) {
							_context2.next = 11;
							break;
						}

						_context2.next = 9;
						return getError(response, payload);

					case 9:
						error = _context2.sent;
						throw error;

					case 11:
						_context2.next = 13;
						return response.text();

					case 13:
						source = _context2.sent;
						return _context2.abrupt('return', {
							id: id,
							source: source
						});

					case 15:
					case 'end':
						return _context2.stop();
				}
			}
		}, _callee2, undefined);
	}));

	return function (_x3) {
		return _ref2.apply(this, arguments);
	};
}());
module.exports = exports['default'];

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./promise-thunk-action":395,"babel-runtime/helpers/asyncToGenerator":19,"babel-runtime/regenerator":30,"isomorphic-fetch":"isomorphic-fetch","lodash":"lodash"}],389:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _reduxActions = require('redux-actions');

var _ = require('./');

var _urlQuery = require('../utils/url-query');

var _urlQuery2 = _interopRequireDefault(_urlQuery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = loadPattern;


function loadPattern() {
	var _this = this;

	return function () {
		var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(dispatch, getState) {
			var state, location, _location$query$envir, environment, type, dataPayload, actions, jobs, id;

			return _regenerator2.default.wrap(function _callee$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							state = getState();

							if (!(state.id === '..')) {
								_context.next = 3;
								break;
							}

							return _context.abrupt('return');

						case 3:
							location = state.routing.locationBeforeTransitions;
							_location$query$envir = location.query.environment;
							environment = _location$query$envir === undefined ? 'index' : _location$query$envir;
							type = _path2.default.basename(state.sourceId) === 'index.md' ? 'source' : state.sourceType;
							dataPayload = {
								id: state.id,
								query: {
									environment: environment
								},
								options: {
									base: state.base
								}
							};
							actions = [(0, _.loadPatternData)(dataPayload), (0, _.loadPatternDemo)(true)];
							jobs = actions.map(dispatch);
							id = _urlQuery2.default.parse(state.sourceId || '').pathname;


							if (id && id !== 'relations') {
								jobs.push(dispatch((0, _.loadPatternFile)({
									base: state.base,
									environment: environment,
									id: state.sourceId,
									type: type
								})));
							}

							_context.next = 14;
							return least(1000, _promise2.default.all(jobs));

						case 14:
						case 'end':
							return _context.stop();
					}
				}
			}, _callee, _this);
		}));

		return function (_x, _x2) {
			return _ref.apply(this, arguments);
		};
	}();
}

function wait(timeout, value) {
	return new _promise2.default(function (resolve) {
		return setTimeout(function () {
			return resolve(value);
		}, timeout);
	});
}

function least(timeout, thenable) {
	var then = new Date();

	return _promise2.default.resolve(thenable).then(function (result) {
		var delta = 1000 - (new Date() - then) % 1000;
		return wait(delta, result);
	});
}
module.exports = exports['default'];

},{"../utils/url-query":510,"./":385,"babel-runtime/core-js/promise":16,"babel-runtime/helpers/asyncToGenerator":19,"babel-runtime/regenerator":30,"path":206,"redux-actions":"redux-actions"}],390:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reduxActions = require('redux-actions');

exports.default = (0, _reduxActions.createAction)('MARK_BLOCK');
module.exports = exports['default'];

},{"redux-actions":"redux-actions"}],391:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _ = require('./');

exports.default = openDocumentation;
var type = exports.type = 'OPEN_DOCUMENTATION';

function openDocumentation() {
	return function (dispatch) {
		var pathname = '/';
		dispatch((0, _.patchLocation)({ pathname: pathname }));
	};
}

openDocumentation.type = type;

},{"./":385}],392:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _urlQuery = require('../utils/url-query');

var _urlQuery2 = _interopRequireDefault(_urlQuery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = openFullscreen;
var type = exports.type = 'OPEN_FULLSCREEN';

function openFullscreen() {
	return function (dispatch, getState) {
		var _getState = getState();

		var base = _getState.base;
		var id = _getState.id;
		var environment = _getState.environment;

		if (id === '..' || !window.open) {
			return;
		}

		var href = _urlQuery2.default.format({
			pathname: base + 'demo/' + id + '/index.html',
			query: { environment: environment }
		});

		window.open(href, '_blank');
	};
}

openFullscreen.type = type;

},{"../utils/url-query":510}],393:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _lodash = require('lodash');

var _reactRouterRedux = require('react-router-redux');

exports.default = patchLocation;
var type = exports.type = 'PATCH_LOCATION';

function patchLocation(payload) {
	return function (dispatch, getState) {
		var state = getState();
		var location = state.routing.locationBeforeTransitions;
		dispatch((0, _reactRouterRedux.push)((0, _lodash.merge)({}, location, payload)));
	};
}

patchLocation.type = type;

},{"lodash":"lodash","react-router-redux":"react-router-redux"}],394:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = createPatternDemoError;


function createPatternDemoError(payload) {
	return function (dispatch, getState) {
		var state = getState();
		return dispatch({
			type: 'PATTERN_DEMO_ERROR',
			payload: {
				message: payload.message,
				pattern: payload.pattern || state.id,
				stack: payload.stack,
				file: payload.file || payload.fileName || state.sourceId
			}
		});
	};
}

createPatternDemoError.type = 'PATTERN_DEMO_ERROR';
module.exports = exports['default'];

},{}],395:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.createPromiseThunkAction = createPromiseThunkAction;
exports.handlePromiseThunkAction = handlePromiseThunkAction;

var _reduxActions = require('redux-actions');

var _handleDependentActions = require('./handle-dependent-actions');

var _handleDependentActions2 = _interopRequireDefault(_handleDependentActions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ident = function ident(i) {
	return i;
};
var asyncIdent = function () {
	var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(i) {
		return _regenerator2.default.wrap(function _callee$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						return _context.abrupt('return', i);

					case 1:
					case 'end':
						return _context.stop();
				}
			}
		}, _callee, undefined);
	}));

	return function asyncIdent(_x) {
		return _ref.apply(this, arguments);
	};
}();

function createPromiseThunkAction(name, rawCreator) {
	var _this = this;

	var creator = rawCreator || asyncIdent;

	var fn = function fn(payload) {
		var delayedAction = (0, _reduxActions.createAction)(name + '_DELAYED');
		var successAction = (0, _reduxActions.createAction)(name + '_SUCCESS');
		var startAction = (0, _reduxActions.createAction)(name + '_START');
		var throwsAction = (0, _reduxActions.createAction)(name + '_THROWS');

		return function () {
			var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(dispatch, getState) {
				var delayedTimer, result;
				return _regenerator2.default.wrap(function _callee2$(_context2) {
					while (1) {
						switch (_context2.prev = _context2.next) {
							case 0:
								dispatch(startAction(payload, ident, getState));
								delayedTimer = global.setTimeout(function () {
									dispatch(delayedAction(payload, ident, getState));
								}, 1000);
								_context2.prev = 2;
								_context2.next = 5;
								return creator(payload, dispatch, getState);

							case 5:
								result = _context2.sent;

								global.clearTimeout(delayedTimer);
								dispatch(successAction(result));
								return _context2.abrupt('return', result);

							case 11:
								_context2.prev = 11;
								_context2.t0 = _context2['catch'](2);

								global.clearTimeout(delayedTimer);
								dispatch(throwsAction(_context2.t0));
								return _context2.abrupt('return', _context2.t0);

							case 16:
							case 'end':
								return _context2.stop();
						}
					}
				}, _callee2, _this, [[2, 11]]);
			}));

			return function (_x2, _x3) {
				return _ref2.apply(this, arguments);
			};
		}();
	};
	fn.__name = name;
	return fn;
}

function handlePromiseThunkAction(rawName, handler) {
	var _handleDependentActio;

	var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	var name = rawName.__name || rawName;
	options.dependencies = options.dependencies || [];
	var reducer = (0, _handleDependentActions2.default)((_handleDependentActio = {}, (0, _defineProperty3.default)(_handleDependentActio, name + '_START', handler.start || ident), (0, _defineProperty3.default)(_handleDependentActio, name + '_DELAYED', handler.delayed || ident), (0, _defineProperty3.default)(_handleDependentActio, name + '_SUCCESS', handler.success || ident), (0, _defineProperty3.default)(_handleDependentActio, name + '_THROWS', handler.throws || ident), _handleDependentActio), options);
	return reducer;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./handle-dependent-actions":384,"babel-runtime/helpers/asyncToGenerator":19,"babel-runtime/helpers/defineProperty":22,"babel-runtime/regenerator":30,"redux-actions":"redux-actions"}],396:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _ = require('./');

exports.default = resizeDemo;
var type = exports.type = 'RESIZE_DEMO';

function resizeDemo(payload) {
	return function (dispatch) {
		dispatch((0, _.patchLocation)({
			query: {
				width: payload.x,
				height: payload.y
			}
		}));
	};
}

resizeDemo.type = type;

},{"./":385}],397:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = scrollDemo;
var type = exports.type = 'SCROLL_DEMO';

var loop = void 0;
var frame = void 0;

function scrollDemo(payload) {
	return function (dispatch, getState) {
		function run() {
			loop = global.requestAnimationFrame(function () {
				var state = getState();

				if (state.scrollDemoX.x !== frame.x) {
					dispatch({
						type: 'SCROLL_DEMO_X',
						payload: frame.x
					});
				}
				if (state.scrollDemoY.y !== frame.y) {
					dispatch({
						type: 'SCROLL_DEMO_Y',
						payload: frame.y
					});
				}
				run();
			});
		}

		if (!loop) {
			run();
		}

		frame = payload;
	};
}

scrollDemo.type = type;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],398:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _scrollparent = require('scrollparent');

var _scrollparent2 = _interopRequireDefault(_scrollparent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = scrollTo;
var type = exports.type = 'SCROLL_TO';

function scrollTo(hash) {
	var _global = global;
	var document = _global.document;

	if (document) {
		var target = document.getElementById(hash);
		var parent = (0, _scrollparent2.default)(target);
		parent.scrollTop = target.offsetTop;
	}

	return function (dispatch) {
		dispatch({
			type: 'SCROLLED_TO',
			payload: hash
		});
	};
}

scrollTo.type = type;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"scrollparent":323}],399:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _ = require('./');

exports.default = search;
var type = exports.type = 'SEARCH';

function search(search) {
	return function (dispatch) {
		dispatch((0, _.patchLocation)({
			query: {
				search: search
			}
		}));
	};
}

search.type = type;

},{"./":385}],400:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reduxActions = require('redux-actions');

exports.default = (0, _reduxActions.createAction)('THEME_LOADED');
module.exports = exports['default'];

},{"redux-actions":"redux-actions"}],401:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _ = require('./');

exports.default = toggleConsoleLightbox;
var type = exports.type = 'TOGGLE_CONSOLE_LIGHTBOX';

function toggleConsoleLightbox(forced) {
	return function (dispatch, getState) {
		if (typeof forced !== 'undefined') {
			var _lightbox = forced ? null : 'console';
			dispatch((0, _.patchLocation)({ query: { lightbox: _lightbox } }));
		}

		var lightbox = getState().lightbox === 'console' ? null : 'console';
		dispatch((0, _.patchLocation)({ query: { lightbox: lightbox } }));
	};
}

toggleConsoleLightbox.type = type;

},{"./":385}],402:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _ = require('./');

exports.default = toggleExpandMenu;
var type = exports.type = 'TOGGLE_EXPAND_MENU';

function toggleExpandMenu() {
	return function (dispatch, getState) {
		dispatch((0, _.patchLocation)({
			query: {
				expanded: !getState().expanded
			}
		}));
	};
}

toggleExpandMenu.type = type;

},{"./":385}],403:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _ = require('./');

exports.default = toggleIssue;
var type = exports.type = 'TOGGLE_ISSUE';

function toggleIssue() {
	return function (dispatch, getState) {
		var issue = !getState().issue;
		dispatch((0, _.patchLocation)({ query: { issue: issue } }));
	};
}

toggleIssue.type = type;

},{"./":385}],404:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _ = require('./');

exports.default = toggleKeyboardShortcuts;
var type = exports.type = 'TOGGLE_KEYBOARD_SHORTCUTS';

function toggleKeyboardShortcuts() {
	return function (dispatch, getState) {
		var lightbox = getState().lightbox === 'shortcuts' ? null : 'shortcuts';
		dispatch((0, _.patchLocation)({ query: { lightbox: lightbox } }));
	};
}

toggleKeyboardShortcuts.type = type;

},{"./":385}],405:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _ = require('./');

exports.default = toggleOpacity;
var type = exports.type = 'TOGGLE_OPACITY';

function toggleOpacity() {
	return function (dispatch, getState) {
		var opacity = getState().opacity;
		dispatch((0, _.patchLocation)({ query: { opacity: !opacity } }));
	};
}

toggleOpacity.type = type;

},{"./":385}],406:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _ = require('./');

exports.default = toggleRulers;
var type = exports.type = 'TOGGLE_RULERS';

function toggleRulers() {
	return function (dispatch, getState) {
		var rulers = getState().rulers;
		dispatch((0, _.patchLocation)({ query: { rulers: !rulers } }));
	};
}

toggleRulers.type = type;

},{"./":385}],407:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _lodash = require('lodash');

exports.default = toggleSearchFocus;
var type = exports.type = 'TOGGLE_SEARCH_FOCUS';

var faux = { blur: _lodash.noop, focus: _lodash.noop };

function toggleSearchFocus(forced) {
	return function () {
		var _global = global;
		var document = _global.document;

		var el = document.querySelector('input[type=search]') || faux;

		if (typeof forced !== 'undefined') {
			var method = forced ? el.focus : el.blur;
			method.bind(el)();
		} else {
			var isActive = document.activeElement === el;
			var _method = isActive ? el.blur : el.focus;
			_method.bind(el)();
		}

		return function (dispatch) {
			dispatch({ type: 'TOGGLED_SEARCH_FOCUS' });
		};
	};
}

toggleSearchFocus.type = type;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"lodash":"lodash"}],408:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _ = require('./');

exports.default = toggleTheme;
var type = exports.type = 'TOGGLE_THEME';

function toggleTheme(forced) {
	return function (dispatch, getState) {
		var theme = forced ? forced : getState().theme === 'dark' ? 'light' : 'dark';
		dispatch((0, _.patchLocation)({
			query: {
				theme: theme
			}
		}));
	};
}

toggleTheme.type = type;

},{"./":385}],409:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reduxActions = require('redux-actions');

exports.default = (0, _reduxActions.createAction)('WINDOW_RESIZE', function (_ref) {
  var width = _ref.width;
  var height = _ref.height;
  return { width: width, height: height };
});
module.exports = exports['default'];

},{"redux-actions":"redux-actions"}],410:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactHelmet = require('react-helmet');

var _reactHelmet2 = _interopRequireDefault(_reactHelmet);

var _console = require('../../containers/console');

var _console2 = _interopRequireDefault(_console);

var _problem = require('../../containers/problem');

var _problem2 = _interopRequireDefault(_problem);

var _shortcuts = require('../../containers/shortcuts');

var _shortcuts2 = _interopRequireDefault(_shortcuts);

var _navigation = require('../navigation');

var _navigation2 = _interopRequireDefault(_navigation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Application = (0, _autobindDecorator2.default)(_class = function (_Component) {
	(0, _inherits3.default)(Application, _Component);

	function Application() {
		(0, _classCallCheck3.default)(this, Application);
		return (0, _possibleConstructorReturn3.default)(this, (Application.__proto__ || (0, _getPrototypeOf2.default)(Application)).apply(this, arguments));
	}

	(0, _createClass3.default)(Application, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			global.addEventListener('resize', this.onResize);
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			global.removeEventListener('resize', this.onResize);
		}
	}, {
		key: 'onResize',
		value: function onResize() {
			this.props.onResize({
				width: global.innerWidth,
				height: global.innerHeight
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var props = this.props;

			var handleSearch = props.onSearch;

			var className = (0, _classnames2.default)('application', {
				'application--menu-enabled': props.menuEnabled,
				'application--theme-loading': props.themeLoading
			});

			return _react2.default.createElement(
				'div',
				{ className: className },
				_react2.default.createElement(_reactHelmet2.default, {
					meta: [{
						name: 'description',
						content: props.description
					}, {
						name: 'viewport',
						content: 'width=device-width, initial-scale=1'
					}],
					link: createLinks(props.styles, { base: props.startBase }),
					title: props.title,
					onChangeClientState: getThemeLoadedListener(props.onThemeLoaded)
				}),
				_react2.default.createElement(_navigation2.default, {
					activePattern: props.activePattern,
					base: props.base,
					enabled: props.menuEnabled,
					expanded: props.expanded,
					hierarchy: props.hierarchy,
					icon: 'patternplate',
					menuEnabled: props.menuEnabled,
					navigation: props.navigation,
					onSearch: handleSearch,
					onThemeChange: props.onThemeChange,
					pathname: props.pathname,
					query: props.query,
					requestSearchBlur: props.requestSearchBlur,
					searchValue: props.search,
					theme: props.theme,
					title: props.title,
					version: props.version
				}),
				_react2.default.createElement(
					'main',
					{ className: 'application__content' },
					props.children
				),
				props.lightbox === 'console' && _react2.default.createElement(_console2.default, null),
				props.lightbox === 'shortcuts' && _react2.default.createElement(_shortcuts2.default, null),
				props.issue && _react2.default.createElement(_problem2.default, null)
			);
		}
	}]);
	return Application;
}(_react.Component)) || _class;

exports.default = Application;


Application.propTypes = {
	activePattern: _react.PropTypes.string.isRequired,
	base: _react.PropTypes.string.isRequired,
	children: _react.PropTypes.any,
	description: _react.PropTypes.string.isRequired,
	expanded: _react.PropTypes.bool.isRequired,
	hierarchy: _react.PropTypes.object.isRequired,
	issue: _react.PropTypes.bool.isRequired,
	lightbox: _react.PropTypes.string,
	menuEnabled: _react.PropTypes.bool.isRequired,
	navigation: _react.PropTypes.object.isRequired,
	onResize: _react.PropTypes.func.isRequired,
	onSearch: _react.PropTypes.func.isRequired,
	onThemeLoaded: _react.PropTypes.func.isRequired,
	onThemeChange: _react.PropTypes.func.isRequired,
	pathname: _react.PropTypes.string.isRequired,
	query: _react.PropTypes.object.isRequired,
	requestSearchBlur: _react.PropTypes.func.isRequired,
	theme: _react.PropTypes.string.isRequired,
	title: _react.PropTypes.string.isRequired,
	version: _react.PropTypes.string.isRequired,
	search: _react.PropTypes.string,
	styles: _react.PropTypes.arrayOf(_react.PropTypes.string).isRequired,
	themeLoading: _react.PropTypes.bool.isRequired
};

function createLinks(styles, options) {
	return styles.map(createStyle(options));
}

function createStyle(options) {
	return function (style) {
		return {
			'rel': 'stylesheet',
			'href': options.base + '/style/' + style + '.css',
			'data-style-id': style
		};
	};
}

function getThemeLoadedListener(fn) {
	return function () {
		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		var _args$1$linkTags = args[1].linkTags;
		var added = _args$1$linkTags === undefined ? [] : _args$1$linkTags;

		var tags = added.filter(function (tag) {
			return tag.rel === 'stylesheet';
		});
		var tag = tags[tags.length - 1];
		if (tag) {
			tag.onload = function () {
				fn(tag.dataset.styleId);
			};
		}
	};
}
module.exports = exports['default'];

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../containers/console":467,"../../containers/problem":472,"../../containers/shortcuts":473,"../navigation":442,"autobind-decorator":"autobind-decorator","babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"classnames":"classnames","react":"react","react-helmet":214}],411:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = BreadCrumbs;


function BreadCrumbs(props) {
	var crumbs = props.crumbs;

	var className = (0, _classnames2.default)('breadcrumbs', props.className);

	return _react2.default.createElement(
		'ul',
		{ className: className },
		crumbs.map(function (crumb) {
			return _react2.default.createElement(BreadCrumb, {
				key: crumb.id,
				name: crumb.name,
				navigateable: crumb.navigateable,
				target: crumb.target
			});
		})
	);
}

function BreadCrumb(props) {
	var className = (0, _classnames2.default)('breadcrumb', {
		'breadcrumb--navigateable': props.navigateable
	});
	return _react2.default.createElement(
		'li',
		{ className: className },
		props.navigateable ? _react2.default.createElement(
			_reactRouter.Link,
			{ to: props.target },
			props.name
		) : _react2.default.createElement(
			'span',
			null,
			props.name
		)
	);
}
module.exports = exports['default'];

},{"classnames":"classnames","react":"react","react-router":"react-router"}],412:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = highlight;

var _core = require('lowlight/lib/core');

var _core2 = _interopRequireDefault(_core);

var _prettyData = require('pretty-data');

var _css = require('highlight.js/lib/languages/css.js');

var _css2 = _interopRequireDefault(_css);

var _less = require('highlight.js/lib/languages/less.js');

var _less2 = _interopRequireDefault(_less);

var _scss = require('highlight.js/lib/languages/scss.js');

var _scss2 = _interopRequireDefault(_scss);

var _stylus = require('highlight.js/lib/languages/stylus.js');

var _stylus2 = _interopRequireDefault(_stylus);

var _javascript = require('highlight.js/lib/languages/javascript.js');

var _javascript2 = _interopRequireDefault(_javascript);

var _typescript = require('highlight.js/lib/languages/typescript.js');

var _typescript2 = _interopRequireDefault(_typescript);

var _json = require('highlight.js/lib/languages/json.js');

var _json2 = _interopRequireDefault(_json);

var _xml = require('highlight.js/lib/languages/xml.js');

var _xml2 = _interopRequireDefault(_xml);

var _markdown = require('highlight.js/lib/languages/markdown.js');

var _markdown2 = _interopRequireDefault(_markdown);

var _bash = require('highlight.js/lib/languages/bash.js');

var _bash2 = _interopRequireDefault(_bash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// CSS and friends
_core2.default.registerLanguage('css', _css2.default);
_core2.default.registerLanguage('less', _less2.default);
_core2.default.registerLanguage('scss', _scss2.default);
_core2.default.registerLanguage('stylus', _stylus2.default);

// JS and friends
_core2.default.registerLanguage('js', _javascript2.default);
_core2.default.registerLanguage('javascript', _javascript2.default);
_core2.default.registerLanguage('jsx', _javascript2.default);
_core2.default.registerLanguage('ts', _typescript2.default);
_core2.default.registerLanguage('tsx', _typescript2.default);
_core2.default.registerLanguage('typescript', _typescript2.default);
_core2.default.registerLanguage('json', _json2.default);

// HTML and friends
_core2.default.registerLanguage('html', _xml2.default);
_core2.default.registerLanguage('xml', _xml2.default);
_core2.default.registerLanguage('md', _markdown2.default);
_core2.default.registerLanguage('markdown', _markdown2.default);

// (s)hell(ish)s
_core2.default.registerLanguage('bash', _bash2.default);
// low.registerLanguage('shell', bash);

var languages = ['css', 'less', 'scss', 'stylus', 'js', 'javascript', 'jsx', 'ts', 'tsx', 'typescript', 'json', 'html', 'xml', 'md', 'markdown', 'bash'];

var prettyPrinted = ['xml', 'html'];

function highlight(language, source) {
	if (!languages.includes(language)) {
		return source;
	}
	var code = prettyPrinted.includes(language) ? _prettyData.pd.xml(source) : source;

	var _low$highlight = _core2.default.highlight(language, code);

	var children = _low$highlight.value;

	return children;
}
module.exports = exports['default'];

},{"highlight.js/lib/languages/bash.js":172,"highlight.js/lib/languages/css.js":173,"highlight.js/lib/languages/javascript.js":174,"highlight.js/lib/languages/json.js":175,"highlight.js/lib/languages/less.js":176,"highlight.js/lib/languages/markdown.js":177,"highlight.js/lib/languages/scss.js":178,"highlight.js/lib/languages/stylus.js":179,"highlight.js/lib/languages/typescript.js":180,"highlight.js/lib/languages/xml.js":181,"lowlight/lib/core":195,"pretty-data":208}],413:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _highlight = require('./highlight');

var _highlight2 = _interopRequireDefault(_highlight);

var _toElements = require('./to-elements');

var _toElements2 = _interopRequireDefault(_toElements);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = Code;


function Code(props) {
	var className = (0, _classnames2.default)('code hljs', 'hljs-' + props.language);
	var source = highlightCode(props.language, props.children);

	return _react2.default.createElement(
		'code',
		{ className: className },
		source
	);
}

Code.propTypes = {
	language: _react.PropTypes.string.isRequired,
	children: _react.PropTypes.string.isRequired
};

function highlightCode(language) {
	var source = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

	if (!language) {
		return source;
	}
	if (!source) {
		return source;
	}
	var hast = (0, _highlight2.default)(language, source);
	return (0, _toElements2.default)(hast);
}
module.exports = exports['default'];

},{"./highlight":412,"./to-elements":414,"classnames":"classnames","react":"react"}],414:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _hastToHyperscript = require('hast-to-hyperscript');

var _hastToHyperscript2 = _interopRequireDefault(_hastToHyperscript);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = toElements;


function toElements(children) {
	if (!Array.isArray(children)) {
		return children;
	}

	var root = (0, _hastToHyperscript2.default)(_react2.default.createElement, {
		type: 'element',
		tagName: 'div',
		children: children
	});

	return root.props.children;
}
module.exports = exports['default'];

},{"hast-to-hyperscript":168,"react":"react"}],415:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Editor = function (_Component) {
	(0, _inherits3.default)(Editor, _Component);

	function Editor() {
		(0, _classCallCheck3.default)(this, Editor);
		return (0, _possibleConstructorReturn3.default)(this, (Editor.__proto__ || (0, _getPrototypeOf2.default)(Editor)).apply(this, arguments));
	}

	(0, _createClass3.default)(Editor, [{
		key: 'render',
		value: function render() {
			var props = this.props;


			return _react2.default.createElement('textarea', {
				className: props.className,
				onChange: props.onChange,
				onKeyDown: props.onKeyDown,
				value: props.value
			});
		}
	}]);
	return Editor;
}(_react.Component);

exports.default = Editor;
module.exports = exports['default'];

},{"babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"react":"react"}],416:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactDom = require('react-dom');

var _lodash = require('lodash');

exports.default = bind;


function bind(ref, props) {
	if (!ref) {
		return;
	}

	var _global = global;
	var KeyboardEvent = _global.KeyboardEvent;
	var window = _global.window;

	var node = (0, _reactDom.findDOMNode)(ref);
	var win = node.contentWindow;
	var doc = win.document;

	win.addEventListener('keydown', function (e) {
		var event = new KeyboardEvent('keydown', (0, _lodash.omit)(e, ['keyLocation']));
		event.data = e;
		if (e.keyCode === 82) {
			node.blur();
		}
		window.dispatchEvent(event);
	});

	props.onResize({
		width: doc.body.clientWidth,
		height: doc.body.clientHeight
	});

	var onResize = (0, _lodash.debounce)(function () {
		props.onResize({
			width: doc.body.scrollWidth,
			height: doc.body.scrollHeight
		});
	}, 15);

	var onScroll = (0, _lodash.debounce)(function () {
		var scroller = doc.scrollingElement || doc.body;
		var y = scroller.scrollTop;
		var x = scroller.scrollLeft;
		props.onScroll({ x: x, y: y });
	}, 15);

	win.addEventListener('resize', onResize);
	win.addEventListener('scroll', onScroll);
}
module.exports = exports['default'];

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"lodash":"lodash","react-dom":"react-dom"}],417:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _getField = require('./get-field');

var _getField2 = _interopRequireDefault(_getField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = getError;


function getError(lines) {
	var pattern = (0, _getField2.default)('Pattern')(lines);
	var transform = (0, _getField2.default)('Transform')(lines);
	var file = (0, _getField2.default)('File')(lines);

	var error = new Error(lines.join('\n'));
	error.pattern = pattern;
	error.transform = transform;
	error.fileName = file;
	return error;
}
module.exports = exports['default'];

},{"./get-field":418}],418:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = getField;


function getField(name) {
	return function (lines) {
		var lookup = name + ": ";
		var line = lines.find(function (line) {
			return line.startsWith(lookup);
		});
		return line.slice(lookup.length - 1);
	};
}
module.exports = exports['default'];

},{}],419:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _class2, _temp2;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _lodash = require('lodash');

var _queryString = require('query-string');

var _queryString2 = _interopRequireDefault(_queryString);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Handle = (0, _autobindDecorator2.default)(_class = (_temp2 = _class2 = function (_Component) {
	(0, _inherits3.default)(Handle, _Component);

	function Handle() {
		var _ref;

		var _temp, _this, _ret;

		(0, _classCallCheck3.default)(this, Handle);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Handle.__proto__ || (0, _getPrototypeOf2.default)(Handle)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
			active: false
		}, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	}

	(0, _createClass3.default)(Handle, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			global.addEventListener('mousemove', this.handleGlobalMouseMove);
			global.addEventListener('mouseup', this.handleGlobalMouseUp);
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			global.removeEventListener('mousemove', this.handleGlobalMouseMove);
			global.removeEventListener('mouseup', this.handleGlobalMouseUp);
		}
	}, {
		key: 'handleMouseDown',
		value: function handleMouseDown(e) {
			e.preventDefault();
			this.setState({ active: true });
		}
	}, {
		key: 'handleGlobalMouseMove',
		value: function handleGlobalMouseMove(e) {
			e.preventDefault();
			if (this.state.active) {
				this.props.onDrag(e);
			}
		}
	}, {
		key: 'handleGlobalMouseUp',
		value: function handleGlobalMouseUp() {
			if (this.state.active) {
				this.setState({ active: false });
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var props = this.props;

			var style = { width: props.width, height: props.height };

			var target = props.value ? props.pathname + '?' + _queryString2.default.stringify(props.query) : '';

			var className = (0, _classnames2.default)('handle', props.className, {
				'handle--active': this.state.active
			});

			return _react2.default.createElement(
				'div',
				{ className: className, style: style },
				_react2.default.createElement(
					'div',
					{
						className: 'handle__interaction',
						onMouseDown: this.handleMouseDown
					},
					this.state.active && _react2.default.createElement('div', { className: 'handle__capture' })
				)
			);
		}
	}]);
	return Handle;
}(_react.Component), _class2.propTypes = {
	className: _react.PropTypes.string,
	onClear: _react.PropTypes.func.isRequired,
	onDrag: _react.PropTypes.func.isRequired,
	onSubmit: _react.PropTypes.func.isRequired,
	pathname: _react.PropTypes.string,
	query: _react.PropTypes.object,
	value: _react.PropTypes.string
}, _class2.defaultProps = {
	onSubmit: _lodash.noop,
	onClear: _lodash.noop,
	onDrag: _lodash.noop
}, _temp2)) || _class;

exports.default = Handle;
module.exports = exports['default'];

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"autobind-decorator":"autobind-decorator","babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"classnames":"classnames","lodash":"lodash","query-string":210,"react":"react"}],420:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _handle = require('./handle');

var _handle2 = _interopRequireDefault(_handle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Handles = (0, _autobindDecorator2.default)(_class = function (_Component) {
	(0, _inherits3.default)(Handles, _Component);

	function Handles() {
		(0, _classCallCheck3.default)(this, Handles);
		return (0, _possibleConstructorReturn3.default)(this, (Handles.__proto__ || (0, _getPrototypeOf2.default)(Handles)).apply(this, arguments));
	}

	(0, _createClass3.default)(Handles, [{
		key: 'render',
		value: function render() {
			var props = this.props;


			return _react2.default.createElement(
				'div',
				{ className: 'frame__handles' },
				_react2.default.createElement(_handle2.default, {
					className: 'frame-handle frame-handle--horizontal',
					onClear: props.onClearHorizontal,
					onDrag: props.onDragHorizontal,
					onSubmit: props.onSubmitHorizontal,
					pathname: props.pathname,
					query: props.query,
					value: props.heightValue,
					width: props.width
				}),
				_react2.default.createElement(_handle2.default, {
					className: 'frame-handle frame-handle--vertical',
					height: props.height,
					onClear: props.onClearVertical,
					onDrag: props.onDragVertical,
					onSubmit: props.onSubmitVertical,
					pathname: props.pathname,
					query: props.query,
					value: props.widthValue
				}),
				_react2.default.createElement(_handle2.default, {
					className: 'frame-handle frame-handle--diagonal',
					onDrag: props.onDragDiagonal
				})
			);
		}
	}]);
	return Handles;
}(_react.Component)) || _class;

exports.default = Handles;
module.exports = exports['default'];

},{"./handle":419,"autobind-decorator":"autobind-decorator","babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"react":"react"}],421:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _class2, _temp;

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _lodash = require('lodash');

var _pureRenderDecorator = require('pure-render-decorator');

var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _bind = require('./bind');

var _bind2 = _interopRequireDefault(_bind);

var _handles = require('./handles');

var _handles2 = _interopRequireDefault(_handles);

var _relay = require('./relay');

var _relay2 = _interopRequireDefault(_relay);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Frame = (0, _pureRenderDecorator2.default)(_class = (0, _autobindDecorator2.default)(_class = (_temp = _class2 = function (_Component) {
	(0, _inherits3.default)(Frame, _Component);

	function Frame() {
		(0, _classCallCheck3.default)(this, Frame);
		return (0, _possibleConstructorReturn3.default)(this, (Frame.__proto__ || (0, _getPrototypeOf2.default)(Frame)).apply(this, arguments));
	}

	(0, _createClass3.default)(Frame, [{
		key: 'handleDiagonalDrag',
		value: function handleDiagonalDrag(e) {
			var rect = (0, _reactDom.findDOMNode)(this.ref).getBoundingClientRect();
			this.props.resize({
				y: Math.round(e.pageY - rect.top),
				x: Math.round(e.pageX - rect.left)
			});
		}
	}, {
		key: 'handleHorizontalSubmit',
		value: function handleHorizontalSubmit(e) {
			this.props.resize({
				y: e.target.value
			});
		}
	}, {
		key: 'handleHorizontalDrag',
		value: function handleHorizontalDrag(e) {
			var rect = (0, _reactDom.findDOMNode)(this.ref).getBoundingClientRect();
			this.props.resize({
				y: Math.round(e.pageY - rect.top)
			});
		}
	}, {
		key: 'handleVerticalSubmit',
		value: function handleVerticalSubmit(e) {
			this.props.resize({
				x: e.target.value
			});
		}
	}, {
		key: 'handleVerticalDrag',
		value: function handleVerticalDrag(e) {
			var rect = (0, _reactDom.findDOMNode)(this.ref).getBoundingClientRect();
			this.props.resize({
				x: Math.round(e.pageX - rect.left)
			});
		}
	}, {
		key: 'saveRef',
		value: function saveRef(ref) {
			this.ref = ref;
		}
	}, {
		key: 'render',
		value: function render() {
			var _this2 = this;

			var props = this.props;


			var onLoad = function onLoad(e) {
				(0, _bind2.default)(_this2.ref, _this2.props);
				props.onLoad(e);
			};

			var frameClassName = (0, _classnames2.default)('iframe', {
				'iframe--resizeable': props.resizeable
			});

			var frameResizeClassName = (0, _classnames2.default)('frame__resize-container', 'pattern__frame');

			var style = props.resizeable ? {
				width: props.width,
				height: props.height
			} : {};

			return _react2.default.createElement(
				'div',
				{ className: props.className },
				_react2.default.createElement(
					'div',
					{ className: frameResizeClassName, style: style },
					_react2.default.createElement('iframe', {
						className: frameClassName,
						onLoad: (0, _relay2.default)(onLoad, props.onError),
						ref: this.saveRef,
						src: props.src,
						sandbox: props.sandbox,
						onKeyDown: this.handleKeyDown
					}),
					props.resizeable && _react2.default.createElement(_handles2.default, {
						height: props.height,
						onDragDiagonal: this.handleDiagonalDrag,
						onDragHorizontal: this.handleHorizontalDrag,
						onDragVertical: this.handleVerticalDrag,
						onSubmitHorizontal: this.handleHorizontalSubmit,
						onSubmitVertical: this.handleVerticalSubmit,
						width: props.width
					})
				)
			);
		}
	}]);
	return Frame;
}(_react.Component), _class2.displayName = 'Frame', _class2.propTypes = {
	src: _react.PropTypes.string.isRequired,
	height: _react.PropTypes.number,
	id: _react.PropTypes.string.isRequired,
	resizeable: _react.PropTypes.bool.isRequired,
	resize: _react.PropTypes.func.isRequired,
	width: _react.PropTypes.number
}, _class2.defaultProps = {
	resize: _lodash.noop
}, _temp)) || _class) || _class;

exports.default = Frame;
module.exports = exports['default'];

},{"./bind":416,"./handles":420,"./relay":422,"autobind-decorator":"autobind-decorator","babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"classnames":"classnames","lodash":"lodash","pure-render-decorator":"pure-render-decorator","react":"react","react-dom":"react-dom"}],422:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _lodash = require('lodash');

var _getError = require('./get-error');

var _getError2 = _interopRequireDefault(_getError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _lodash.memoize)(function () {
	var onLoad = arguments.length <= 0 || arguments[0] === undefined ? _lodash.noop : arguments[0];
	var onError = arguments.length <= 1 || arguments[1] === undefined ? _lodash.noop : arguments[1];

	return function (e) {
		var document = e.target.contentWindow.document;
		var body = document.body;

		var first = body.firstChild;

		if (!first || !first.innerText) {
			return onLoad(e);
		}

		var lines = first.innerText.split('\n');

		if (lines[0].startsWith('Message: Error in')) {
			var error = (0, _getError2.default)(lines);
			return onError(error);
		}

		return onLoad(e);
	};
});
module.exports = exports['default'];

},{"./get-error":417,"lodash":"lodash"}],423:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _class2, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _pureRenderDecorator = require('pure-render-decorator');

var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Headline = (0, _pureRenderDecorator2.default)(_class = (_temp2 = _class2 = function (_Component) {
	(0, _inherits3.default)(Headline, _Component);

	function Headline() {
		var _ref;

		var _temp, _this, _ret;

		(0, _classCallCheck3.default)(this, Headline);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Headline.__proto__ || (0, _getPrototypeOf2.default)(Headline)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'Headline', _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	}

	(0, _createClass3.default)(Headline, [{
		key: 'render',
		value: function render() {
			var TagName = 'h' + this.props.order;
			var className = (0, _classnames2.default)('h', 'h' + (this.props.display || this.props.order), this.props.className);

			return _react2.default.createElement(
				TagName,
				{ className: className },
				this.props.children
			);
		}
	}]);
	return Headline;
}(_react.Component), _class2.propTypes = {
	children: _react.PropTypes.node.isRequired,
	order: _react.PropTypes.oneOf([1, 2, 3, 4, 5, 6]).isRequired,
	display: _react.PropTypes.oneOf([1, 2, 3, 4, 5, 6]),
	className: _react.PropTypes.string
}, _class2.defaultProps = {
	children: 'Headline',
	order: 1
}, _temp2)) || _class;

exports.default = Headline;
module.exports = exports['default'];

},{"babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"classnames":"classnames","pure-render-decorator":"pure-render-decorator","react":"react"}],424:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _lodash = require('lodash');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _reactSideEffect = require('react-side-effect');

var _reactSideEffect2 = _interopRequireDefault(_reactSideEffect);

var _icons = require('./icons');

var _icons2 = _interopRequireDefault(_icons);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var iconNames = (0, _keys2.default)(_icons2.default);

exports.default = (0, _reactSideEffect2.default)(toState, onChange)(Icon);


function toState(propsList) {
	var list = propsList.map(function (item) {
		return item.symbol;
	}).sort();
	var symbols = (0, _lodash.uniq)(list);
	return _react2.default.createElement(IconRegistry, { symbols: symbols });
}

function onChange(registry) {
	var element = getRegistryMountPoint();
	_reactDom2.default.render(registry, element);
}

function getRegistryMountPoint() {
	var _global = global;
	var document = _global.document;

	var found = document.querySelector('[data-icon-registry]');
	if (found) {
		return found;
	}

	var created = document.createElement('div');
	created.setAttribute('data-icon-registry', true);
	document.body.appendChild(created);
	return created;
}

function Icon(props) {
	var className = (0, _classnames2.default)('icon', props.className, {
		'icon--has-description': props.description
	});

	var textStyle = { display: props.fallback ? 'none' : null };
	var xlinkHref = '#' + props.symbol;

	return _react2.default.createElement(
		'div',
		{ className: className, style: props.style },
		_react2.default.createElement(
			'div',
			{ className: 'svg-icon' },
			_react2.default.createElement(
				'svg',
				{ className: 'svg' },
				_react2.default.createElement('use', { xlinkHref: xlinkHref })
			)
		),
		_react2.default.createElement(
			'div',
			{ className: 'svg-text', style: textStyle },
			props.children
		),
		props.description && _react2.default.createElement(
			'small',
			{ className: 'icon__description' },
			props.description
		)
	);
}

Icon.propTypes = {
	symbol: _react.PropTypes.oneOf(iconNames).isRequired,
	className: _react.PropTypes.string,
	fallback: _react.PropTypes.bool.isRequired,
	children: _react.PropTypes.any,
	description: _react.PropTypes.string,
	style: _react.PropTypes.object
};

Icon.defaultProps = {
	fallback: true
};

var hiddenStyles = {
	position: 'fixed',
	height: 0,
	width: 0,
	overflow: 'hidden',
	padding: 0,
	visibility: 'hidden'
};

function IconRegistry(props) {
	return _react2.default.createElement(
		'svg',
		{ style: hiddenStyles },
		props.symbols.map(function (symbol) {
			var creator = _icons2.default[symbol] || _lodash.noop;
			var paths = creator() || [];
			return _react2.default.createElement(_Symbol, { id: symbol, key: symbol, definition: paths });
		})
	);
}

IconRegistry.propTypes = {
	symbols: _react.PropTypes.arrayOf(_react.PropTypes.oneOf(iconNames)).isRequired
};

IconRegistry.defaultProps = {
	symbols: []
};

function _Symbol(props) {
	var paths = Array.isArray(props.definition) ? props.definition : [props.definition];

	return _react2.default.createElement(
		'symbol',
		{
			id: props.id,
			viewBox: '0 0 24 24'
		},
		paths.map(function (path) {
			return _react2.default.createElement(Path, { definition: path, key: path });
		})
	);
}

_Symbol.propTypes = {
	definition: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.object, _react.PropTypes.array]).isRequired,
	id: _react.PropTypes.string.isRequired
};

function Path(props) {
	var definition = props.definition;

	var def = typeof definition === 'string' ? { d: definition } : definition;
	var tagName = def.tagName;
	var p = (0, _objectWithoutProperties3.default)(def, ['tagName']);

	var Component = tagName || 'path';
	return _react2.default.createElement(Component, p);
}

Path.propTypes = {
	definition: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.object]).isRequired
};
module.exports = exports['default'];

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./icons":425,"babel-runtime/core-js/object/keys":13,"babel-runtime/helpers/objectWithoutProperties":25,"classnames":"classnames","lodash":"lodash","react":"react","react-dom":"react-dom","react-side-effect":217}],425:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable max-len */
var _arrowLeft = 'M9.452 13.233c-.14-.148-.258-.31-.344-.494-.215-.465-.215-1.01 0-1.475.085-.184.203-.346.343-.494l3.543-3.544 1.06 1.06c-1.183 1.186-2.46 2.285-3.55 3.558-.058.075-.073.175-.033.262.013.03.033.054.056.078l3.527 3.527-1.06 1.06-3.54-3.54z';
var _arrowRight = 'm 14.202,10.767 c 0.14,0.147 0.258,0.31 0.344,0.494 0.215,0.464 0.215,1.01 0,1.474 -0.085,0.185 -0.203,0.347 -0.343,0.494 L 10.66,16.775 9.6,15.715 c 1.183,-1.186 2.46,-2.285 3.55,-3.558 0.058,-0.075 0.073,-0.176 0.033,-0.262 -0.013,-0.03 -0.033,-0.055 -0.056,-0.08 L 9.601,8.29 l 1.06,-1.06 3.54,3.54 z';
var _code = 'M20.54 10.76l-3.313-3.313-.777 1.344 3.03 3.03c.098.1.098.257 0 .354l-3.533 3.538 1.06 1.06 3.536-3.538c.68-.683.68-1.792-.002-2.473zM4.52 11.82L8.05 8.29l-1.06-1.06L3.46 10.76c-.682.683-.683 1.79-.003 2.474l3.316 3.32.777-1.345-3.032-3.036c-.097-.097-.097-.255 0-.353zM7.6 18.12l7.5-12.99 1.3.75-7.5 12.99z';
var _dark = 'M12 16v3.227L5.52 15.15l-.02-6.3L12 4.77V8l-2 2 4 4-2 2zm0-13L4 8.02l.02 7.96L12 21l7.937-5L20 8l-8-5z';
var _dependencies = 'M9.453 20.026L6.75 21.378v-4.17l3.256-1.627v3.56c0 .38-.214.73-.553.9m-6.906 0c-.34-.17-.553-.515-.553-.893v-3.55l3.256 1.62v4.17L2.547 20.03zm3.006-7.062c.14-.07.294-.106.447-.106.153 0 .306.036.447.106l2.72 1.36L6 15.906 2.833 14.32l2.72-1.36zm4.57.16L7.12 11.62c-.345-.17-.732-.263-1.118-.263-.386 0-.773.09-1.118.26L1.878 13.12c-.854.423-1.384 1.28-1.384 2.233v3.77c0 .953.53 1.81 1.382 2.237l3.006 1.503c.345.174.732.266 1.118.266.386 0 .773-.09 1.118-.27l3.006-1.505c.852-.427 1.382-1.283 1.382-2.236v-3.77c0-.954-.53-1.81-1.382-2.237m11.33 6.906l-2.704 1.35V17.2l3.256-1.625v3.55c0 .38-.214.728-.553.897m-6.906 0c-.34-.17-.553-.517-.553-.895v-3.55l3.256 1.627v4.17l-2.703-1.353zm3.006-7.064c.14-.07.294-.104.447-.104.153 0 .306.04.447.11l2.72 1.36L18 15.91l-3.167-1.583 2.72-1.36zm4.57.16l-3.005-1.5c-.345-.17-.732-.262-1.118-.262-.386 0-.773.097-1.118.27l-3.006 1.502c-.852.425-1.382 1.28-1.382 2.234v3.772c0 .952.53 1.81 1.382 2.236l3.006 1.503c.345.17.732.262 1.118.262.386 0 .773-.092 1.118-.264l3.006-1.5c.852-.43 1.382-1.287 1.382-2.24v-3.77c0-.953-.53-1.81-1.382-2.236M8.547 9.53c-.34-.17-.553-.516-.553-.894v-3.55l3.256 1.627v4.17L8.547 9.53zm3.006-7.063c.14-.07.294-.106.447-.106.153 0 .306.04.447.11l2.72 1.36L12 5.41 8.833 3.827l2.72-1.36zm3.9 7.063l-2.703 1.352v-4.17l3.256-1.627v3.55c0 .38-.214.726-.553.895m.67 1.342c.853-.427 1.383-1.283 1.383-2.236V4.864c0-.953-.53-1.81-1.382-2.236l-3.006-1.503C12.773.953 12.386.86 12 .86c-.386 0-.773.093-1.118.265L7.876 2.628c-.852.427-1.382 1.283-1.382 2.236v3.772c0 .952.53 1.81 1.382 2.236l3.006 1.503c.345.172.732.264 1.118.264.386 0 .773-.1 1.118-.27l3.006-1.51z';
var _ecospheres = 'M18.052 15.315c0 .287-.162.55-.418.677l-5.296 2.648c-.107.053-.222.08-.338.08-.116 0-.232-.027-.34-.08l-5.295-2.648c-.256-.128-.418-.39-.418-.677v-6.63c0-.287.162-.55.418-.677L11.66 5.36c.108-.053.224-.08.34-.08.116 0 .23.027.338.08l5.296 2.648c.256.128.418.39.418.677v6.63zm.253-8.65L13.01 4.02c-.313-.155-.662-.238-1.01-.238-.35 0-.698.083-1.01.238L5.696 6.666c-.77.385-1.248 1.16-1.248 2.02v6.63c0 .86.478 1.633 1.247 2.017l5.296 2.648c.315.16.66.24 1.01.24s.7-.08 1.01-.235l5.298-2.65c.77-.383 1.247-1.157 1.247-2.017v-6.63c0-.86-.478-1.634-1.247-2.02';
var _folder = 'M10.5 4.5h-8v14c0 .552.448 1 1 1h17c.552 0 1-.448 1-1v-11h-11v-3zM9 6v3h11v9H4V6h5';
var _fullscreen = 'M9 3.75v-1.5l-5 .003c-.966 0-1.75.785-1.75 1.75V9h1.5V4.813L8.38 9.44l1.06-1.06-4.63-4.63H9zm-.62 10.81l-4.63 4.626V15h-1.5v4.997c0 .964.785 1.75 1.75 1.75l5 .002v-1.5l-4.19-.005 4.63-4.626-1.06-1.06zM20 2.25l-5-.005v1.5l4.194.003-4.634 4.63 1.06 1.06 4.63-4.624v4.18h1.5V4c0-.966-.785-1.75-1.75-1.75m.25 16.936l-4.63-4.626-1.06 1.06 4.634 4.63-4.194.005v1.5l5-.004c.965 0 1.75-.782 1.75-1.75v-4.993h-1.5v4.18z';
var _globals = 'M12 20.5c-3.046 0-5.716-1.616-7.217-4.03l.16.065 1.75-4.25c.08-.196.075-.416-.015-.607l-1.936-4.08c.595-.977 1.38-1.824 2.305-2.49L8.25 6.31V9c0 .116.028.23.08.335l3 6c.1.2.282.343.498.394.057.01.115.02.172.02.16 0 .32-.06.45-.15l4-3c.167-.13.275-.32.296-.53l.283-2.746 2.83-.543c.404.99.632 2.075.632 3.21 0 4.688-3.814 8.5-8.5 8.5M3.92 9.37l1.258 2.65-1.172 2.848C3.686 13.97 3.5 13.008 3.5 12c0-.92.15-1.802.422-2.63M19.138 7.4l-2.94.564c-.324.06-.57.33-.604.66l-.306 2.972-3.02 2.264L9.75 8.823V6c0-.2-.08-.39-.22-.53L8.38 4.32c1.1-.52 2.325-.82 3.62-.82 2.992 0 5.623 1.558 7.138 3.9M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2';
var _environment = _globals;
var _home = 'M12.055 2l-11 10h1.89v9.02c0 .524.422.95.943.95h7.223V18.2H13v3.77l7.103.03h.008c.524 0 .947-.424.947-.95v-9.01l1.89-.04-10.89-10zm-.005 2.032l7.505 6.892v9.574l-5.055-.023V16.7H9.61v3.77H4.445v-9.525L12.05 4.03';
var _light = 'M12 8V4.773l6.48 4.078.018 6.3L12 19.23V16l2-2-4-4 2-2zm0 13l8-5.02-.02-7.96L12 3 4.063 8 4 16l8 5z';
var _molecules = 'M6.372 4.75h11.255v1.5H6.372zM12.9 16.172c.32.124.617.31.868.56.12.12.222.248.312.383l5.626-9.143c-.514-.06-.99-.274-1.377-.624l-5.43 8.824zM6.08 6.886c-.09.135-.193.263-.312.382-.25.25-.548.437-.87.56l5.43 8.825c.388-.35.864-.564 1.378-.624L6.08 6.883zm4.86 10.554c-.587.586-.587 1.536 0 2.12.585.587 1.535.587 2.12 0 .586-.584.586-1.534 0-2.12-.585-.586-1.535-.586-2.12 0m10.12-13c-.585-.586-1.535-.586-2.12 0-.586.586-.586 1.536 0 2.12.585.587 1.535.587 2.12 0 .587-.584.587-1.534 0-2.12m-16 0c-.585-.586-1.535-.586-2.12 0-.586.586-.586 1.536 0 2.12.585.587 1.535.587 2.12 0 .587-.584.587-1.534 0-2.12';
var _organisms = 'M6.475 15.75c.008.084.025.165.025.25 0 .48-.142.922-.376 1.302l3.766 2.37c.287-.455.715-.808 1.224-1.002l-4.64-2.92zm11.05-.004l-4.64 2.923c.51.19.937.54 1.225 1l3.765-2.37c-.233-.38-.375-.83-.375-1.3 0-.09.017-.17.026-.26m2.454-5.25c-.564-.004-1.078-.203-1.495-.524l-.032 4.08c.417-.33.934-.54 1.505-.55l.023-3.005zm-15.973.01l.008 3c.567.003 1.083.203 1.5.524l-.01-4.042c-.418.318-.933.515-1.498.516m13.515-2.28c-.007-.08-.022-.15-.022-.22 0-.49.145-.94.386-1.32l-3.773-2.36c-.285.45-.71.81-1.22 1l4.63 2.893zm-11.046.01l4.635-2.91c-.5-.194-.93-.548-1.22-1.003L6.12 6.69c.237.383.38.83.38 1.31 0 .082-.016.16-.024.238M4 9.5c.828 0 1.5-.672 1.5-1.5S4.828 6.5 4 6.5 2.5 7.172 2.5 8 3.172 9.5 4 9.5m8-5c.828 0 1.5-.672 1.5-1.5s-.672-1.5-1.5-1.5-1.5.672-1.5 1.5.672 1.5 1.5 1.5m-8 10c-.828 0-1.5.672-1.5 1.5s.672 1.5 1.5 1.5 1.5-.672 1.5-1.5-.672-1.5-1.5-1.5m8 5c-.828 0-1.5.672-1.5 1.5s.672 1.5 1.5 1.5 1.5-.672 1.5-1.5-.672-1.5-1.5-1.5m8-5c-.828 0-1.5.672-1.5 1.5s.672 1.5 1.5 1.5 1.5-.672 1.5-1.5-.672-1.5-1.5-1.5m-8-4c-.828 0-1.5.672-1.5 1.5s.672 1.5 1.5 1.5 1.5-.672 1.5-1.5-.672-1.5-1.5-1.5m8-1c.828 0 1.5-.672 1.5-1.5s-.672-1.5-1.5-1.5-1.5.672-1.5 1.5.672 1.5 1.5 1.5';
var _templates = 'M7.5 2.5v15a1 1 0 0 0 1 1h11v-16zM18 17H9V4h9zM3.75 8h1.5v-.75H6.5v-1.5H3.75V8M8.02 20.75h3.32v1.5H8.02zM3.75 9.66h1.5v3.32h-1.5zM3.75 14.64h1.5v3.32h-1.5zM5.25 20.5v-.89h-1.5v.89a1.75 1.75 0 0 0 1.75 1.75h.86v-1.5H5.5a.25.25 0 0 1-.25-.25zM13.75 20.75H13v1.5h2.25V19.5h-1.5v1.25';
var _pages = ['M7.87 2.13v15a1 1 0 0 0 1 1h11v-16zm10.5 14.5h-9v-13h9z', 'M14.12 20.37H5.88a.25.25 0 0 1-.25-.25V6.87h1.25v-1.5H4.13v14.75a1.75 1.75 0 0 0 1.75 1.75h9.75v-2.75h-1.5z'];
var _pattern = 'M12.75 18.948v-7.412c.846-.34 2.457-1.153 5.75-2.892v7.43l-5.75 2.874zM5.5 8.588l5.75 2.874v7.486L5.5 16.073V8.588zm6.5-3.91l5.546 2.772c-3.208 1.687-4.896 2.514-5.47 2.75l-5.56-2.78L12 4.676zm7.447 2.046l-7-3.5c-.14-.07-.294-.106-.447-.106-.153 0-.306.035-.447.106l-7 3.5c-.34.17-.553.515-.553.894v8.764c0 .38.214.725.553.894l7 3.5c.14.07.294.106.447.106.153 0 .307-.035.447-.106l7-3.5c.34-.17.553-.515.553-.894V7.618c0-.38-.214-.725-.553-.894';
var _patternplate = 'M12 2c5.52 0 10 4.48 10 10s-4.48 10-10 10S2 17.52 2 12 6.48 2 12 2zm-2 15.5v-2H8v2h2zm3-3v-2h-2v2h2zm-3 0v-2H8v2h2zm6 0v-2h-2v2h2zm-6-3v-2H8v2h2zm6 0v-2h-2v2h2zm-3-3v-2h-2v2h2zm-3 0v-2H8v2h2zm6 0v-2h-2v2h2z';
var _polymers = 'M6.475 15.75c.008.084.025.165.025.25 0 .48-.142.922-.376 1.302l3.766 2.37c.287-.455.715-.808 1.224-1.002l-4.64-2.92zm11.05-.004l-4.64 2.923c.51.19.937.54 1.225 1l3.765-2.37c-.233-.38-.375-.83-.375-1.3 0-.09.017-.17.026-.26m2.454-5.25c-.564-.008-1.078-.207-1.495-.528l-.032 4.08c.417-.33.934-.54 1.505-.55l.023-3.005zm-15.973.01l.008 3c.567 0 1.083.2 1.5.52l-.01-4.04c-.418.32-.933.514-1.498.515m13.515-2.28c-.007-.08-.022-.15-.022-.22 0-.49.145-.94.386-1.32l-3.773-2.36c-.285.45-.71.81-1.22 1l4.63 2.893zm-11.046.01l4.635-2.91c-.5-.194-.93-.548-1.22-1.003L6.12 6.69c.237.383.38.83.38 1.31 0 .082-.016.16-.024.238m11.064.152l-4.79 2.392v-5.41c-.238.076-.486.127-.75.127-.262 0-.51-.06-.75-.13v5.44l-4.79-2.4c-.088.51-.327.98-.68 1.34l4.512 2.26-4.502 2.24c.35.36.58.82.67 1.34l4.79-2.397v5.42c.24-.074.48-.127.75-.127s.51.05.75.126v-5.38l4.78 2.394c.077-.516.31-.983.653-1.35l-4.543-2.27 4.56-2.27c-.35-.36-.584-.827-.666-1.343M4 9.5c.828 0 1.5-.672 1.5-1.5S4.828 6.5 4 6.5 2.5 7.172 2.5 8 3.172 9.5 4 9.5m8-5c.828 0 1.5-.672 1.5-1.5s-.672-1.5-1.5-1.5-1.5.672-1.5 1.5.672 1.5 1.5 1.5m-8 10c-.828 0-1.5.672-1.5 1.5s.672 1.5 1.5 1.5 1.5-.672 1.5-1.5-.672-1.5-1.5-1.5m8 5c-.828 0-1.5.672-1.5 1.5s.672 1.5 1.5 1.5 1.5-.672 1.5-1.5-.672-1.5-1.5-1.5m8-5c-.828 0-1.5.672-1.5 1.5s.672 1.5 1.5 1.5 1.5-.672 1.5-1.5-.672-1.5-1.5-1.5m0-5c.828 0 1.5-.672 1.5-1.5s-.672-1.5-1.5-1.5-1.5.672-1.5 1.5.672 1.5 1.5 1.5';
var _react = 'M 16.019531 3 C 15.671125 3.00715 15.300981 3.091375 14.921875 3.2324219 C 14.163662 3.5145156 13.340776 4.0384002 12.503906 4.7753906 C 12.340395 4.9193891 12.176009 5.0979185 12.011719 5.2578125 C 11.901617 5.1513016 11.791835 5.0267433 11.681641 4.9277344 C 10.795655 4.1316628 9.9236686 3.5712298 9.125 3.2695312 C 8.7256657 3.1186821 8.3365968 3.0284378 7.9726562 3.0195312 C 7.6087157 3.0106212 7.270437 3.0833582 6.9726562 3.2578125 C 6.3972498 3.5948924 6.0860013 4.2551581 5.9492188 5.0585938 C 5.8124361 5.8620294 5.8476604 6.8442943 6.0605469 7.9453125 C 6.1031041 8.1654193 6.1740595 8.4036874 6.2304688 8.6328125 C 5.97484 8.7063633 5.7047008 8.7722283 5.46875 8.8554688 C 4.432811 9.2209626 3.5945928 9.6796197 2.9921875 10.201172 C 2.3897822 10.722724 2 11.327349 2 11.984375 C 2 12.662118 2.4082566 13.289795 3.0429688 13.839844 C 3.6776808 14.389892 4.5645597 14.878259 5.65625 15.255859 C 5.8317684 15.316571 6.0331245 15.360088 6.21875 15.414062 C 6.1582822 15.66053 6.0832065 15.917073 6.0390625 16.152344 C 5.8346362 17.241844 5.8098143 18.204961 5.9550781 18.992188 C 6.1003415 19.779412 6.4197964 20.423275 6.9863281 20.753906 C 7.5707485 21.094948 8.3167421 21.047508 9.1054688 20.765625 C 9.8941954 20.483741 10.754805 19.951627 11.623047 19.183594 C 11.761961 19.060717 11.898899 18.906452 12.037109 18.771484 C 12.216283 18.945766 12.396455 19.138171 12.574219 19.292969 C 13.405466 20.016801 14.218158 20.522511 14.966797 20.789062 C 15.715436 21.055615 16.430103 21.095246 16.996094 20.763672 C 17.579942 20.42164 17.910332 19.748024 18.0625 18.917969 C 18.214668 18.087913 18.188624 17.069767 17.964844 15.925781 C 17.929929 15.747281 17.867388 15.554788 17.822266 15.371094 C 17.950462 15.332733 18.093563 15.303037 18.216797 15.261719 C 19.34199 14.884455 20.256474 14.401339 20.914062 13.853516 C 21.571651 13.305692 22 12.675711 22 11.984375 C 22 11.316537 21.592337 10.708795 20.972656 10.185547 C 20.352976 9.6622986 19.494727 9.2034761 18.445312 8.8378906 C 18.238082 8.7656964 18.000825 8.7093156 17.779297 8.6445312 C 17.816133 8.4924793 17.870208 8.3318492 17.900391 8.1835938 C 18.13931 7.0099907 18.183182 5.96782 18.042969 5.1191406 C 17.902756 4.2704612 17.578578 3.5803124 16.982422 3.2324219 C 16.694443 3.0643682 16.367938 2.9928547 16.019531 3 z M 16.023438 3.8652344 C 16.246408 3.8595757 16.422746 3.9010322 16.548828 3.9746094 C 16.815675 4.1303292 17.07873 4.5521623 17.195312 5.2578125 C 17.311895 5.9634627 17.281462 6.9169667 17.058594 8.0117188 C 17.032589 8.1394545 16.984815 8.2822106 16.953125 8.4140625 C 16.134284 8.2234679 15.235015 8.0912672 14.294922 8.0019531 C 13.751908 7.2186476 13.191061 6.4913648 12.617188 5.8652344 C 12.768776 5.7177962 12.922862 5.5514965 13.072266 5.4199219 C 13.849433 4.7355084 14.600382 4.2698533 15.220703 4.0390625 C 15.530864 3.9236671 15.800467 3.8708931 16.023438 3.8652344 z M 7.9667969 3.8847656 C 8.204941 3.8916645 8.4921202 3.9495056 8.8222656 4.0742188 C 9.4825566 4.3236447 10.28203 4.8247788 11.107422 5.5664062 C 11.205243 5.6542984 11.305753 5.7681072 11.404297 5.8632812 C 10.828373 6.4891798 10.260402 7.2150849 9.7109375 8 C 8.7742691 8.0878313 7.878881 8.2210717 7.0605469 8.4082031 C 7.0093893 8.1995211 6.9427183 7.979966 6.9042969 7.78125 C 6.7063246 6.7573656 6.6823383 5.8644203 6.7949219 5.203125 C 6.9075054 4.5418297 7.1543156 4.1475862 7.40625 4 C 7.5395435 3.9219104 7.7286527 3.8778668 7.9667969 3.8847656 z M 12.011719 6.4746094 C 12.406433 6.9082361 12.7994 7.4001799 13.1875 7.9238281 C 12.794349 7.9049913 12.404259 7.8808594 12 7.8808594 C 11.601264 7.8808594 11.215567 7.9055035 10.826172 7.9238281 C 11.218061 7.4011371 11.614064 6.9090918 12.011719 6.4746094 z M 12 8.7402344 C 12.62139 8.7402344 13.227614 8.7668454 13.818359 8.8125 C 14.151039 9.3088157 14.475839 9.8245485 14.785156 10.365234 C 15.09578 10.908201 15.379531 11.451329 15.642578 11.990234 C 15.381336 12.536206 15.099335 13.084929 14.787109 13.632812 C 14.47815 14.17496 14.155199 14.694701 13.826172 15.193359 C 13.231026 15.236716 12.621925 15.263672 12 15.263672 C 11.385158 15.263672 10.783354 15.241979 10.195312 15.203125 C 9.857099 14.704207 9.5270761 14.182489 9.2148438 13.636719 C 8.9026472 13.090995 8.6226165 12.543692 8.3652344 12.001953 C 8.6223479 11.459349 8.9033118 10.912375 9.2128906 10.369141 C 9.5231725 9.8246773 9.8493881 9.3072485 10.183594 8.8125 C 10.77474 8.7671354 11.382161 8.7402344 12 8.7402344 z M 9.0917969 8.9335938 C 8.8809698 9.2664173 8.6672078 9.5936441 8.4667969 9.9453125 C 8.26942 10.29166 8.0992881 10.639079 7.921875 10.986328 C 7.6728423 10.387485 7.4513424 9.8008736 7.2792969 9.2402344 C 7.8448649 9.1122912 8.4555981 9.0142998 9.0917969 8.9335938 z M 14.912109 8.9335938 C 15.551594 9.0156474 16.16691 9.1173252 16.734375 9.2480469 C 16.562073 9.8064733 16.34146 10.391171 16.089844 10.988281 C 15.90762 10.63874 15.729215 10.288907 15.529297 9.9394531 C 15.33083 9.5925325 15.120651 9.264526 14.912109 8.9335938 z M 6.4472656 9.4648438 C 6.6951622 10.278405 7.0319189 11.134632 7.4277344 12.003906 C 7.026288 12.886892 6.6864667 13.756169 6.4355469 14.582031 C 6.272336 14.53433 6.0902943 14.49621 5.9375 14.443359 C 4.9277033 14.094085 4.1309727 13.643168 3.6074219 13.189453 C 3.0838711 12.735738 2.859375 12.295484 2.859375 11.984375 C 2.859375 11.681865 3.0645925 11.275878 3.5546875 10.851562 C 4.0447825 10.427248 4.7971191 10.004273 5.7558594 9.6660156 C 5.9674342 9.5913747 6.2155634 9.5317521 6.4472656 9.4648438 z M 17.5625 9.4765625 C 17.761147 9.5349289 17.977705 9.5841952 18.162109 9.6484375 C 19.135811 9.987647 19.909923 10.414765 20.417969 10.84375 C 20.926014 11.272735 21.140625 11.684825 21.140625 11.984375 C 21.140625 12.30116 20.909935 12.739581 20.365234 13.193359 C 19.820534 13.647138 18.990692 14.096108 17.943359 14.447266 C 17.839835 14.481976 17.715549 14.506445 17.607422 14.539062 C 17.350826 13.718687 16.99339 12.85937 16.583984 11.988281 C 16.977973 11.130028 17.315538 10.284009 17.5625 9.4765625 z M 16.097656 12.992188 C 16.360815 13.600657 16.599902 14.199577 16.779297 14.767578 C 16.197615 14.901882 15.568725 15.005518 14.908203 15.085938 C 15.119082 14.747835 15.331463 14.412597 15.533203 14.058594 C 15.735416 13.703757 15.915097 13.347868 16.097656 12.992188 z M 7.921875 13.021484 C 8.1000429 13.369168 8.2716246 13.716461 8.4707031 14.064453 C 8.6760168 14.423334 8.8964141 14.759151 9.1132812 15.099609 C 8.4651932 15.026399 7.8402627 14.934137 7.2675781 14.808594 C 7.4427132 14.236002 7.6671378 13.634621 7.921875 13.021484 z M 16.994141 15.599609 C 17.033614 15.76138 17.090652 15.934214 17.121094 16.089844 C 17.32857 17.150499 17.342782 18.076459 17.216797 18.763672 C 17.090815 19.450885 16.824358 19.868082 16.5625 20.021484 C 16.307877 20.17065 15.861548 20.194868 15.253906 19.978516 C 14.646267 19.762166 13.908649 19.315011 13.138672 18.644531 C 12.976886 18.503647 12.809552 18.324509 12.644531 18.164062 C 13.213719 17.533605 13.768067 16.796304 14.304688 16.009766 C 15.256548 15.924226 16.164838 15.793207 16.994141 15.599609 z M 7.046875 15.644531 C 7.8734712 15.828556 8.7843105 15.944441 9.7285156 16.021484 C 10.281098 16.80836 10.851201 17.535739 11.429688 18.164062 C 11.304718 18.286056 11.178838 18.429245 11.054688 18.539062 C 10.250844 19.250131 9.4655785 19.725022 8.8164062 19.957031 C 8.1672342 20.18904 7.6820257 20.164669 7.4199219 20.011719 C 7.1650564 19.862976 6.9174785 19.478939 6.7988281 18.835938 C 6.6801777 18.192936 6.695132 17.321208 6.8847656 16.310547 C 6.9241429 16.100681 6.9927179 15.866659 7.046875 15.644531 z M 13.201172 16.083984 C 12.816824 16.612397 12.428545 17.113513 12.037109 17.550781 C 11.636336 17.112875 11.235674 16.616934 10.839844 16.089844 C 11.2244 16.104917 11.606956 16.123047 12 16.123047 C 12.406689 16.123047 12.803605 16.101833 13.201172 16.083984 z';
var _reload = 'M17.266 6.664C15.91 5.327 14.05 4.5 12 4.5c-4.135 0-7.5 3.365-7.5 7.5s3.365 7.5 7.5 7.5 7.5-3.365 7.5-7.5c0-.544-.058-1.074-.168-1.586h1.53C20.95 10.93 21 11.46 21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9 4.03-9 9-9c2.453 0 4.677.98 6.3 2.572v-.986h1.5v3.578h-3.578v-1.5h1.044zM12 13.5c-.827 0-1.5-.673-1.5-1.5s.673-1.5 1.5-1.5c.828 0 1.5.673 1.5 1.5s-.672 1.5-1.5 1.5z';
var _rulers = 'M21 7H3a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h18a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1zm-.5 8.5H18V13h-1.5v2.5h-2V13H13v2.5h-2V13H9.5v2.5h-2V13H6v2.5H3.5v-7h17z';
var _search = 'M8.65 14.248c-.376-.46-.697-.962-.955-1.496-.335-.695-.56-1.44-.668-2.205-.11-.787-.096-1.59.044-2.373.13-.726.37-1.432.71-2.09.75-1.448 1.96-2.636 3.43-3.343.64-.3 1.32-.52 2.02-.64.35-.05.69-.08 1.04-.09h.29c.35.01.7.03 1.04.09.7.11 1.39.32 2.03.62 1.53.717 2.8 1.95 3.55 3.466.32.63.54 1.31.67 2.006.14.78.16 1.584.05 2.37-.106.76-.332 1.51-.667 2.204-.393.81-.933 1.55-1.586 2.174-.675.643-1.472 1.16-2.34 1.515-.895.365-1.862.553-2.832.553s-1.933-.186-2.83-.553c-.684-.28-1.325-.66-1.9-1.13-2.09 2.21-4.294 4.307-6.437 6.464-.09.08-.186.15-.3.187-.1.034-.205.046-.31.035-.072-.01-.145-.03-.213-.058-.308-.13-.497-.455-.454-.79.02-.15.088-.28.184-.395 2.09-2.23 4.3-4.343 6.46-6.506zM14.377 3.5c-.28.006-.56.027-.836.07-.56.085-1.1.25-1.62.49-1.16.542-2.13 1.457-2.74 2.58-.28.518-.48 1.075-.6 1.65-.13.65-.15 1.318-.07 1.974.08.612.25 1.21.52 1.77.31.655.73 1.253 1.25 1.758.54.523 1.17.945 1.86 1.236.715.302 1.486.462 2.26.472.777.01 1.554-.13 2.277-.416.695-.275 1.34-.682 1.885-1.192.53-.492.97-1.08 1.29-1.726.276-.55.464-1.144.557-1.753.1-.63.09-1.273-.01-1.9-.094-.56-.266-1.103-.51-1.613-.58-1.197-1.555-2.185-2.744-2.776-.505-.252-1.047-.43-1.603-.53-.273-.05-.55-.077-.83-.09-.1-.003-.204-.004-.31-.004z';

var _atoms = ['M12 3c-1.39 0-2.7.324-3.874.886.355.357.608.807.75 1.305.952-.436 2.008-.69 3.124-.69 4.135 0 7.5 3.367 7.5 7.5s-3.365 7.5-7.5 7.5-7.5-3.363-7.5-7.5c0-1.114.252-2.17.69-3.123-.497-.14-.947-.395-1.304-.75C3.324 9.3 3 10.612 3 12c0 4.97 4.03 9 9 9s9-4.03 9-9-4.03-9-9-9', 'M13.5 12c0-.828-.672-1.5-1.5-1.5s-1.5.672-1.5 1.5.672 1.5 1.5 1.5 1.5-.672 1.5-1.5M6 7.5c.828 0 1.5-.672 1.5-1.5S6.828 4.5 6 4.5 4.5 5.172 4.5 6 5.172 7.5 6 7.5'];

var _arrowDoubleLeft = ['M7.452 13.233c-.14-.148-.258-.31-.344-.494-.215-.465-.215-1.01 0-1.475.085-.184.203-.346.343-.494l3.543-3.544 1.06 1.06c-1.183 1.186-2.46 2.285-3.55 3.558-.058.075-.073.175-.033.262.013.03.033.054.056.078l3.527 3.527-1.06 1.06-3.54-3.54z', 'M12.452 13.233c-.14-.148-.258-.31-.344-.494-.215-.465-.215-1.01 0-1.475.085-.184.203-.346.343-.494l3.543-3.544 1.06 1.06c-1.183 1.186-2.46 2.285-3.55 3.558-.058.075-.073.175-.033.262.013.03.033.054.056.078l3.527 3.527-1.06 1.06-3.54-3.54z'];

var _arrowDoubleRight = ['M16.548 10.767c.14.147.258.31.344.494.215.464.215 1.01 0 1.474-.085.185-.203.347-.343.494l-3.543 3.546-1.06-1.06c1.183-1.186 2.46-2.285 3.55-3.558.058-.075.073-.176.033-.262-.013-.03-.033-.055-.056-.08L11.947 8.29l1.06-1.06 3.54 3.54z', 'M11.548 10.767c.14.147.258.31.344.494.215.464.215 1.01 0 1.474-.085.185-.203.347-.343.494l-3.543 3.546-1.06-1.06c1.183-1.186 2.46-2.285 3.55-3.558.058-.075.073-.176.033-.262-.013-.03-.033-.055-.056-.08L6.947 8.29l1.06-1.06 3.54 3.54z'];

var _folderOpen = [{
	d: 'M20 18H4V9h5v3h11v6zM10.5 7.5v-3h-8v14c0 .552.448 1 1 1h17c.552 0 1-.448 1-1v-11h-11z'
}];

var _documentation = ['M18.375 16.625h-9v-13h9v13zm-10.5-14.5v15c0 .552.447 1 1 1h11v-16h-12z', 'M14.125 20.375h-8.25c-.137 0-.25-.112-.25-.25V6.875h1.25v-1.5h-2.75v14.75c0 .965.786 1.75 1.75 1.75h9.75v-2.75h-1.5v1.25z', {
	tagName: 'circle',
	cx: 14,
	cy: 6.5,
	r: 1.5
}, 'M14.75 9h.75v1.5h-.75v3H16V15h-4v-1.5h1.25v-3h-.75V9h.75v-.004h1.5V9z'];

var _issue = ['M19.98 10.99l-2.647-5.295c-.385-.77-1.158-1.248-2.02-1.248h-6.63c-.858 0-1.633.48-2.018 1.248L4.018 10.99c-.156.313-.238.66-.238 1.01s.082.697.237 1.01l2.648 5.295c.385.77 1.16 1.248 2.02 1.248h6.63c.86 0 1.633-.48 2.018-1.247l2.647-5.296c.156-.312.24-.66.24-1.01s-.083-.697-.24-1.01zm-1.34 1.35l-2.648 5.295c-.127.256-.39.418-.677.418h-6.63c-.287 0-.55-.162-.677-.418L5.36 12.34c-.053-.11-.08-.225-.08-.34 0-.116.026-.23.08-.338l2.647-5.297c.128-.256.39-.418.677-.418h6.63c.287 0 .55.162.677.418l2.65 5.297c.053.106.08.222.08.338 0 .115-.027.23-.08.34z', {
	tagName: 'circle',
	cx: 12,
	cy: 15,
	r: 1.5
}, 'M11.25 7.474h1.5v4.5h-1.5z'];

var _command = ['M20.5 5.5h-17c-.55 0-1 .45-1 1v11c0 .552.45 1 1 1h17c.552 0 1-.448 1-1v-11c0-.55-.448-1-1-1zM20 17H4V7h16v10z', 'M8.375 14.25h7.25v1.5h-7.25zm-2.875-6H7v1.5H5.5zm2.875 0h1.5v1.5h-1.5zm2.875 0h1.5v1.5h-1.5zm5.75 0h1.5v1.5H17zm-2.875 0h1.5v1.5h-1.5zm-4.313 3h1.5v1.5h-1.5zm2.876 0h1.5v1.5h-1.5zm-7.188 0h2.938v1.5H5.5zm10.078 0h2.938v1.5h-2.938zm-10.078 3H7v1.5H5.5zm11.516 0h1.5v1.5h-1.5z'];

exports.default = {
	'arrow-double-left': function arrowDoubleLeft() {
		return _arrowDoubleLeft;
	},
	'arrow-double-right': function arrowDoubleRight() {
		return _arrowDoubleRight;
	},
	'arrow-left': function arrowLeft() {
		return _arrowLeft;
	},
	'arrow-right': function arrowRight() {
		return _arrowRight;
	},
	'atoms': function atoms() {
		return _atoms;
	},
	'checkers-inverted': function checkersInverted() {
		return _checkers(true);
	},
	'checkers': function checkers() {
		return _checkers();
	},
	'code': function code() {
		return _code;
	},
	'command': function command() {
		return _command;
	},
	'dark': function dark() {
		return _dark;
	},
	'dependencies': function dependencies() {
		return _dependencies;
	},
	'documentation': function documentation() {
		return _documentation;
	},
	'ecospheres': function ecospheres() {
		return _ecospheres;
	},
	'environment': function environment() {
		return _environment;
	},
	'folder-open': function folderOpen() {
		return _folderOpen;
	},
	'folder': function folder() {
		return _folder;
	},
	'fullscreen': function fullscreen() {
		return _fullscreen;
	},
	'globals': function globals() {
		return _globals;
	},
	'home': function home() {
		return _home;
	},
	'issue': function issue() {
		return _issue;
	},
	'light': function light() {
		return _light;
	},
	'molecules': function molecules() {
		return _molecules;
	},
	'organisms': function organisms() {
		return _organisms;
	},
	'pages': function pages() {
		return _pages;
	},
	'pattern': function pattern() {
		return _pattern;
	},
	'patternplate': function patternplate() {
		return _patternplate;
	},
	'polymers': function polymers() {
		return _polymers;
	},
	'react': function react() {
		return _react;
	},
	'reload': function reload() {
		return _reload;
	},
	'rulers': function rulers() {
		return _rulers;
	},
	'search': function search() {
		return _search;
	},
	'templates': function templates() {
		return _templates;
	}
};


function _checkers(inverted) {
	var length = 20;
	var count = 5;
	var dim = length / count;
	var offset = (24 - length) / 2;
	var field = count * count / 2;

	var fields = range(count * count).map(function (_, i) {
		var x = i % count;
		var y = (i - x) / count;

		var filled = y % 2 === 0 ? x % 2 === 0 : x % 2 !== 0;

		if (!filled) {
			return null;
		}

		var product = (y + 1) * (x + 1);
		var inArea = inverted ? true : product <= field;

		if (!inArea) {
			return null;
		}

		return rect({
			x: offset + x * dim,
			y: offset + y * dim,
			width: dim,
			height: dim
		});
	}).filter(Boolean);

	return join(fields);
}

function rect(props) {
	var width = props.width;
	var height = props.height;
	var x = props.x;
	var y = props.y;
	var p = (0, _objectWithoutProperties3.default)(props, ['width', 'height', 'x', 'y']);

	return (0, _extends3.default)({}, p, {
		d: 'M' + x + ',' + y + 'h' + width + 'v' + height + 'h-' + width + 'z'
	});
}

function range(count) {
	return Array(count).fill(true);
}

function join(paths) {
	var d = paths.map(function (path) {
		return path.d;
	}).join('');
	return [{
		d: d
	}];
}
module.exports = exports['default'];

},{"babel-runtime/helpers/extends":23,"babel-runtime/helpers/objectWithoutProperties":25}],426:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _render = require('./render');

var _render2 = _interopRequireDefault(_render);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = Markdown;


function Markdown(props) {
	var className = (0, _classnames2.default)('markdown', props.className);
	return _react2.default.createElement(
		'div',
		{ className: className },
		(0, _render2.default)(props.source, {
			base: props.base,
			hash: props.hash,
			query: props.query,
			pathname: props.pathname,
			onHashChange: props.scrollTo
		})
	);
}

Markdown.propTypes = {
	base: _react.PropTypes.string.isRequired,
	className: _react.PropTypes.string,
	hash: _react.PropTypes.string.isRequired,
	pathname: _react.PropTypes.string.isRequired,
	query: _react.PropTypes.object.isRequired,
	scrollTo: _react.PropTypes.func.isRequired,
	source: _react.PropTypes.string
};
module.exports = exports['default'];

},{"./render":430,"classnames":"classnames","react":"react"}],427:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _code = require('../code');

var _code2 = _interopRequireDefault(_code);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = MarkdownCode;


function MarkdownCode(props) {
	var language = parseLanguage(props.className);

	if (!language) {
		return _react2.default.createElement(
			'code',
			null,
			props.children
		);
	}

	var source = props.children.join('');
	return _react2.default.createElement(
		_code2.default,
		{ language: language },
		source
	);
}

MarkdownCode.propTypes = {
	children: _react.PropTypes.any.isRequired,
	className: _react.PropTypes.string
};

function parseLanguage() {
	var classNames = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

	var matches = classNames.split(' ').map(function (className) {
		return className.split('-');
	}).filter(function (entry) {
		return entry[0] === 'language';
	}).map(function (entry) {
		return entry[1];
	});
	return matches[0];
}
module.exports = exports['default'];

},{"../code":413,"react":"react"}],428:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = MarkdownHeadline;


function MarkdownHeadline(props) {
	var p = (0, _objectWithoutProperties3.default)(props, []);
	var TagName = props.tagName;

	var children = Array.isArray(p.children) ? p.children.join('') : p.children;
	var id = children.split(' ').join('-').toLowerCase();

	return _react2.default.createElement(
		TagName,
		{ id: id },
		props.children
	);
}

MarkdownHeadline.propTypes = {
	children: _react.PropTypes.any.isRequired,
	tagName: _react.PropTypes.string.isRequired
};
module.exports = exports['default'];

},{"babel-runtime/helpers/objectWithoutProperties":25,"react":"react"}],429:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp;

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MarkdownLink = (_temp = _class = function (_Component) {
	(0, _inherits3.default)(MarkdownLink, _Component);

	function MarkdownLink() {
		(0, _classCallCheck3.default)(this, MarkdownLink);
		return (0, _possibleConstructorReturn3.default)(this, (MarkdownLink.__proto__ || (0, _getPrototypeOf2.default)(MarkdownLink)).apply(this, arguments));
	}

	(0, _createClass3.default)(MarkdownLink, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var props = this.props;

			var parsed = _url2.default.parse(props.href);
			var pathname = parsed.pathname || '/';
			var hasHash = Boolean(parsed.hash);
			var isSamePathname = !parsed.pathname || props.pathname === pathname;
			var isSameHash = hasHash && isSamePathname && props.hash === parsed.hash;

			if (isSameHash) {
				props.onHashChange(parsed.hash.slice(1));
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var props = this.props;

			var parsed = _url2.default.parse(props.href);
			var pathname = parsed.pathname || '/';
			var isAbsolute = Boolean(parsed.protocol);

			if (isAbsolute) {
				return _react2.default.createElement(
					'a',
					{
						href: props.href,
						className: 'link link--external',
						rel: 'noopener',
						target: '_blank',
						title: props.title || 'Open ' + props.href + ' in a new tab'
					},
					props.children
				);
			}

			var hasHash = Boolean(parsed.hash);
			var isSamePathname = !parsed.pathname || props.pathname === pathname;

			console.log({ hasHash: hasHash, isSamePathname: isSamePathname });

			var to = {
				pathname: hasHash && isSamePathname ? '' + props.base : '/' + [props.base, parsed.pathname].join('').split('/').filter(Boolean).join('/'),
				query: props.query,
				hash: parsed.hash
			};

			var title = hasHash && isSamePathname ? 'Jump to ' + to.hash.slice(1) : 'Navigate to ' + to.pathname;

			var onClick = function onClick() {
				if (hasHash && isSamePathname) {
					props.onHashChange(to.hash.slice(1));
				}
			};

			return _react2.default.createElement(
				_reactRouter.Link,
				{
					onClick: onClick,
					title: props.title || title,
					to: to
				},
				props.children
			);
		}
	}]);
	return MarkdownLink;
}(_react.Component), _class.propTypes = {
	base: _react.PropTypes.string.isRequired,
	children: _react.PropTypes.any,
	hash: _react.PropTypes.string.isRequired,
	href: _react.PropTypes.string.isRequired,
	onHashChange: _react.PropTypes.func.isRequired,
	pathname: _react.PropTypes.string.isRequired,
	query: _react.PropTypes.object.isRequired,
	title: _react.PropTypes.string
}, _class.defaultProps = {
	onHashChange: function onHashChange() {}
}, _temp);
exports.default = MarkdownLink;
module.exports = exports['default'];

},{"babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"react":"react","react-router":"react-router","url":"url"}],430:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _github = require('hast-util-sanitize/lib/github');

var _github2 = _interopRequireDefault(_github);

var _lodash = require('lodash');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _remark = require('remark');

var _remark2 = _interopRequireDefault(_remark);

var _remarkGemojiToEmoji = require('remark-gemoji-to-emoji');

var _remarkGemojiToEmoji2 = _interopRequireDefault(_remarkGemojiToEmoji);

var _remarkVdom = require('remark-vdom');

var _remarkVdom2 = _interopRequireDefault(_remarkVdom);

var _markdownLink = require('./markdown-link');

var _markdownLink2 = _interopRequireDefault(_markdownLink);

var _markdownCode = require('./markdown-code');

var _markdownCode2 = _interopRequireDefault(_markdownCode);

var _markdownHeadline = require('./markdown-headline');

var _markdownHeadline2 = _interopRequireDefault(_markdownHeadline);

var _wrap = require('./wrap');

var _wrap2 = _interopRequireDefault(_wrap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = render;


function render(source, options) {
	var base = options.base;
	var hash = options.hash;
	var highlights = options.highlights;
	var highlight = options.highlight;
	var query = options.query;
	var pathname = options.pathname;
	var onHashChange = options.onHashChange;

	var h = _react2.default.createElement;
	var headline = (0, _wrap2.default)(_markdownHeadline2.default);

	var table = (0, _wrap2.default)(strictChildren(MarkdownGeneric, ['thead', 'tbody']));
	var tbody = (0, _wrap2.default)(strictChildren(MarkdownGeneric, ['tr']));
	var tr = (0, _wrap2.default)(strictChildren(MarkdownGeneric, ['td', 'th']));
	var td = (0, _wrap2.default)(MarkdownGeneric);

	var link = { base: base, hash: hash, query: query, pathname: pathname, onHashChange: onHashChange };
	var code = { highlights: highlights, highlight: highlight };

	var components = {
		a: (0, _wrap2.default)(_markdownLink2.default, link),
		code: (0, _wrap2.default)(_markdownCode2.default, code),
		h1: headline,
		h2: headline,
		h3: headline,
		h4: headline,
		h5: headline,
		h6: headline,
		table: table,
		thead: tbody,
		tbody: tbody,
		tr: tr,
		th: td,
		td: td
	};

	var sanitize = (0, _lodash.merge)({}, _github2.default);
	sanitize.attributes = {
		a: ['href', 'title'],
		code: ['className'],
		img: ['src', 'alt']
	};

	var opts = { h: h, components: components, sanitize: sanitize };

	return (0, _remark2.default)().use(_remarkVdom2.default, opts).use(_remarkGemojiToEmoji2.default).process(source).contents;
}

function MarkdownGeneric(props) {
	var Component = props.tagName;
	return _react2.default.createElement(
		Component,
		null,
		props.children
	);
}

function strictChildren(Component, tagNames) {
	return function (props) {
		var children = _react.Children.toArray(props.children).filter(function (child) {
			return (typeof child === 'undefined' ? 'undefined' : (0, _typeof3.default)(child)) === 'object' && tagNames.includes(child.props.tagName);
		});
		return _react2.default.createElement(
			Component,
			props,
			children
		);
	};
}
module.exports = exports['default'];

},{"./markdown-code":427,"./markdown-headline":428,"./markdown-link":429,"./wrap":431,"babel-runtime/helpers/typeof":29,"hast-util-sanitize/lib/github":170,"lodash":"lodash","react":"react","remark":320,"remark-gemoji-to-emoji":220,"remark-vdom":319}],431:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = wrap;


function wrap(Component, options) {
	var h = _react2.default.createElement;
	return function (tagName, props, children) {
		return h(Component, (0, _lodash.merge)({}, options, props, { tagName: tagName }), children);
	};
}
module.exports = exports['default'];

},{"lodash":"lodash","react":"react"}],432:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _pureRenderDecorator = require('pure-render-decorator');

var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

var _lodash = require('lodash');

var _icon = require('../common/icon');

var _icon2 = _interopRequireDefault(_icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Message = (0, _pureRenderDecorator2.default)(_class = (0, _autobindDecorator2.default)(_class = (_temp = _class2 = function (_Component) {
	(0, _inherits3.default)(Message, _Component);

	function Message() {
		(0, _classCallCheck3.default)(this, Message);
		return (0, _possibleConstructorReturn3.default)(this, (Message.__proto__ || (0, _getPrototypeOf2.default)(Message)).apply(this, arguments));
	}

	(0, _createClass3.default)(Message, [{
		key: 'handleDismissClick',
		value: function handleDismissClick() {
			this.props.onDismiss(this.props.id);
		}
	}, {
		key: 'handleRetryClick',
		value: function handleRetryClick() {
			this.props.onRetry();
		}
	}, {
		key: 'render',
		value: function render() {
			var props = this.props;

			var className = (0, _classnames2.default)('message', 'message--' + props.type);
			return _react2.default.createElement(
				'div',
				{ className: className },
				_react2.default.createElement(
					'div',
					{ className: 'message__header' },
					props.title && _react2.default.createElement(
						'div',
						{ className: 'message__title' },
						props.title
					),
					_react2.default.createElement(
						'div',
						{ className: 'message__action' },
						props.retry && _react2.default.createElement(
							'button',
							{
								onClick: this.handleRetryClick,
								type: 'button',
								className: 'message__button',
								title: 'Retry loading ' + props.pattern + ' [ctrl+r]'
							},
							'Retry'
						),
						_react2.default.createElement(
							'button',
							{
								onClick: this.handleDismissClick,
								type: 'button',
								className: 'message__button',
								title: 'Dismiss message [esc]'
							},
							'Dismiss'
						)
					)
				),
				_react2.default.createElement(
					'div',
					{ className: 'message__body' },
					_react2.default.createElement(
						'pre',
						{ className: 'message__preformatted' },
						props.body
					)
				),
				_react2.default.createElement(
					'div',
					{ className: 'message__meta' },
					props.pattern && _react2.default.createElement(
						_reactRouter.Link,
						{
							to: {
								pathname: props.base + 'pattern/' + props.pattern,
								query: props.location.query
							},
							className: 'message__field'
						},
						_react2.default.createElement(_icon2.default, { base: props.base, symbol: 'pattern' }),
						props.pattern
					),
					props.file && _react2.default.createElement(
						'div',
						{ className: 'message__field' },
						_react2.default.createElement(_icon2.default, { base: props.base, symbol: 'documentation' }),
						props.file.slice(-50)
					)
				)
			);
		}
	}]);
	return Message;
}(_react.Component), _class2.propTypes = {
	base: _react.PropTypes.string.isRequired,
	id: _react.PropTypes.string.isRequired,
	onTimeRequest: _react.PropTypes.func.isRequired,
	onDismiss: _react.PropTypes.func.isRequired,
	onRetry: _react.PropTypes.func.isRequired
}, _class2.defaultProps = {
	onTimeRequest: _lodash.noop,
	onDismiss: _lodash.noop,
	onRetry: _lodash.noop
}, _temp)) || _class) || _class;

exports.default = Message;
module.exports = exports['default'];

},{"../common/icon":424,"autobind-decorator":"autobind-decorator","babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"classnames":"classnames","lodash":"lodash","pure-render-decorator":"pure-render-decorator","react":"react","react-router":"react-router"}],433:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _pureRenderDecorator = require('pure-render-decorator');

var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SearchField = (0, _pureRenderDecorator2.default)(_class = (0, _autobindDecorator2.default)(_class = (_temp = _class2 = function (_Component) {
	(0, _inherits3.default)(SearchField, _Component);

	function SearchField() {
		(0, _classCallCheck3.default)(this, SearchField);
		return (0, _possibleConstructorReturn3.default)(this, (SearchField.__proto__ || (0, _getPrototypeOf2.default)(SearchField)).apply(this, arguments));
	}

	(0, _createClass3.default)(SearchField, [{
		key: 'render',
		value: function render() {
			var _props = this.props;
			var base = _props.base;
			var Component = _props.component;
			var userClassName = _props.className;
			var value = _props.value;
			var name = _props.name;
			var onChange = _props.onChange;
			var onFocus = _props.onFocus;
			var onBlur = _props.onBlur;
			var placeholder = _props.placeholder;
			var props = (0, _objectWithoutProperties3.default)(_props, ['base', 'component', 'className', 'value', 'name', 'onChange', 'onFocus', 'onBlur', 'placeholder']);
			var displayName = SearchField.displayName;

			var className = (0, _classnames2.default)(displayName, userClassName);
			var containerClassName = displayName + '__container';
			var iconClassName = displayName + '__icon';
			var inputClassName = displayName + '__input';

			return _react2.default.createElement(
				Component,
				{ className: className },
				_react2.default.createElement(
					'label',
					{ className: containerClassName },
					_react2.default.createElement('input', {
						className: inputClassName,
						value: value,
						placeholder: placeholder,
						title: props.title,
						type: 'search',
						name: name,
						onBlur: onBlur,
						onChange: onChange,
						onFocus: onFocus,
						onKeyDown: this.handleKeyDown
					}),
					_react2.default.createElement(_icon2.default, { base: base, className: iconClassName, symbol: 'search' })
				)
			);
		}
	}]);
	return SearchField;
}(_react.Component), _class2.displayName = 'search-field', _class2.propTypes = {
	base: _react.PropTypes.string.isRequired,
	blur: _react.PropTypes.func.isRequired,
	className: _react.PropTypes.string,
	component: _react.PropTypes.node,
	linkTo: _react.PropTypes.string.isRequired,
	name: _react.PropTypes.string.isRequired,
	onBlur: _react.PropTypes.func,
	onChange: _react.PropTypes.func,
	onFocus: _react.PropTypes.func,
	placeholder: _react.PropTypes.string,
	title: _react.PropTypes.string,
	value: _react.PropTypes.string
}, _class2.defaultProps = {
	blur: function blur() {},
	component: 'div',
	onChange: function onChange() {},
	onFocus: function onFocus() {},
	onBlur: function onBlur() {}
}, _temp)) || _class) || _class;

exports.default = SearchField;
module.exports = exports['default'];

},{"./icon":424,"autobind-decorator":"autobind-decorator","babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/objectWithoutProperties":25,"babel-runtime/helpers/possibleConstructorReturn":26,"classnames":"classnames","pure-render-decorator":"pure-render-decorator","react":"react"}],434:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = Select;


function Select(props) {
	var className = (0, _classnames2.default)('select', props.className);

	return _react2.default.createElement(
		'label',
		{ className: className },
		_react2.default.createElement(
			'select',
			{
				className: 'select__native',
				onChange: props.onChange,
				value: props.value.value
			},
			props.options.map(function (_ref) {
				var value = _ref.value;
				var name = _ref.name;

				return _react2.default.createElement(
					'option',
					{ key: value, value: value },
					name
				);
			})
		),
		_react2.default.createElement(
			'span',
			{ className: 'select__label' },
			props.label
		),
		_react2.default.createElement(
			'div',
			{ className: 'select__body' },
			_react2.default.createElement(
				'span',
				{ className: 'select__value' },
				props.value.name
			),
			_react2.default.createElement(_icon2.default, {
				base: props.base,
				className: 'select__icon',
				symbol: 'arrow-right'
			})
		)
	);
}

Select.propTypes = {
	base: _react.PropTypes.string.isRequired,
	className: _react.PropTypes.string,
	value: _react.PropTypes.shape({
		value: _react.PropTypes.string.isRequired,
		name: _react.PropTypes.string.isRequired
	}),
	options: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		value: _react.PropTypes.string.isRequired,
		name: _react.PropTypes.string.isRequired
	})),
	onChange: _react.PropTypes.func.isRequired
};
module.exports = exports['default'];

},{"./icon":424,"classnames":"classnames","react":"react"}],435:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _class2, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactRouter = require('react-router');

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _editor = require('../common/editor');

var _editor2 = _interopRequireDefault(_editor);

var _markdown = require('../../containers/markdown');

var _markdown2 = _interopRequireDefault(_markdown);

var _lightbox = require('../lightbox');

var _lightbox2 = _interopRequireDefault(_lightbox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ConsoleLightbox = (0, _autobindDecorator2.default)(_class = (_temp2 = _class2 = function (_Component) {
	(0, _inherits3.default)(ConsoleLightbox, _Component);

	function ConsoleLightbox() {
		var _ref;

		var _temp, _this, _ret;

		(0, _classCallCheck3.default)(this, ConsoleLightbox);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = ConsoleLightbox.__proto__ || (0, _getPrototypeOf2.default)(ConsoleLightbox)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
			value: ''
		}, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	}

	(0, _createClass3.default)(ConsoleLightbox, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			if (this.ref) {
				var node = (0, _reactDom.findDOMNode)(this.ref);
				node.focus();
			}
		}
	}, {
		key: 'handleApplyState',
		value: function handleApplyState() {
			if (isDisabled(this.state, this.props)) {
				return;
			}
			try {
				var data = JSON.parse(this.state.value);
				this.props.onApplyState(data);
			} catch (error) {
				console.error(error);
			}
		}
	}, {
		key: 'handleChange',
		value: function handleChange(e) {
			this.setState({ value: e.target.value });
		}
	}, {
		key: 'handleClose',
		value: function handleClose() {
			this.props.onClose();
		}
	}, {
		key: 'handleKeyDown',
		value: function handleKeyDown(e) {
			if (e.ctrlKey && e.keyCode === 13) {
				e.preventDefault();
				this.handleApplyState();
			}
			if (e.keyCode === 27) {
				this.handleClose();
			}
		}
	}, {
		key: 'saveRef',
		value: function saveRef(ref) {
			this.ref = ref;
		}
	}, {
		key: 'render',
		value: function render() {
			var props = this.props;

			var disabled = isDisabled(this.state, this.props);
			var title = disabled ? 'No changes to apply' : 'Apply changes [ctrl+enter]';

			return _react2.default.createElement(
				_lightbox2.default,
				{
					title: 'Modify state',
					backdrop: true
				},
				_react2.default.createElement(_markdown2.default, {
					base: props.base,
					className: 'problem-lightbox__instructions',
					source: '> :rocket: Edit `patternplate-client` redux state directly'
				}),
				_react2.default.createElement(
					'div',
					{ className: 'console-lightbox__preview' },
					_react2.default.createElement(_editor2.default, {
						className: 'editor console-lightbox__state',
						value: this.state.value || props.state,
						onChange: this.handleChange,
						onKeyDown: this.handleKeyDown,
						ref: this.saveRef
					})
				),
				_react2.default.createElement(
					'div',
					{ className: 'console-lightbox__button-row' },
					_react2.default.createElement(
						'button',
						{
							className: 'button console-lightbox__button console-lightbox__button--apply',
							disabled: disabled,
							title: title,
							onClick: this.handleApplyState
						},
						'Apply changes'
					),
					_react2.default.createElement(
						_reactRouter.Link,
						{
							to: (0, _extends3.default)({}, props.location, {
								query: (0, _extends3.default)({}, props.location.query, {
									lightbox: false
								})
							}),
							title: 'Close this lightbox [esc]',
							className: 'button console-lightbox__button console-lightbox__button--abort'
						},
						'Close'
					)
				)
			);
		}
	}]);
	return ConsoleLightbox;
}(_react.Component), _class2.propTypes = {
	base: _react.PropTypes.string.isRequired,
	onApplyState: _react.PropTypes.func.isRequired,
	onClose: _react.PropTypes.func.isRequired,
	state: _react.PropTypes.string.isRequired,
	theme: _react.PropTypes.oneOf(['dark', 'light']).isRequired
}, _temp2)) || _class;

exports.default = ConsoleLightbox;


function isDisabled(state, props) {
	return !state.value || state.value === props.state;
}
module.exports = exports['default'];

},{"../../containers/markdown":470,"../common/editor":415,"../lightbox":441,"autobind-decorator":"autobind-decorator","babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/extends":23,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"react":"react","react-dom":"react-dom","react-router":"react-router"}],436:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _markdown = require('../../containers/markdown');

var _markdown2 = _interopRequireDefault(_markdown);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import Messages from './messages';
// import pure from 'pure-render-decorator';

var Home = (_temp = _class = function (_Component) {
	(0, _inherits3.default)(Home, _Component);

	function Home() {
		(0, _classCallCheck3.default)(this, Home);
		return (0, _possibleConstructorReturn3.default)(this, (Home.__proto__ || (0, _getPrototypeOf2.default)(Home)).apply(this, arguments));
	}

	(0, _createClass3.default)(Home, [{
		key: 'render',
		value: function render() {
			var _props = this.props;
			var readme = _props.readme;
			var base = _props.base;

			return _react2.default.createElement(
				'div',
				{ className: 'application-container application-container--home' },
				_react2.default.createElement(_markdown2.default, { source: readme, base: base, className: 'home' })
			);
		}
	}]);
	return Home;
}(_react.Component), _class.propTypes = {
	readme: _react.PropTypes.string.isRequired,
	base: _react.PropTypes.string.isRequired
}, _temp);
exports.default = Home;
module.exports = exports['default'];

},{"../../containers/markdown":470,"babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"react":"react"}],437:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _message = require('../common/message');

var _message2 = _interopRequireDefault(_message);

var _urlQuery = require('../../utils/url-query');

var _urlQuery2 = _interopRequireDefault(_urlQuery);

var _getIdByPathname = require('../../utils/get-id-by-pathname');

var _getIdByPathname2 = _interopRequireDefault(_getIdByPathname);

var _patternFolder = require('../pattern/pattern-folder');

var _patternFolder2 = _interopRequireDefault(_patternFolder);

var _patternSection = require('../pattern/pattern-section');

var _patternSection2 = _interopRequireDefault(_patternSection);

var _navigate = require('../../utils/navigate');

var _navigate2 = _interopRequireDefault(_navigate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = Content;


var sortTypes = ['folder', 'pattern'];
var rateType = function rateType(item) {
	return sortTypes.indexOf(item.type);
};

function Content(props) {
	var base = props.base;
	var config = props.config;
	var location = props.location;
	var hierarchy = config.hierarchy;

	var _urlQuery$parse = _urlQuery2.default.parse(location.pathname);

	var pathname = _urlQuery$parse.pathname;

	var id = (0, _getIdByPathname2.default)(pathname, props.base);

	var fragments = id.split('/');
	var depth = fragments.length - 1;
	var up = depth > 0 ? fragments.slice(0, fragments.length - 1).join('/') : '';
	var item = (0, _navigate2.default)(id, props.navigation);
	var itemDefaults = { base: base, location: location };
	var items = (0, _lodash.sortBy)((0, _lodash.sortBy)(getItems(item, hierarchy, itemDefaults), 'name'), rateType);

	return _react2.default.createElement(
		'div',
		{ className: 'application-container application-container--pattern' },
		item.type === 'folder' && _react2.default.createElement(_patternFolder2.default, {
			id: id,
			location: location,
			items: items,
			up: up,
			base: base
		}),
		item.type === 'pattern' && _react2.default.createElement(_patternSection2.default, {
			id: id,
			data: props.pattern,
			navigation: props.navigation,
			config: props.config,
			location: location,
			type: item.type,
			onDataRequest: props.onLoad,
			base: base
		}),
		_react2.default.createElement(
			_reactAddonsCssTransitionGroup2.default,
			{
				component: 'aside',
				transitionName: 'pattern-content-transition',
				className: 'messages',
				transitionEnterTimeout: 300,
				transitionLeaveTimeout: 300
			},
			props.messages.map(function (message) {
				return _react2.default.createElement(_message2.default, {
					id: message.id,
					key: message.id,
					type: message.type,
					title: message.subject,
					body: message.body || message.stack,
					pattern: String(message.pattern).trim(),
					payload: message.payload,
					retry: message.retry,
					file: message.file,
					timestamp: message.timestamp,
					onDismiss: props.onDismiss,
					onRetry: props.onRetry,
					location: location,
					base: base
				});
			})
		)
	);
}

Content.propTypes = {
	base: _react.PropTypes.string.isRequired,
	config: _react.PropTypes.object.isRequired,
	location: _react.PropTypes.shape({
		pathname: _react.PropTypes.string.isRequired
	}).isRequired,
	navigation: _react.PropTypes.object.isRequired,
	onDismiss: _react.PropTypes.func.isRequired,
	onLoad: _react.PropTypes.func.isRequired,
	onRetry: _react.PropTypes.func.isRequired,
	pattern: _react.PropTypes.object.isRequired,
	messages: _react.PropTypes.array.isRequired
};

function getItemName(item, hierarchy) {
	if (item.type === 'pattern') {
		return item.manifest.displayName || item.manifest.name || item.id;
	}
	var configured = hierarchy[item.id] || {};
	return configured.displayName || item.id;
}

function getItems(root, hierarchy, defaults) {
	if (root.type !== 'folder') {
		return [];
	}
	return (0, _values2.default)(root.children).map(selectPatternData(hierarchy, defaults)).filter(function (item) {
		return item.type !== 'pattern' || item.display;
	});
}

function selectPatternData(hierarchy, defaults) {
	return function (child) {
		var amend = child.type === 'pattern' ? {
			version: child.manifest.version,
			flag: child.manifest.flag,
			tags: child.manifest.tags,
			display: child.manifest.display !== false
		} : {};

		return (0, _extends3.default)({}, defaults, {
			id: child.id,
			name: getItemName(child, hierarchy),
			type: child.type
		}, amend);
	};
}
module.exports = exports['default'];

},{"../../utils/get-id-by-pathname":507,"../../utils/navigate":508,"../../utils/url-query":510,"../common/message":432,"../pattern/pattern-folder":456,"../pattern/pattern-section":459,"babel-runtime/core-js/object/values":15,"babel-runtime/helpers/extends":23,"lodash":"lodash","react":"react","react-addons-css-transition-group":"react-addons-css-transition-group"}],438:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _class2, _temp;
// import strip from 'strip-indent';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _queryString = require('query-string');

var _queryString2 = _interopRequireDefault(_queryString);

var _lightbox = require('../lightbox');

var _lightbox2 = _interopRequireDefault(_lightbox);

var _editor = require('../common/editor');

var _editor2 = _interopRequireDefault(_editor);

var _markdown = require('../../containers/markdown');

var _markdown2 = _interopRequireDefault(_markdown);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ProblemLightbox = (0, _autobindDecorator2.default)(_class = (_temp = _class2 = function (_Component) {
	(0, _inherits3.default)(ProblemLightbox, _Component);

	function ProblemLightbox() {
		(0, _classCallCheck3.default)(this, ProblemLightbox);
		return (0, _possibleConstructorReturn3.default)(this, (ProblemLightbox.__proto__ || (0, _getPrototypeOf2.default)(ProblemLightbox)).apply(this, arguments));
	}

	(0, _createClass3.default)(ProblemLightbox, [{
		key: 'render',
		value: function render() {
			var props = this.props;

			var issueTemplate = getIssueTemplate(props, true);

			var buttons = [_react2.default.createElement(
				_reactRouter.Link,
				{
					key: '0',
					to: (0, _extends3.default)({}, props.location, {
						query: (0, _extends3.default)({}, props.location.query, {
							issue: false
						})
					}),
					title: 'Close this lightbox [esc]',
					className: 'button lightbox__button'
				},
				'Close'
			)];

			return _react2.default.createElement(
				_lightbox2.default,
				{
					title: 'Report an issue',
					backdrop: true,
					buttons: buttons
				},
				_react2.default.createElement(_markdown2.default, {
					base: props.base,
					className: 'lightbox__instructions',
					source: getInstructions(props)
				}),
				_react2.default.createElement(
					'div',
					{ className: 'problem-lightbox__preview' },
					_react2.default.createElement(_editor2.default, {
						className: 'editor problem-lightbox__state',
						reaOnly: true,
						value: issueTemplate
					})
				)
			);
		}
	}]);
	return ProblemLightbox;
}(_react.Component), _class2.propTypes = {
	base: _react.PropTypes.string.isRequired,
	state: _react.PropTypes.string.isRequired,
	theme: _react.PropTypes.oneOf(['dark', 'light']).isRequired,
	version: _react.PropTypes.string.isRequired,
	serverVersion: _react.PropTypes.string.isRequired,
	clientVersion: _react.PropTypes.string.isRequired,
	browserName: _react.PropTypes.string.isRequired,
	browserVersion: _react.PropTypes.string.isRequired
}, _temp)) || _class;

exports.default = ProblemLightbox;


function getIssueTemplate(props, includeDetails) {
	return '\n- [ ] Provide a brief title of the problem\n- [ ] Describe what you are trying to do\n- [ ] Describe actual behaviour\n- [ ] Describe expected behaviour\n\n## Steps to reproduce\n`[Describe how to produce the bug in the application by manual action]`\n\n## Actual\n`[The faulty behaviour as produced by the steps above]`\n\n## Expected\n`[Result of the steps above that match user expectations and allow usage]`\n\n' + (includeDetails ? getDetails(props) : '') + '\n';
}

function getDetails(props) {
	return '\n## Details\n<details id="application-state">\n<summary>Application State</summary>\n```json\n' + props.state + '\n```\n</details>\n<details>\n<summary>Versions</summary>\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>\n\t\t\t\tSoftware\n\t\t\t</th>\n\t\t\t<th>\n\t\t\t\tVersion\n\t\t\t</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\tpatternplate\n\t\t\t</td>\n\t\t\t<th>\n\t\t\t\t' + props.version + '\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\tpatternplate-server\n\t\t\t</td>\n\t\t\t<th>\n\t\t\t\t' + props.serverVersion + '\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\tpatternplate-client\n\t\t\t</td>\n\t\t\t<th>\n\t\t\t\t' + props.clientVersion + '\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t' + props.browserName + '\n\t\t\t</td>\n\t\t\t<th>\n\t\t\t\t' + props.browserVersion + '\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t' + (props.runtimeName ? props.runtimeName : 'Runtime') + '\n\t\t\t</td>\n\t\t\t<th>\n\t\t\t\t' + props.runtimeVersion + '\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t' + (props.clientOsName ? props.clientOsName : 'OS') + ' (Client)\n\t\t\t</td>\n\t\t\t<th>\n\t\t\t\t' + props.clientOsVersion + '\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t' + (props.serverOsName ? props.serverOsName : 'OS') + ' (Server)\n\t\t\t</td>\n\t\t\t<th>\n\t\t\t\t' + props.serverOsVersion + '\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n</details>\n';
}

function getInstructions(props) {
	var query = _queryString2.default.stringify({
		title: '[v' + props.version + ']',
		body: '[Please paste the contents of patternplate issue template here]'
	});

	return '\n> patternplate issue template, please use for issue reporting :bow:\n\n`[Cmd+A] [Cmd+C]` the markdown below into a new isse at\n[sinnerschrader/patternplate](https://github.com/sinnerschrader/patternplate/issues/new?' + query + ')\n';
}
module.exports = exports['default'];

},{"../../containers/markdown":470,"../common/editor":415,"../lightbox":441,"autobind-decorator":"autobind-decorator","babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/extends":23,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"query-string":210,"react":"react","react-router":"react-router"}],439:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _markdown = require('../../containers/markdown');

var _markdown2 = _interopRequireDefault(_markdown);

var _lightbox = require('../lightbox');

var _lightbox2 = _interopRequireDefault(_lightbox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var source = '\n> Better living through keyboard controls. :tada:\n\n`patternplate-client` provides a number of keyboard shortcuts for your convenience.\nMost links reveal attached keyboard shortcuts when hovered, complementing the table below.\n\n| Combination     | Scope      | Effect                                         |\n|:---------------:|:----------:|:-----------------------------------------------|\n|`Ctrl+k`       | Global     | Show this reference                            |\n|`Ctrl+c`       | Global     | Toggle the debug console                       |\n|`Ctrl+d`       | Global     | Open the documentation                         |\n|`Ctrl+e`       | Global     | Toggle expansion of the sidebar                |\n|`Ctrl+enter`   | Console    | Apply changes to application state             |\n|`Ctrl+f`       | Pattern    | Open current pattern in new tab                |\n|`Ctrl+i`       | Global     | Toggle issue reportng helper                   |\n|`Ctrl+l`       | Pattern    | Toggle pattern rulers                          |\n|`Ctrl+o`       | Global     | Show/hide opacity indicators                   |\n|`Ctrl+r`       | Pattern    | Reload the current pattern                     |\n|`Ctrl+space`   | Global     | Toggle search focus                            |\n|`Ctrl+t`       | Global     | Reload the current pattern                     |\n|`Esc`          | Global     | Close everything that could be considered open |\n';

exports.default = ShortcutsLightbox;


function ShortcutsLightbox(props) {
	var buttons = [_react2.default.createElement(
		_reactRouter.Link,
		{
			key: '0',
			to: (0, _extends3.default)({}, props.location, {
				query: (0, _extends3.default)({}, props.location.query, {
					lightbox: false
				})
			}),
			title: 'Close this lightbox [esc]',
			className: 'button lightbox__button'
		},
		'Close'
	)];
	return _react2.default.createElement(
		_lightbox2.default,
		{
			title: 'Keyboard shortcuts',
			backdrop: true,
			buttons: buttons
		},
		_react2.default.createElement(_markdown2.default, {
			base: props.base,
			className: 'lightbox__instructions',
			source: source
		})
	);
}

ShortcutsLightbox.propTypes = {
	base: _react.PropTypes.string.isRequired,
	location: _react.PropTypes.shape({
		pathname: _react.PropTypes.string.isRequired,
		query: _react.PropTypes.object.isRequired
	})
};
module.exports = exports['default'];

},{"../../containers/markdown":470,"../lightbox":441,"babel-runtime/helpers/extends":23,"react":"react","react-router":"react-router"}],440:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _icon = require('../common/icon');

var _icon2 = _interopRequireDefault(_icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = Header;


function Header(props) {
	var to = { pathname: props.base, query: props.query };
	var enabledTo = {
		pathname: props.pathname,
		query: (0, _extends3.default)({}, props.query, {
			'menu-enabled': !props.menuEnabled
		})
	};

	return _react2.default.createElement(
		'header',
		{ className: 'main-header application__header' },
		_react2.default.createElement(
			_reactRouter.IndexLink,
			{
				to: to,
				title: 'Navigate to documentation [ctrl+d]',
				className: 'logo'
			},
			_react2.default.createElement(
				_icon2.default,
				{
					symbol: props.icon,
					fallback: false
				},
				props.title
			)
		),
		_react2.default.createElement(
			'div',
			{ className: 'toolbar' },
			_react2.default.createElement(
				_reactRouter.Link,
				{
					className: 'menu',
					to: enabledTo
				},
				_react2.default.createElement(
					_icon2.default,
					{
						base: props.base,
						symbol: 'patternplate',
						fallback: false
					},
					props.menuEnabled ? 'Disable Menu' : 'Enable Menu'
				)
			)
		)
	);
}

Header.propTypes = {
	base: _react.PropTypes.string.isRequired,
	icon: _react.PropTypes.string.isRequired,
	menuEnabled: _react.PropTypes.bool.isRequired,
	pathname: _react.PropTypes.string.isRequired,
	query: _react.PropTypes.object.isRequired,
	title: _react.PropTypes.string.isRequired,
	version: _react.PropTypes.string.isRequired
};
module.exports = exports['default'];

},{"../common/icon":424,"babel-runtime/helpers/extends":23,"react":"react","react-router":"react-router"}],441:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = Lightbox;


function Lightbox(props) {
	return _react2.default.createElement(
		"div",
		{ className: "lightbox" },
		props.backdrop && _react2.default.createElement("div", { className: "lightbox__backdrop" }),
		_react2.default.createElement(
			"div",
			{ className: "lightbox__container" },
			_react2.default.createElement(
				"div",
				{ className: "lightbox__title" },
				_react2.default.createElement(
					"h3",
					{ className: "h h3" },
					props.title
				)
			),
			_react2.default.createElement(
				"div",
				{ className: "lightbox__children" },
				props.children
			),
			_react2.default.createElement(
				"div",
				{ className: "lightbox__button-row" },
				props.buttons
			)
		)
	);
}

Lightbox.propTypes = {
	title: _react.PropTypes.string.isRequired,
	backdrop: _react.PropTypes.bool.isRequired,
	children: _react.PropTypes.any,
	buttons: _react.PropTypes.arrayOf(_react.PropTypes.element)
};
module.exports = exports['default'];

},{"react":"react"}],442:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _desc, _value, _class2, _class3, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _pureRenderDecorator = require('pure-render-decorator');

var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

var _navigationTree = require('./navigation-tree');

var _navigationTree2 = _interopRequireDefault(_navigationTree);

var _navigationItem = require('./navigation-item');

var _navigationItem2 = _interopRequireDefault(_navigationItem);

var _navigationToolbar = require('./navigation-toolbar');

var _navigationToolbar2 = _interopRequireDefault(_navigationToolbar);

var _searchField = require('../common/search-field');

var _searchField2 = _interopRequireDefault(_searchField);

var _header = require('../header');

var _header2 = _interopRequireDefault(_header);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	var desc = {};
	Object['ke' + 'ys'](descriptor).forEach(function (key) {
		desc[key] = descriptor[key];
	});
	desc.enumerable = !!desc.enumerable;
	desc.configurable = !!desc.configurable;

	if ('value' in desc || desc.initializer) {
		desc.writable = true;
	}

	desc = decorators.slice().reverse().reduce(function (desc, decorator) {
		return decorator(target, property, desc) || desc;
	}, desc);

	if (context && desc.initializer !== void 0) {
		desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
		desc.initializer = undefined;
	}

	if (desc.initializer === void 0) {
		Object['define' + 'Property'](target, property, desc);
		desc = null;
	}

	return desc;
}

var Navigation = (0, _pureRenderDecorator2.default)(_class = (_class2 = (_temp = _class3 = function (_React$Component) {
	(0, _inherits3.default)(Navigation, _React$Component);

	function Navigation() {
		(0, _classCallCheck3.default)(this, Navigation);
		return (0, _possibleConstructorReturn3.default)(this, (Navigation.__proto__ || (0, _getPrototypeOf2.default)(Navigation)).apply(this, arguments));
	}

	(0, _createClass3.default)(Navigation, [{
		key: 'handleSearchSubmit',
		value: function handleSearchSubmit(e) {
			e.preventDefault();
		}
	}, {
		key: 'handleSearchChange',
		value: function handleSearchChange(e) {
			this.props.onSearch(e.target.value);
		}
	}, {
		key: 'render',
		value: function render() {
			var props = this.props;


			var className = (0, _classnames2.default)('navigation application__navigation', {
				'slim': !props.expanded,
				'navigation--expanded': props.expanded
			});

			return _react2.default.createElement(
				'nav',
				{ className: className },
				_react2.default.createElement(_header2.default, {
					base: props.base,
					icon: props.icon,
					menuEnabled: props.menuEnabled,
					pathname: props.pathname,
					query: props.query,
					title: props.title,
					version: props.version
				}),
				_react2.default.createElement(
					_navigationTree2.default,
					{
						activePattern: props.activePattern,
						base: props.base,
						data: props.navigation,
						query: props.query,
						hierarchy: props.hierarchy
					},
					_react2.default.createElement(
						'form',
						{ onSubmit: this.handleSearchSubmit, method: 'GET' },
						_react2.default.createElement(_searchField2.default, {
							base: props.base,
							blur: this.props.requestSearchBlur,
							className: 'navigation__search-field',
							linkTo: '/search',
							name: 'search',
							onBlur: this.handleSearchBlur,
							onChange: this.handleSearchChange,
							onFocus: this.handleSearchFocus,
							placeholder: 'Search',
							title: 'Search for patterns [ctrl+space]',
							value: props.searchValue
						})
					),
					_react2.default.createElement(_navigationItem2.default, {
						active: props.pathname === props.base,
						base: props.base,
						key: 'root',
						linkTo: '/',
						name: 'Documentation',
						query: props.query,
						symbol: 'documentation',
						title: 'Navigate to documentation [ctrl+d]',
						type: 'page'
					})
				),
				_react2.default.createElement(_navigationToolbar2.default, {
					base: props.base,
					expanded: props.expanded,
					onThemeChange: props.onThemeChange,
					pathname: props.pathname,
					query: props.query,
					theme: props.theme
				})
			);
		}
	}]);
	return Navigation;
}(_react2.default.Component), _class3.propTypes = {
	activePattern: _react.PropTypes.string.isRequired,
	base: _react.PropTypes.string.isRequired,
	enabled: _react.PropTypes.bool.isRequired,
	expanded: _react.PropTypes.bool.isRequired,
	hierarchy: _react.PropTypes.object,
	icon: _react.PropTypes.string.isRequired,
	menuEnabled: _react.PropTypes.bool.isRequired,
	navigation: _react.PropTypes.object.isRequired,
	onSearch: _react.PropTypes.func,
	onSearchBlur: _react.PropTypes.func,
	onThemeChange: _react.PropTypes.func.isRequired,
	pathname: _react.PropTypes.string.isRequired,
	query: _react.PropTypes.object.isRequired,
	requestSearchBlur: _react.PropTypes.func.isRequired,
	searchQuery: _react.PropTypes.string,
	searchValue: _react.PropTypes.string,
	theme: _react.PropTypes.string.isRequired,
	title: _react.PropTypes.string.isRequired,
	version: _react.PropTypes.string.isRequired
}, _class3.defaultProps = {
	onSearch: function onSearch() {},
	onSearchBlur: function onSearchBlur() {},
	requestSearchBlur: function requestSearchBlur() {}
}, _temp), (_applyDecoratedDescriptor(_class2.prototype, 'handleSearchSubmit', [_autobindDecorator2.default], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, 'handleSearchSubmit'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'handleSearchChange', [_autobindDecorator2.default], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, 'handleSearchChange'), _class2.prototype)), _class2)) || _class;

exports.default = Navigation;
module.exports = exports['default'];

},{"../common/search-field":433,"../header":440,"./navigation-item":443,"./navigation-toolbar":445,"./navigation-tree":446,"autobind-decorator":"autobind-decorator","babel-runtime/core-js/object/get-own-property-descriptor":11,"babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"classnames":"classnames","pure-render-decorator":"pure-render-decorator","react":"react"}],443:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _desc, _value, _class, _class2, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _lodash = require('lodash');

var _icon = require('../common/icon');

var _icon2 = _interopRequireDefault(_icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	var desc = {};
	Object['ke' + 'ys'](descriptor).forEach(function (key) {
		desc[key] = descriptor[key];
	});
	desc.enumerable = !!desc.enumerable;
	desc.configurable = !!desc.configurable;

	if ('value' in desc || desc.initializer) {
		desc.writable = true;
	}

	desc = decorators.slice().reverse().reduce(function (desc, decorator) {
		return decorator(target, property, desc) || desc;
	}, desc);

	if (context && desc.initializer !== void 0) {
		desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
		desc.initializer = undefined;
	}

	if (desc.initializer === void 0) {
		Object['define' + 'Property'](target, property, desc);
		desc = null;
	}

	return desc;
}

function getPathName() {
	for (var _len = arguments.length, fragments = Array(_len), _key = 0; _key < _len; _key++) {
		fragments[_key] = arguments[_key];
	}

	var raw = fragments.join('/').split('/').filter(Boolean).map(function (fragment) {
		return fragment === '/' ? '' : fragment;
	}).filter(Boolean).join('/');
	var rawish = raw === '' ? '/' : raw;
	var pre = rawish[0] === '/' ? '' : '/';
	var post = rawish[rawish.length - 1] === '/' ? '' : '/';
	return '' + pre + rawish + post;
}

var NavigationItem = (_class = (_temp2 = _class2 = function (_React$Component) {
	(0, _inherits3.default)(NavigationItem, _React$Component);

	function NavigationItem() {
		var _ref;

		var _temp, _this, _ret;

		(0, _classCallCheck3.default)(this, NavigationItem);

		for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
			args[_key2] = arguments[_key2];
		}

		return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = NavigationItem.__proto__ || (0, _getPrototypeOf2.default)(NavigationItem)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'NavigationItem', _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	}

	(0, _createClass3.default)(NavigationItem, [{
		key: 'handleClick',
		value: function handleClick(e) {
			this.props.onClick(e, this);
		}
	}, {
		key: 'render',
		value: function render() {
			var props = this.props;
			var Component = props.component;


			var modifiers = {
				'child-active': props.active,
				'hidden': props.hidden,
				'anchored': props.anchored
			};

			var itemClassName = (0, _classnames2.default)('navigation-item navigation-item--' + props.type, modifiers);
			var linkClassName = (0, _classnames2.default)('navigation-link', modifiers);
			var pathname = getPathName(props.base, props.linkTo, props.id);
			var to = { pathname: pathname, query: (0, _lodash.omit)(props.query, ['menu-enabled']) };
			var title = props.title || 'Navigate to ' + props.name + ' ' + props.type;
			var symbol = props.active && props.symbol === 'folder' ? props.symbolActive : props.symbol;

			return _react2.default.createElement(
				Component,
				{ className: itemClassName },
				_react2.default.createElement(
					_reactRouter.Link,
					{
						onClick: this.handleClick,
						to: to,
						title: title,
						className: linkClassName
					},
					_react2.default.createElement(_icon2.default, { symbol: symbol }),
					_react2.default.createElement(
						'span',
						null,
						props.name
					)
				),
				props.active && props.children
			);
		}
	}]);
	return NavigationItem;
}(_react2.default.Component), _class2.propTypes = {
	base: _react.PropTypes.string.isRequired,
	component: _react.PropTypes.node,
	active: _react.PropTypes.bool,
	hidden: _react.PropTypes.bool,
	anchored: _react.PropTypes.bool,
	linkTo: _react.PropTypes.string,
	name: _react.PropTypes.string.isRequired,
	query: _react.PropTypes.object.isRequired,
	symbol: _react.PropTypes.string.isRequired,
	symbolActive: _react.PropTypes.string,
	searchQuery: _react.PropTypes.string,
	id: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
	children: _react.PropTypes.oneOfType([_react.PropTypes.node, _react.PropTypes.arrayOf(_react.PropTypes.node)]),
	onClick: _react.PropTypes.func,
	type: _react.PropTypes.string
}, _class2.defaultProps = {
	component: 'li',
	active: false,
	hidden: false,
	linkTo: 'pattern',
	onClick: function onClick() {}
}, _temp2), (_applyDecoratedDescriptor(_class.prototype, 'handleClick', [_autobindDecorator2.default], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'handleClick'), _class.prototype)), _class);
exports.default = NavigationItem;
module.exports = exports['default'];

},{"../common/icon":424,"autobind-decorator":"autobind-decorator","babel-runtime/core-js/object/get-own-property-descriptor":11,"babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"classnames":"classnames","lodash":"lodash","react":"react","react-router":"react-router"}],444:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.default = NavigationToggle;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon = require('../common/icon');

var _icon2 = _interopRequireDefault(_icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function NavigationToggle(props) {
	var iconClassName = (0, _classnames2.default)({
		'icon--mirrored': props.expanded
	});

	return _react2.default.createElement(
		_reactRouter.Link,
		{
			to: {
				pathname: props.pathname,
				query: (0, _extends3.default)({}, props.query, { expanded: !props.expanded })
			},
			className: 'toggleMode',
			title: props.expanded ? 'Collapse navigation [ctrl+e]' : 'Expand navigation [ctrl+e]'
		},
		_react2.default.createElement(_icon2.default, { base: props.base, className: iconClassName, symbol: 'arrow-double-right' })
	);
}

NavigationToggle.propTypes = {
	base: _react.PropTypes.string.isRequired,
	expanded: _react.PropTypes.bool.isRequired,
	pathname: _react.PropTypes.string.isRequired,
	query: _react.PropTypes.object.isRequired
};
module.exports = exports['default'];

},{"../common/icon":424,"babel-runtime/helpers/extends":23,"classnames":"classnames","react":"react","react-router":"react-router"}],445:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.default = NavigationToolbar;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _icon = require('../common/icon');

var _icon2 = _interopRequireDefault(_icon);

var _navigationToggle = require('./navigation-toggle');

var _navigationToggle2 = _interopRequireDefault(_navigationToggle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function NavigationToolbar(props) {
	// const {data} = props;
	var issue = {
		pathname: props.pathname,
		query: (0, _extends3.default)({}, props.query, {
			issue: true
		})
	};

	var cheatsheet = {
		pathname: props.pathname,
		query: (0, _extends3.default)({}, props.query, {
			lightbox: 'shortcuts'
		})
	};

	var targetTheme = props.theme === 'dark' ? 'light' : 'dark';
	var handleThemeChange = function handleThemeChange() {
		return props.onThemeChange(targetTheme);
	};

	var styles = {
		light: { display: targetTheme === 'light' ? 'block' : 'none' },
		dark: { display: targetTheme === 'dark' ? 'block' : 'none' }
	};

	return _react2.default.createElement(
		'div',
		{ className: 'navigation-toolbar' },
		_react2.default.createElement(
			'div',
			{ className: 'navigation-toolbar__container' },
			_react2.default.createElement(
				'ul',
				{ className: 'navigation-toolbar__links' },
				_react2.default.createElement(
					'li',
					{ className: 'navigation-toolbar__link' },
					_react2.default.createElement(
						_reactRouter.Link,
						{
							className: 'button',
							title: 'Report an issue [ctrl+i]',
							to: issue
						},
						_react2.default.createElement(_icon2.default, { symbol: 'issue' })
					)
				),
				_react2.default.createElement(
					'li',
					{ className: 'navigation-toolbar__link' },
					_react2.default.createElement(
						_reactRouter.Link,
						{
							className: 'button',
							title: 'Show keyboard shortcuts [ctrl+k]',
							to: cheatsheet
						},
						_react2.default.createElement(_icon2.default, { symbol: 'command' })
					)
				),
				_react2.default.createElement(
					'li',
					{ className: 'navigation-toolbar__link' },
					_react2.default.createElement(
						'button',
						{
							className: 'button',
							type: 'button',
							onClick: handleThemeChange,
							title: 'Switch to ' + targetTheme + ' theme [ctrl+t]'
						},
						_react2.default.createElement(
							_icon2.default,
							{
								base: props.base,
								symbol: 'light',
								style: styles.light
							},
							'Light'
						),
						_react2.default.createElement(
							_icon2.default,
							{
								base: props.base,
								symbol: 'dark',
								style: styles.dark
							},
							'Dark'
						)
					)
				)
			)
		),
		_react2.default.createElement(
			'div',
			{ className: 'navigation-toolbar__action' },
			_react2.default.createElement(_navigationToggle2.default, {
				base: props.base,
				expanded: props.expanded,
				pathname: props.pathname,
				query: props.query
			})
		)
	);
}

NavigationToolbar.propTypes = {
	base: _react.PropTypes.string.isRequired,
	children: _react.PropTypes.any,
	expanded: _react.PropTypes.bool.isRequired,
	onThemeChange: _react.PropTypes.func.isRequired,
	pathname: _react.PropTypes.string.isRequired,
	query: _react.PropTypes.object.isRequired,
	theme: _react.PropTypes.string.isRequired
};
module.exports = exports['default'];

},{"../common/icon":424,"./navigation-toggle":444,"babel-runtime/helpers/extends":23,"react":"react","react-router":"react-router"}],446:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _class2, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _pureRenderDecorator = require('pure-render-decorator');

var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

var _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _navigationItem = require('./navigation-item');

var _navigationItem2 = _interopRequireDefault(_navigationItem);

var _augmentHierarchy = require('../../utils/augment-hierarchy');

var _augmentHierarchy2 = _interopRequireDefault(_augmentHierarchy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NavigationTree = (0, _pureRenderDecorator2.default)(_class = (_temp2 = _class2 = function (_Component) {
	(0, _inherits3.default)(NavigationTree, _Component);

	function NavigationTree() {
		var _ref;

		var _temp, _this, _ret;

		(0, _classCallCheck3.default)(this, NavigationTree);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = NavigationTree.__proto__ || (0, _getPrototypeOf2.default)(NavigationTree)).call.apply(_ref, [this].concat(args))), _this), _this.displayName = 'NavigationTree', _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	}

	(0, _createClass3.default)(NavigationTree, [{
		key: 'render',
		value: function render() {
			var _this2 = this;

			var props = this.props;

			var _getAugmentedChildren = (0, _augmentHierarchy2.default)(props.data, props.hierarchy);

			var folders = _getAugmentedChildren.folders;
			var patterns = _getAugmentedChildren.patterns;


			return _react2.default.createElement(
				_reactAddonsCssTransitionGroup2.default,
				{
					component: 'ul',
					className: 'navigation-tree',
					transitionName: 'pattern-content-transition',
					transitionEnterTimeout: 300,
					transitionLeaveTimeout: 300
				},
				props.children,
				folders.map(function (folder) {
					var active = props.activePattern.startsWith(folder.id);

					return _react2.default.createElement(
						_navigationItem2.default,
						{
							active: active || folder.expanded,
							base: props.base,
							id: folder.id,
							key: folder.id,
							name: folder.displayName,
							onClick: _this2.handleFolderClick,
							query: props.query,
							searchQuery: props.searchQuery,
							symbol: folder.icon,
							symbolActive: folder.iconActive,
							type: 'directory'
						},
						_react2.default.createElement(NavigationTree, {
							activePattern: props.activePattern,
							base: props.base,
							data: folder.children,
							hierarchy: props.hierarchy,
							id: folder.id,
							query: props.query,
							searchQuery: props.searchQuery
						})
					);
				}),
				patterns.map(function (pattern) {
					var displayName = pattern.displayName;
					var expanded = pattern.expanded;
					var type = pattern.type;
					var manifest = pattern.manifest;
					var _manifest$options = manifest.options;
					var options = _manifest$options === undefined ? {} : _manifest$options;
					var _options$hidden = options.hidden;
					var hidden = _options$hidden === undefined ? false : _options$hidden;


					return _react2.default.createElement(_navigationItem2.default, {
						active: props.activePattern === pattern.id || expanded,
						base: props.base,
						hidden: hidden,
						id: pattern.id,
						key: pattern.id,
						name: displayName,
						query: props.query,
						ref: _this2.getActiveReference,
						searchQuery: props.searchQuery,
						symbol: type,
						type: type
					});
				})
			);
		}
	}]);
	return NavigationTree;
}(_react.Component), _class2.propTypes = {
	id: _react.PropTypes.string,
	activePattern: _react.PropTypes.string,
	base: _react.PropTypes.string.isRequired,
	data: _react.PropTypes.object,
	query: _react.PropTypes.object.isRequired,
	searchQuery: _react.PropTypes.string,
	children: _react.PropTypes.oneOfType([_react.PropTypes.node, _react.PropTypes.arrayOf(_react.PropTypes.node)]),
	config: _react.PropTypes.object,
	hierarchy: _react.PropTypes.object
}, _temp2)) || _class;

exports.default = NavigationTree;
module.exports = exports['default'];

},{"../../utils/augment-hierarchy":505,"./navigation-item":443,"babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"pure-render-decorator":"pure-render-decorator","react":"react","react-addons-css-transition-group":"react-addons-css-transition-group"}],447:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.default = BlockColumn;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _block = require('./block');

var _block2 = _interopRequireDefault(_block);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BlockColumn(props) {
	var activeBlock = props.activeBlock;
	var align = props.align;
	var base = props.base;
	var items = props.items;
	var x = props.x;
	var y = props.y;
	var location = props.location;
	var connect = props.connect;
	var height = props.height;
	var onClick = props.onClick;
	var onMouseEnter = props.onMouseEnter;
	var onMouseLeave = props.onMouseLeave;


	return _react2.default.createElement(
		'g',
		null,
		items.map(function (_ref, index) {
			var name = _ref.name;
			var id = _ref.id;
			var localName = _ref.localName;

			var label = [name, localName].join('');
			var width = Math.max(5, label.length * 0.8);
			var offset = align === 'right' ? width + 1 : 0;
			var n = (50 - width) / 3;
			var key = [id, name, localName].filter(Boolean).join(':');

			return _react2.default.createElement(_block2.default, {
				active: activeBlock === key,
				type: 'block',
				base: base,
				id: id,
				blockId: key,
				name: name,
				x: x - offset,
				key: key,
				y: y + index * (height + 1),
				width: width,
				height: height,
				connect: (0, _extends3.default)({}, connect, { n: n }),
				onClick: onClick,
				onMouseEnter: onMouseEnter,
				onMouseLeave: onMouseLeave,
				location: location
			});
		}),
		items.map(function (_ref2, index) {
			var name = _ref2.name;
			var localName = _ref2.localName;
			var id = _ref2.id;

			var label = [name, localName].join('');
			var text = align === 'right' ? localName : id;
			var width = Math.max(5, label.length * 0.8);
			var labelWidth = Math.max(4, text.length * 0.6);
			var key = [id, name, localName].filter(Boolean).join(':');
			var labelX = align === 'right' ? x - width : x + width;
			var offset = align === 'right' ? 1 : 0;
			return _react2.default.createElement(Label, {
				active: activeBlock === key,
				align: align,
				key: key,
				width: labelWidth,
				height: 1.4,
				x: labelX - offset,
				y: y + index * (height + 1) + height / 2 - 0.7,
				text: text
			});
		}),
		items.map(function (item) {
			var labelAlign = align === 'left' ? 'right' : 'left';
			var text = align === 'right' ? item.id : item.localName;
			var key = [item.id, item.name, item.localName].filter(Boolean).join(':');
			var labelWidth = Math.max(4, text.length * 0.6);

			return _react2.default.createElement(Label, {
				active: activeBlock === key,
				align: labelAlign,
				key: key,
				text: text,
				width: labelWidth,
				height: 1.4,
				x: connect.x,
				y: connect.y - 0.7
			});
		})
	);
}

BlockColumn.propTypes = {
	base: _react.PropTypes.string.isRequired,
	items: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		name: _react.PropTypes.string.isRequired,
		id: _react.PropTypes.string.isRequired
	})).isRequired,
	x: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]).isRequired,
	y: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]).isRequired,
	onClick: _react.PropTypes.func.isRequired,
	align: _react.PropTypes.oneOf(['left', 'right']).isRequired,
	prefix: _react.PropTypes.string,
	location: _react.PropTypes.shape({
		pathname: _react.PropTypes.string,
		query: _react.PropTypes.any
	}),
	connect: _react.PropTypes.shape({
		x: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]).isRequired,
		y: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]).isRequired
	}).isRequired,
	description: _react.PropTypes.string,
	height: _react.PropTypes.number
};

BlockColumn.defaultProps = {
	items: [],
	y: 0,
	onClick: function onClick() {},
	align: 'left',
	description: ''
};

function Label(props) {
	if (!props.text) {
		return null;
	}

	var x = props.align === 'right' ? props.x - props.width : props.x;
	var className = (0, _classnames2.default)('label', {
		'label--active': props.active
	});

	return _react2.default.createElement(
		'g',
		{ className: className },
		_react2.default.createElement('circle', {
			className: 'label__circle',
			cx: x + props.width,
			cy: props.y + props.height / 2,
			r: 0.7
		}),
		_react2.default.createElement('circle', {
			className: 'label__circle',
			cx: x,
			cy: props.y + props.height / 2,
			r: 0.7
		}),
		_react2.default.createElement('rect', {
			height: props.height,
			width: props.width,
			x: x,
			y: props.y,
			className: 'label__container'
		}),
		_react2.default.createElement(
			'text',
			{
				x: x + props.width / 2,
				y: props.y - 0.175 + props.height / 2,
				className: 'label__text' },
			props.text
		)
	);
}
module.exports = exports['default'];

},{"./block":448,"babel-runtime/helpers/extends":23,"classnames":"classnames","react":"react"}],448:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _connection = require('./connection');

var _connection2 = _interopRequireDefault(_connection);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Block = (0, _autobindDecorator2.default)(_class = (_temp = _class2 = function (_Component) {
	(0, _inherits3.default)(Block, _Component);

	function Block() {
		(0, _classCallCheck3.default)(this, Block);
		return (0, _possibleConstructorReturn3.default)(this, (Block.__proto__ || (0, _getPrototypeOf2.default)(Block)).apply(this, arguments));
	}

	(0, _createClass3.default)(Block, [{
		key: 'handleClick',
		value: function handleClick(e) {
			e.preventDefault();
			this.props.onClick(this.props);
		}
	}, {
		key: 'render',
		value: function render() {
			var props = this.props;
			var location = props.location;
			var base = props.base;

			var className = 'pattern-dependencies__' + props.type;
			var orientation = props.x < 50 ? 1 : 0;

			var onMouseEnter = function onMouseEnter() {
				return props.onMouseEnter(props.blockId);
			};
			var onMouseLeave = function onMouseLeave() {
				return props.onMouseLeave(props.blockId);
			};

			var block = {
				x: props.x + props.width * orientation,
				y: props.y + props.height / 2
			};

			var target = props.connect;

			var from = orientation === 1 ? block : target;
			var to = orientation === 1 ? target : block;

			var textX = props.type === 'root' ? 50 : props.x + props.width / 2;
			var textY = props.y + props.height / 2;

			var href = [base + 'pattern/' + props.id, _querystring2.default.stringify(location.query)].join('?');

			return _react2.default.createElement(
				'g',
				{ className: 'block-group', onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave },
				_react2.default.createElement(
					'a',
					{ xlinkHref: href, className: className },
					_react2.default.createElement('rect', {
						className: className,
						x: props.x,
						y: props.y,
						width: props.width,
						height: props.height,
						onClick: this.handleClick
					})
				),
				props.connect && _react2.default.createElement(_connection2.default, {
					labels: [props.id, props.localName],
					from: from,
					to: to,
					n: target.n || 20
				}),
				props.name && _react2.default.createElement(
					'a',
					{ xlinkHref: href },
					_react2.default.createElement(
						'text',
						{
							x: textX,
							y: textY,
							width: props.width,
							height: props.height,
							className: 'block-name'
						},
						props.name
					)
				)
			);
		}
	}]);
	return Block;
}(_react.Component), _class2.propTypes = {
	base: _react.PropTypes.string.isRequired,
	name: _react.PropTypes.string.isRequired,
	id: _react.PropTypes.string.isRequired,
	type: _react.PropTypes.string.isRequired,
	x: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]).isRequired,
	y: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]).isRequired,
	width: _react.PropTypes.number.isRequired,
	height: _react.PropTypes.number.isRequired,
	connect: _react.PropTypes.shape({
		x: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]).isRequired,
		y: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]).isRequired,
		n: _react.PropTypes.number
	}),
	onClick: _react.PropTypes.func.isRequired,
	location: _react.PropTypes.shape({
		pathname: _react.PropTypes.string,
		query: _react.PropTypes.any
	}).isRequired
}, _class2.defaultProps = {
	type: 'block',
	width: 8,
	height: 8,
	onClick: function onClick() {},
	onMouseEnter: function onMouseEnter() {},
	onMouseLeave: function onMouseLeave() {}
}, _temp)) || _class;

exports.default = Block;
module.exports = exports['default'];

},{"./connection":449,"autobind-decorator":"autobind-decorator","babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"querystring":213,"react":"react"}],449:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = Connection;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PointShape = _react.PropTypes.shape({
	x: _react.PropTypes.number.isRequired,
	y: _react.PropTypes.number.isRequired
});

function spline(a, b) {
	var n = arguments.length <= 2 || arguments[2] === undefined ? 25 : arguments[2];

	return "M" + a.x + "," + a.y + " C" + (a.x + n) + "," + a.y + " " + (b.x - n) + "," + b.y + " " + b.x + "," + b.y;
}

function Connection(_ref) {
	var from = _ref.from;
	var to = _ref.to;
	var n = _ref.n;

	var d = spline(from, to, n);
	return _react2.default.createElement(
		"g",
		{ className: "connection-group" },
		_react2.default.createElement("circle", { className: "connector", cx: from.x, cy: from.y, r: 0.7 }),
		_react2.default.createElement("path", { className: "connection", d: d }),
		_react2.default.createElement("circle", { className: "connector", cx: to.x, cy: to.y, r: 0.7 })
	);
}

Connection.propTypes = {
	from: PointShape,
	to: PointShape,
	n: _react.PropTypes.number
};

function Label(props) {
	if (!props.text) {
		return null;
	}

	var align = props.align;
	var height = props.height;
	var text = props.text;
	var y = props.y;

	var width = text.length * 0.7;
	var x = align === 'left' ? props.x : props.x - width;

	return _react2.default.createElement(
		"g",
		{ className: "label" },
		_react2.default.createElement("rect", { className: "label__container", x: x, y: y - height / 2, height: height, width: width }),
		_react2.default.createElement(
			"text",
			{ className: "label__text", x: x + width / 2, y: y },
			text
		)
	);
}
module.exports = exports['default'];

},{"react":"react"}],450:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _patternDemo = require('./pattern-demo');

var _patternDemo2 = _interopRequireDefault(_patternDemo);

var _patternHeader = require('./pattern-header');

var _patternHeader2 = _interopRequireDefault(_patternHeader);

var _patternToolbar = require('./pattern-toolbar');

var _patternToolbar2 = _interopRequireDefault(_patternToolbar);

var _unwrap = require('../../utils/unwrap');

var _unwrap2 = _interopRequireDefault(_unwrap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = Pattern;


function Pattern(props) {
	var onReloadClick = props.reload;

	var onConcernChange = (0, _unwrap2.default)(props.onConcernChange, 'target.value');
	var onEnvironmentChange = (0, _unwrap2.default)(props.onEnvironmentChange, 'target.value');
	var onTypeChange = (0, _unwrap2.default)(props.onTypeChange, 'target.value');

	return _react2.default.createElement(
		'div',
		{ className: 'pattern' },
		_react2.default.createElement(_patternHeader2.default, {
			automount: props.automount,
			base: props.base,
			breadcrumbs: props.breadcrumbs,
			environment: props.environment,
			errored: props.errored,
			flag: props.flag,
			id: props.id,
			loading: props.loading,
			location: props.location,
			name: props.name,
			opacity: props.opacity,
			onReloadClick: onReloadClick,
			reloadTime: props.reloadTime,
			reloadedTime: props.reloadedTime,
			rulers: props.rulers,
			tags: props.tags,
			version: props.version
		}),
		_react2.default.createElement(_patternDemo2.default, {
			base: props.base,
			contentHeight: props.demoContentHeight,
			contentWidth: props.demoContentWidth,
			environment: props.environment,
			height: props.demoHeight,
			loading: props.loading,
			onError: props.onDemoError,
			onReady: props.onDemoReady,
			onResize: props.onDemoContentResize,
			onScroll: props.onDemoScroll,
			opacity: props.opacity,
			reloadTime: props.reloadTime,
			resizeable: props.rulers,
			resize: props.resize,
			rulers: props.rulers,
			rulerX: props.rulerX,
			rulerY: props.rulerY,
			rulerLengthX: props.rulerLengthX,
			rulerLengthY: props.rulerLengthY,
			target: props.id,
			width: props.demoWidth
		}),
		_react2.default.createElement(_patternToolbar2.default, {
			activeSource: props.activeSource,
			base: props.base,
			code: props.code,
			dependencies: props.dependencies,
			dependents: props.dependents,
			environment: props.environment,
			environments: props.environments,
			id: props.id,
			loading: props.loading,
			location: props.location,
			name: props.name,
			onConcernChange: onConcernChange,
			onEnvironmentChange: onEnvironmentChange,
			onFileRequest: props.onFileRequest,
			onTypeChange: onTypeChange,
			expanded: props.sourceExpanded
		})
	);
}

Pattern.propTypes = {
	automount: _react.PropTypes.bool.isRequired,
	activeSource: _react.PropTypes.string.isRequired,
	base: _react.PropTypes.string.isRequired,
	breadcrumbs: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		id: _react.PropTypes.string.isRequired,
		name: _react.PropTypes.string.isRequired,
		target: _react.PropTypes.shape({
			pathname: _react.PropTypes.string.isRequired,
			query: _react.PropTypes.object.isRequired
		}).isRequired
	})),
	code: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		active: _react.PropTypes.bool.isRequired,
		extname: _react.PropTypes.string.isRequired,
		concern: _react.PropTypes.string.isRequired,
		concerns: _react.PropTypes.arrayOf(_react.PropTypes.string).isRequired,
		id: _react.PropTypes.string.isRequired,
		language: _react.PropTypes.string.isRequired,
		name: _react.PropTypes.string.isRequired,
		source: _react.PropTypes.string,
		type: _react.PropTypes.string,
		types: _react.PropTypes.arrayOf(_react.PropTypes.string).isRequired
	})).isRequired,
	demoContentWidth: _react.PropTypes.number.isRequired,
	demoContentHeight: _react.PropTypes.number.isRequired,
	demoWidth: _react.PropTypes.number,
	demoHeight: _react.PropTypes.number,
	dependencies: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		id: _react.PropTypes.string.isRequired,
		name: _react.PropTypes.string.isRequired,
		localName: _react.PropTypes.string.isRequired
	})).isRequired,
	dependents: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		id: _react.PropTypes.string.isRequired,
		name: _react.PropTypes.string.isRequired
	})).isRequired,
	environment: _react.PropTypes.string.isRequired,
	environments: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		id: _react.PropTypes.string.isRequired,
		name: _react.PropTypes.string.isRequired
	})).isRequired,
	errored: _react.PropTypes.bool.isRequired,
	flag: _react.PropTypes.string,
	id: _react.PropTypes.string.isRequired,
	loading: _react.PropTypes.bool.isRequired,
	location: _react.PropTypes.shape({
		pathname: _react.PropTypes.string.isRequired,
		query: _react.PropTypes.object.isRequired
	}).isRequired,
	name: _react.PropTypes.string.isRequired,
	onDemoContentResize: _react.PropTypes.func.isRequired,
	onDemoError: _react.PropTypes.func.isRequired,
	onDemoReady: _react.PropTypes.func.isRequired,
	onDemoScroll: _react.PropTypes.func.isRequired,
	onEnvironmentChange: _react.PropTypes.func.isRequired,
	onConcernChange: _react.PropTypes.func.isRequired,
	onFileRequest: _react.PropTypes.func.isRequired,
	onTypeChange: _react.PropTypes.func.isRequired,
	opacity: _react.PropTypes.bool.isRequired,
	reload: _react.PropTypes.func.isRequired,
	reloadTime: _react.PropTypes.number,
	reloadedTime: _react.PropTypes.number,
	resize: _react.PropTypes.func.isRequired,
	rulers: _react.PropTypes.bool.isRequired,
	rulerX: _react.PropTypes.number.isRequired,
	rulerY: _react.PropTypes.number.isRequired,
	rulerLengthX: _react.PropTypes.number.isRequired,
	rulerLengthY: _react.PropTypes.number.isRequired,
	tags: _react.PropTypes.arrayOf(_react.PropTypes.string).isRequired,
	version: _react.PropTypes.string,
	sourceExpanded: _react.PropTypes.bool
};
module.exports = exports['default'];

},{"../../utils/unwrap":509,"./pattern-demo":453,"./pattern-header":457,"./pattern-toolbar":464,"react":"react"}],451:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _class2, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _prettyData = require('pretty-data');

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _pureRenderDecorator = require('pure-render-decorator');

var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

var _code = require('../common/code');

var _code2 = _interopRequireDefault(_code);

var _select = require('../common/select');

var _select2 = _interopRequireDefault(_select);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PatternCode = (0, _pureRenderDecorator2.default)(_class = (0, _autobindDecorator2.default)(_class = (_temp2 = _class2 = function (_React$Component) {
	(0, _inherits3.default)(PatternCode, _React$Component);

	function PatternCode() {
		var _ref;

		var _temp, _this, _ret;

		(0, _classCallCheck3.default)(this, PatternCode);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = PatternCode.__proto__ || (0, _getPrototypeOf2.default)(PatternCode)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
			copying: false
		}, _this.timeout = null, _this.idle = null, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	}

	(0, _createClass3.default)(PatternCode, [{
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			if (this.timeout) {
				global.clearTimeout(this.timeout);
			}
		}
	}, {
		key: 'saveReference',
		value: function saveReference(ref) {
			this.ref = ref;
		}
	}, {
		key: 'handleCopyClick',
		value: function handleCopyClick() {
			var _this2 = this;

			if (this.ref && !this.state.copying) {
				this.ref.focus();
				this.ref.select();
				global.document.execCommand('copy');
				this.setState((0, _extends3.default)({}, this.state, {
					copying: true
				}));
				this.timeout = setTimeout(function () {
					_this2.setState((0, _extends3.default)({}, _this2.state, {
						copying: false
					}));
				}, 3000);
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var props = this.props;

			var prettify = props.highlight && props.format === 'html';
			var source = prettify ? _prettyData.pd.xml(props.source) : props.source;
			var copying = this.state.copying;


			var concern = {
				value: props.concern,
				name: '' + props.concern + props.extname
			};

			var concerns = this.props.concerns.map(function (concern) {
				return { name: '' + concern + props.extname, value: concern };
			});

			var type = {
				value: this.props.type,
				name: this.props.type
			};

			var types = this.props.types.map(function (type) {
				return { name: type, value: type };
			});

			return _react2.default.createElement(
				'div',
				{ className: 'pattern-code' },
				_react2.default.createElement(
					'div',
					{ className: 'pattern-code__toolbar' },
					_react2.default.createElement(
						'div',
						{ className: 'pattern-code__name' },
						concerns.length > 1 ? _react2.default.createElement(_select2.default, {
							base: props.base,
							className: 'pattern-code__concern',
							options: concerns,
							onChange: props.onConcernChange,
							value: concern
						}) : _react2.default.createElement(
							'span',
							{ className: 'pattern-code__concern' },
							concern.name
						),
						types.length > 1 ? _react2.default.createElement(_select2.default, {
							base: props.base,
							className: 'pattern-code__type',
							options: types,
							onChange: props.onTypeChange,
							value: type
						}) : _react2.default.createElement(
							'span',
							{ className: 'pattern-code__type' },
							type.name
						)
					),
					_react2.default.createElement(
						'div',
						{ className: 'pattern-code__tools' },
						props.copy && _react2.default.createElement(
							'button',
							{ type: 'button', onClick: this.handleCopyClick },
							copying ? 'Copied!' : 'Copy to clipboard'
						)
					)
				),
				_react2.default.createElement(
					'div',
					{ className: 'pattern-code__content' },
					_react2.default.createElement(
						'pre',
						null,
						_react2.default.createElement(
							_code2.default,
							{
								highlights: props.highlights,
								highlight: props.requestHighlight,
								language: props.format
							},
							source
						)
					),
					_react2.default.createElement('textarea', {
						className: 'clipboard',
						value: source,
						ref: this.saveReference,
						readOnly: true
					})
				)
			);
		}
	}]);
	return PatternCode;
}(_react2.default.Component), _class2.propTypes = {
	base: _react.PropTypes.string.isRequired,
	concern: _react.PropTypes.string.isRequired,
	concerns: _react.PropTypes.arrayOf(_react.PropTypes.string).isRequired,
	copy: _react.PropTypes.bool,
	extname: _react.PropTypes.string.isRequired,
	format: _react.PropTypes.string.isRequired,
	id: _react.PropTypes.string,
	name: _react.PropTypes.string.isRequired,
	onConcernChange: _react.PropTypes.func.isRequired,
	onTypeChange: _react.PropTypes.func.isRequired,
	source: _react.PropTypes.string.isRequired,
	type: _react.PropTypes.string.isRequired,
	types: _react.PropTypes.arrayOf(_react.PropTypes.string).isRequired
}, _class2.defaultProps = {
	// format: 'html',
	highlight: true,
	copy: true
}, _temp2)) || _class) || _class;

exports.default = PatternCode;
module.exports = exports['default'];

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../common/code":413,"../common/select":434,"autobind-decorator":"autobind-decorator","babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/extends":23,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"pretty-data":208,"pure-render-decorator":"pure-render-decorator","react":"react"}],452:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends4 = require('babel-runtime/helpers/extends');

var _extends5 = _interopRequireDefault(_extends4);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _pureRenderDecorator = require('pure-render-decorator');

var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PatternControl = (0, _pureRenderDecorator2.default)(_class = (0, _autobindDecorator2.default)(_class = (_temp = _class2 = function (_Component) {
	(0, _inherits3.default)(PatternControl, _Component);

	function PatternControl() {
		(0, _classCallCheck3.default)(this, PatternControl);
		return (0, _possibleConstructorReturn3.default)(this, (PatternControl.__proto__ || (0, _getPrototypeOf2.default)(PatternControl)).apply(this, arguments));
	}

	(0, _createClass3.default)(PatternControl, [{
		key: 'handleClick',
		value: function handleClick(e) {
			e.preventDefault();
			var _props = this.props;
			var active = _props.active;
			var expand = _props.expand;
			var location = _props.location;
			var shortid = _props.shortid;

			var source = active ? null : shortid;
			var route = {
				pathname: location.pathname,
				query: (0, _extends5.default)({}, location.query, (0, _defineProperty3.default)({
					source: source
				}, 'source-expanded', expand))
			};
			this.context.router.replace(route);
		}
	}, {
		key: 'render',
		value: function render() {
			var props = this.props;
			var active = props.active;
			var location = props.location;

			var className = (0, _classnames2.default)('pattern-control', { active: active });
			var source = props.active ? null : props.shortid;

			var to = {
				pathname: location.pathname,
				query: (0, _extends5.default)({}, location.query, (0, _defineProperty3.default)({
					source: source
				}, 'source-expanded', props.expand))
			};

			return _react2.default.createElement(
				_reactRouter.Link,
				{
					to: to,
					className: className,
					disabled: props.disabled,
					onClick: this.handleClick,
					title: props.title
				},
				props.children || props.name
			);
		}
	}]);
	return PatternControl;
}(_react.Component), _class2.propTypes = {
	active: _react.PropTypes.bool.isRequired,
	base: _react.PropTypes.string.isRequired,
	children: _react.PropTypes.any,
	disabled: _react.PropTypes.bool,
	expand: _react.PropTypes.bool,
	iconDescription: _react.PropTypes.string,
	location: _react.PropTypes.object.isRequired,
	name: _react.PropTypes.any.isRequired,
	shortid: _react.PropTypes.string.isRequired,
	title: _react.PropTypes.string
}, _class2.contextTypes = {
	router: _react.PropTypes.any
}, _temp)) || _class) || _class;

exports.default = PatternControl;
module.exports = exports['default'];

},{"autobind-decorator":"autobind-decorator","babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/defineProperty":22,"babel-runtime/helpers/extends":23,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"classnames":"classnames","pure-render-decorator":"pure-render-decorator","react":"react","react-router":"react-router"}],453:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _queryString = require('query-string');

var _queryString2 = _interopRequireDefault(_queryString);

var _urlQuery = require('../../utils/url-query');

var _urlQuery2 = _interopRequireDefault(_urlQuery);

var _frame = require('../common/frame');

var _frame2 = _interopRequireDefault(_frame);

var _patternRuler = require('./pattern-ruler');

var _patternRuler2 = _interopRequireDefault(_patternRuler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function PatternDemo(props) {
	var source = _urlQuery2.default.format({
		pathname: props.base + 'demo/' + props.target + '/index.html',
		query: { environment: props.environment }
	});

	var query = _queryString2.default.stringify({
		'reload-time': props.reloadTime
	});

	var src = [source, query].filter(Boolean).join('?');
	var className = (0, _classnames2.default)('pattern-demo-container', {
		'pattern-demo-container--opacity': props.opacity
	});
	var demoClassName = (0, _classnames2.default)('pattern-demo', {
		'pattern-demo--resizable': props.resizeable
	});

	return _react2.default.createElement(
		'div',
		{ className: className },
		props.rulers && _react2.default.createElement(
			'div',
			{ className: 'rulers' },
			_react2.default.createElement(_patternRuler2.default, {
				type: 'vertical',
				step: 10,
				length: props.rulerLengthY,
				markers: [props.height],
				offset: props.rulerY
			}),
			_react2.default.createElement(_patternRuler2.default, {
				type: 'horizontal',
				step: 10,
				length: props.rulerLengthX,
				markers: [props.width],
				offset: props.rulerX
			})
		),
		_react2.default.createElement(_frame2.default, {
			className: demoClassName,
			id: source,
			height: props.height,
			onLoad: props.onReady,
			onError: props.onError,
			onScroll: props.onScroll,
			onResize: props.onResize,
			resizeable: props.rulers,
			resize: props.resize,
			src: src,
			width: props.width
		})
	);
}

PatternDemo.propTypes = {
	base: _react.PropTypes.string.isRequired,
	environment: _react.PropTypes.string.isRequired,
	height: _react.PropTypes.number,
	onError: _react.PropTypes.func.isRequired,
	onReady: _react.PropTypes.func.isRequired,
	onResize: _react.PropTypes.func.isRequired,
	onScroll: _react.PropTypes.func.isRequired,
	opacity: _react.PropTypes.bool.isRequired,
	loading: _react.PropTypes.bool.isRequired,
	reloadTime: _react.PropTypes.number,
	resizeable: _react.PropTypes.bool.isRequired,
	resize: _react.PropTypes.func.isRequired,
	rulers: _react.PropTypes.bool.isRequired,
	rulerX: _react.PropTypes.number.isRequired,
	rulerLengthX: _react.PropTypes.number.isRequired,
	rulerY: _react.PropTypes.number.isRequired,
	rulerLengthY: _react.PropTypes.number.isRequired,
	target: _react.PropTypes.string.isRequired,
	width: _react.PropTypes.number
};

exports.default = PatternDemo;
module.exports = exports['default'];

},{"../../utils/url-query":510,"../common/frame":421,"./pattern-ruler":458,"classnames":"classnames","query-string":210,"react":"react"}],454:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _markBlock = require('../../actions/mark-block');

var _markBlock2 = _interopRequireDefault(_markBlock);

var _block = require('./block');

var _block2 = _interopRequireDefault(_block);

var _blockColumn = require('./block-column');

var _blockColumn2 = _interopRequireDefault(_blockColumn);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PatternDependencies = (0, _autobindDecorator2.default)(_class = (_temp = _class2 = function (_Component) {
	(0, _inherits3.default)(PatternDependencies, _Component);

	function PatternDependencies() {
		(0, _classCallCheck3.default)(this, PatternDependencies);
		return (0, _possibleConstructorReturn3.default)(this, (PatternDependencies.__proto__ || (0, _getPrototypeOf2.default)(PatternDependencies)).apply(this, arguments));
	}

	(0, _createClass3.default)(PatternDependencies, [{
		key: 'handleClick',
		value: function handleClick(props) {
			var id = props.id;
			var base = props.base;
			var location = this.props.location;
			var router = this.context.router;

			router.push({
				pathname: base + 'pattern/' + id,
				query: location.query
			});
		}
	}, {
		key: 'handleMouseEnter',
		value: function handleMouseEnter(id) {
			var dispatch = this.props.dispatch;

			dispatch((0, _markBlock2.default)({ id: id, active: true }));
		}
	}, {
		key: 'handleMouseLeave',
		value: function handleMouseLeave(id) {
			var dispatch = this.props.dispatch;

			dispatch((0, _markBlock2.default)({ id: id, active: false }));
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props;
			var activeBlock = _props.activeBlock;
			var passedClassName = _props.className;
			var dependencies = _props.dependencies;
			var dependents = _props.dependents;
			var id = _props.id;
			var base = _props.base;
			var name = _props.name;
			var location = _props.location;


			var className = (0, _classnames2.default)('pattern-dependencies', passedClassName);

			var blockHeight = 4;
			var center = 50;
			var rootWidth = Math.max(5, name.length * 1.25);
			var paddingX = 1;
			var rootY = 1;
			var columnY = 2;
			var offsetY = Math.max(rootY, columnY);
			var rootHeight = blockHeight;
			var rootYCenter = rootY + rootHeight / 2;
			var blockSpace = blockHeight + 1;
			var viewBoxHeight = Math.max(Math.max(dependencies.length, dependents.length) * blockSpace + offsetY + 2, blockSpace + offsetY + 2);

			return _react2.default.createElement(
				'div',
				{ className: className },
				_react2.default.createElement(
					'svg',
					{ viewBox: '0 0 100 ' + viewBoxHeight, className: 'pattern-dependencies__stage' },
					_react2.default.createElement(_blockColumn2.default, {
						activeBlock: activeBlock,
						items: dependencies,
						base: base,
						y: columnY,
						x: paddingX,
						height: blockHeight,
						onClick: this.handleClick,
						onMouseEnter: this.handleMouseEnter,
						onMouseLeave: this.handleMouseLeave,
						description: 'provides for',
						location: location,
						connect: { x: center - rootWidth / 2, y: rootYCenter }
					}),
					_react2.default.createElement(_blockColumn2.default, {
						activeBlock: activeBlock,
						items: dependents,
						base: base,
						y: columnY,
						x: 100,
						height: blockHeight,
						onClick: this.handleClick,
						onMouseEnter: this.handleMouseEnter,
						onMouseLeave: this.handleMouseLeave,
						align: 'right',
						description: 'provides for',
						location: location,
						connect: { x: center + rootWidth / 2, y: rootYCenter }
					}),
					_react2.default.createElement(_block2.default, {
						type: 'root',
						name: name,
						id: id,
						x: 50 - rootWidth / 2,
						y: rootY,
						height: rootHeight,
						width: rootWidth,
						location: location,
						base: base
					})
				)
			);
		}
	}]);
	return PatternDependencies;
}(_react.Component), _class2.propTypes = {
	activeBlock: _react.PropTypes.string,
	base: _react.PropTypes.string.isRequired,
	className: _react.PropTypes.string,
	id: _react.PropTypes.string.isRequired,
	name: _react.PropTypes.string.isRequired,
	dependencies: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		name: _react.PropTypes.string.isRequired,
		id: _react.PropTypes.string.isRequired
	})).isRequired,
	dependents: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		name: _react.PropTypes.string.isRequired,
		id: _react.PropTypes.string.isRequired
	})).isRequired,
	location: _react.PropTypes.shape({
		pathname: _react.PropTypes.string,
		query: _react.PropTypes.any
	})
}, _class2.contextTypes = {
	router: _react.PropTypes.any
}, _temp)) || _class;

exports.default = (0, _reactRedux.connect)(function (_ref) {
	var activeBlock = _ref.activeBlock;

	return { activeBlock: activeBlock };
})(PatternDependencies);
module.exports = exports['default'];

},{"../../actions/mark-block":390,"./block":448,"./block-column":447,"autobind-decorator":"autobind-decorator","babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"classnames":"classnames","react":"react","react-redux":"react-redux"}],455:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _markdown = require('../../containers/markdown');

var _markdown2 = _interopRequireDefault(_markdown);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function PatternDocumentation(props) {
	var source = props.source || props.children;
	return _react2.default.createElement(
		'div',
		{ className: 'pattern-code' },
		_react2.default.createElement(
			'div',
			{ className: 'pattern-code__toolbar' },
			_react2.default.createElement(
				'div',
				{ className: 'pattern-code__name' },
				props.name
			)
		),
		_react2.default.createElement(
			'div',
			{ className: 'pattern-code__content' },
			_react2.default.createElement(_markdown2.default, { base: props.base, source: source })
		)
	);
}

PatternDocumentation.propTypes = {
	base: _react.PropTypes.string.isRequired,
	children: _react.PropTypes.string,
	name: _react.PropTypes.string.isRequired,
	source: _react.PropTypes.string
};

exports.default = PatternDocumentation;
module.exports = exports['default'];

},{"../../containers/markdown":470,"react":"react"}],456:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

exports.default = PatternFolder;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon = require('../common/icon');

var _icon2 = _interopRequireDefault(_icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ItemField(props) {
	var Component = props.component;
	var className = (0, _classnames2.default)('pattern-field', props.className, (0, _defineProperty3.default)({}, 'pattern-field--' + props.valueKey, props.value));
	var children = props.children || props.value;

	return _react2.default.createElement(
		Component,
		{ className: className },
		Array.isArray(children) ? children.map(function (c, i) {
			return _react2.default.createElement(
				'span',
				{ key: i },
				c
			);
		}) : children
	);
}

ItemField.propTypes = {
	component: _react.PropTypes.string.isRequired,
	valueKey: _react.PropTypes.string.isRequired,
	value: _react.PropTypes.any,
	className: _react.PropTypes.string,
	children: _react.PropTypes.any
};

ItemField.defaultProps = {
	component: 'div'
};

function PatternFolderItem(props) {
	var name = props.name;
	var type = props.type;
	var id = props.id;
	var location = props.location;
	var base = props.base;

	var to = {
		pathname: base + 'pattern/' + id,
		query: location.query
	};

	var title = 'Navigate to ' + type + ' "' + name + '" at ' + id;
	var href = base + 'demo/' + id;

	return _react2.default.createElement(
		'li',
		{ className: 'pattern-item' },
		_react2.default.createElement(
			ItemField,
			{ valueKey: 'name', value: props.name },
			_react2.default.createElement(
				_reactRouter.Link,
				{ to: to, title: title },
				_react2.default.createElement(
					_icon2.default,
					{ base: base, symbol: type },
					name
				),
				_react2.default.createElement(
					'span',
					null,
					props.name
				)
			)
		),
		_react2.default.createElement(ItemField, { valueKey: 'version', value: props.version }),
		_react2.default.createElement(ItemField, { valueKey: 'tags', value: props.tags }),
		_react2.default.createElement(ItemField, { valueKey: 'flag', value: props.flag }),
		props.type === 'pattern' ? _react2.default.createElement(
			'a',
			{
				href: href,
				target: '_blank',
				rel: 'nofollow',
				className: 'pattern-field',
				title: 'Open ' + type + ' "' + name + '" at ' + id + ' in fullscreen'
			},
			_react2.default.createElement(
				_icon2.default,
				{ base: base, symbol: 'fullscreen', description: 'Fullscreen' },
				id + ' in fullscreen'
			)
		) : _react2.default.createElement('div', { className: 'pattern-field' })
	);
}

PatternFolderItem.propTypes = {
	base: _react.PropTypes.string.isRequired,
	id: _react.PropTypes.string.isRequired,
	name: _react.PropTypes.string.isRequired,
	type: _react.PropTypes.string.isRequired,
	version: _react.PropTypes.string,
	tags: _react.PropTypes.array,
	flag: _react.PropTypes.string,
	location: _react.PropTypes.shape({
		pathname: _react.PropTypes.string.isRequired,
		query: _react.PropTypes.object.isRequired
	}).isRequired
};

function PatternFolder(_ref) {
	var items = _ref.items;
	var location = _ref.location;
	var up = _ref.up;
	var base = _ref.base;

	return _react2.default.createElement(
		'ul',
		{ className: 'pattern-folder' },
		_react2.default.createElement(
			'li',
			{ className: 'pattern-folder-head' },
			_react2.default.createElement('div', { className: 'pattern-folder-head__cell' }),
			_react2.default.createElement(
				'div',
				{ className: 'pattern-folder-head__cell' },
				'Version'
			),
			_react2.default.createElement(
				'div',
				{ className: 'pattern-folder-head__cell' },
				'Tags'
			),
			_react2.default.createElement(
				'div',
				{ className: 'pattern-folder-head__cell' },
				'Flag'
			),
			_react2.default.createElement('div', { className: 'pattern-folder-head__cell' })
		),
		up && _react2.default.createElement(PatternFolderItem, {
			id: up,
			name: '..',
			type: 'folder',
			location: location,
			base: base
		}),
		items.map(function (item) {
			return _react2.default.createElement(PatternFolderItem, (0, _extends3.default)({}, item, {
				location: location,
				key: item.id,
				base: base
			}));
		})
	);
}

PatternFolder.propTypes = {
	base: _react.PropTypes.string.isRequired,
	items: _react.PropTypes.arrayOf(_react.PropTypes.shape(PatternFolderItem.propTypes)).isRequired,
	location: _react.PropTypes.shape({
		pathname: _react.PropTypes.string.isRequired,
		query: _react.PropTypes.object.isRequired
	}).isRequired,
	up: _react.PropTypes.string
};

PatternFolder.defaultProps = {
	items: []
};
module.exports = exports['default'];

},{"../common/icon":424,"babel-runtime/helpers/defineProperty":22,"babel-runtime/helpers/extends":23,"classnames":"classnames","react":"react","react-router":"react-router"}],457:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

exports.default = PatternHeader;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _lodash = require('lodash');

var _breadCrumbs = require('../bread-crumbs');

var _breadCrumbs2 = _interopRequireDefault(_breadCrumbs);

var _headline = require('../common/headline');

var _headline2 = _interopRequireDefault(_headline);

var _icon = require('../common/icon');

var _icon2 = _interopRequireDefault(_icon);

var _urlQuery = require('../../utils/url-query');

var _urlQuery2 = _interopRequireDefault(_urlQuery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var autoMount = 'https://github.com/sinnerschrader/patternplate-transform-react-to-markup#component-auto-mounting';

function PatternHeader(props) {
	var flagClassName = (0, _classnames2.default)('pattern__flag', (0, _defineProperty3.default)({}, 'pattern__flag--' + props.flag, props.flag));

	var fullscreen = _urlQuery2.default.format({
		pathname: props.base + 'demo/' + props.id + '/index.html',
		query: {
			environment: props.environment
		}
	});
	var fullscreenTitle = 'Open "' + props.name + '" in fullscreen [ctrl+f]';

	var reloadTitle = 'Reload demo for "' + props.name + '" [ctrl+r]';
	var reloadClassName = (0, _classnames2.default)('button', 'button--reload', {
		'reload--reloading': props.loading,
		'button--is-active': props.loading,
		'reload--error': props.errored
	});

	var rulersTitle = props.rulers ? 'Disable rulers [ctrl+l]' : 'Enable rulers [ctrl+l]';

	var rulersClassName = (0, _classnames2.default)('button button--rulers', {
		'button--is-active': props.rulers
	});

	var opacityClassName = (0, _classnames2.default)('button button--opacity', {
		'button--is-active': props.opacity
	});
	var opacitySymbol = props.opacity ? 'checkers' : 'checkers-inverted';
	var opacityTitle = props.opacity ? 'Show opacity [ctrl+o]' : 'Hide opacity [ctrl+o]';

	return _react2.default.createElement(
		'div',
		{ className: 'pattern-header-container' },
		_react2.default.createElement(_breadCrumbs2.default, {
			base: props.base,
			crumbs: props.breadcrumbs,
			location: props.location,
			className: 'pattern-path'
		}),
		_react2.default.createElement(
			_headline2.default,
			{ className: 'pattern-header', order: 2 },
			_react2.default.createElement(
				'span',
				{ className: 'pattern-name' },
				props.name
			),
			_react2.default.createElement(
				'small',
				{ className: 'pattern-version' },
				props.version ? 'v' + props.version : ''
			),
			props.flag ? _react2.default.createElement(
				'small',
				{ className: flagClassName },
				_react2.default.createElement(
					_reactRouter.Link,
					{
						title: 'Search patterns with flag ' + props.flag,
						to: {
							pathname: props.location.pathname,
							query: (0, _extends3.default)({}, props.location.query, { search: 'flag:' + props.flag })
						}
					},
					props.flag
				)
			) : null,
			props.tags.map(function (tag, key) {
				return _react2.default.createElement(
					'small',
					{ key: key, className: 'pattern-tag' },
					_react2.default.createElement(
						_reactRouter.Link,
						{
							title: 'Search patterns with tag ' + tag,
							to: {
								pathname: props.location.pathname,
								query: (0, _extends3.default)({}, props.location.query, { search: 'tag:' + tag })
							},
							key: key
						},
						tag
					)
				);
			}),
			props.automount && _react2.default.createElement(
				'small',
				{ className: 'pattern-option' },
				_react2.default.createElement(
					'a',
					{
						href: autoMount,
						target: '_blank',
						title: 'Learn about component auto mounting on Github',
						rel: 'noopener'
					},
					'auto-mount'
				)
			)
		),
		_react2.default.createElement(
			'div',
			{ className: 'pattern-header__actions' },
			_react2.default.createElement(
				_reactRouter.Link,
				{
					className: reloadClassName,
					title: reloadTitle,
					disabled: props.loading,
					onClick: props.loading ? _lodash.noop : props.onReloadClick,
					to: {
						pathname: props.location.pathname,
						query: (0, _extends3.default)({}, props.location.query, {
							reload: props.reloadTime
						})
					}
				},
				_react2.default.createElement(_icon2.default, { symbol: 'reload' })
			),
			_react2.default.createElement(
				_reactRouter.Link,
				{
					className: rulersClassName,
					title: rulersTitle,
					to: {
						pathname: props.location.pathname,
						query: (0, _extends3.default)({}, props.location.query, {
							rulers: !props.rulers
						})
					}
				},
				_react2.default.createElement(_icon2.default, { symbol: 'rulers' })
			),
			_react2.default.createElement(
				_reactRouter.Link,
				{
					className: opacityClassName,
					title: opacityTitle,
					to: {
						pathname: props.location.pathname,
						query: (0, _extends3.default)({}, props.location.query, {
							opacity: !props.opacity
						})
					}
				},
				_react2.default.createElement(_icon2.default, { symbol: opacitySymbol })
			),
			_react2.default.createElement(
				'a',
				{
					className: 'button fullscreen',
					target: '_blank',
					rel: 'noopener',
					href: fullscreen,
					title: fullscreenTitle
				},
				_react2.default.createElement(_icon2.default, { symbol: 'fullscreen' })
			)
		)
	);
}

PatternHeader.propTypes = {
	automount: _react.PropTypes.bool.isRequired,
	base: _react.PropTypes.string.isRequired,
	breadcrumbs: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		id: _react.PropTypes.string.isRequired,
		name: _react.PropTypes.string.isRequired,
		target: _react.PropTypes.shape({
			pathname: _react.PropTypes.string.isRequired,
			query: _react.PropTypes.object.isRequired
		}).isRequired
	})).isRequired,
	environment: _react.PropTypes.string.isRequired,
	errored: _react.PropTypes.bool.isRequired,
	flag: _react.PropTypes.string,
	id: _react.PropTypes.string.isRequired,
	loading: _react.PropTypes.bool.isRequired,
	location: _react.PropTypes.shape({
		pathname: _react.PropTypes.string.isRequired,
		query: _react.PropTypes.object.isRequired
	}),
	name: _react.PropTypes.string.isRequired,
	onReloadClick: _react.PropTypes.func.isRequired,
	opacity: _react.PropTypes.bool.isRequired,
	reloadTime: _react.PropTypes.number,
	reloadedTime: _react.PropTypes.number,
	rulers: _react.PropTypes.bool.isRequired,
	tags: _react.PropTypes.arrayOf(_react.PropTypes.string),
	version: _react.PropTypes.string.isRequired
};

PatternHeader.defaultProps = {
	tags: [],
	onReloadClick: _lodash.noop
};
module.exports = exports['default'];

},{"../../utils/url-query":510,"../bread-crumbs":411,"../common/headline":423,"../common/icon":424,"babel-runtime/helpers/defineProperty":22,"babel-runtime/helpers/extends":23,"classnames":"classnames","lodash":"lodash","react":"react","react-router":"react-router"}],458:[function(require,module,exports){
(function (global){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _class2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _pureRenderDecorator = require('pure-render-decorator');

var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var start = { transform: 'translate3d(0, 0, 0)' };

var Ruler = (0, _autobindDecorator2.default)(_class = function (_Component) {
	(0, _inherits3.default)(Ruler, _Component);

	function Ruler() {
		(0, _classCallCheck3.default)(this, Ruler);
		return (0, _possibleConstructorReturn3.default)(this, (Ruler.__proto__ || (0, _getPrototypeOf2.default)(Ruler)).apply(this, arguments));
	}

	(0, _createClass3.default)(Ruler, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var end = this.props.type === 'horizontal' ? { transform: 'translate3d(-100%, 0, 0)' } : { transform: 'translate3d(0, -100%, 0)' };

			var keyframes = [start, end];
			var options = { duration: 100 };
			this.animation = this.ref.animate(keyframes, options);
			this.animation.pause();
			this.animation.currentTime = this.props.offset;
			global.a = this.animation;
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			this.animation.currentTime = this.props.offset;
		}
	}, {
		key: 'saveRef',
		value: function saveRef(ref) {
			this.ref = ref;
		}
	}, {
		key: 'render',
		value: function render() {
			var props = this.props;

			var type = props.type === 'horizontal' ? 'horizontal' : 'vertical';
			var markerPositionProperty = props.type === 'horizontal' ? 'left' : 'top';

			return _react2.default.createElement(
				'div',
				{ className: 'pattern-ruler pattern-ruler--' + type },
				_react2.default.createElement(
					'div',
					{ className: 'pattern-ruler__scale', ref: this.saveRef },
					_react2.default.createElement(RulerSteps, { type: props.type, length: props.length, step: props.step })
				),
				props.markers.map(function (marker) {
					var style = (0, _defineProperty3.default)({}, markerPositionProperty, marker + 'px');
					return _react2.default.createElement('div', { className: 'pattern-ruler__marker', key: marker, style: style });
				})
			);
		}
	}]);
	return Ruler;
}(_react.Component)) || _class;

exports.default = Ruler;


Ruler.propTypes = {
	length: _react.PropTypes.number.isRequired,
	markers: _react.PropTypes.arrayOf(_react.PropTypes.number).isRequired,
	offset: _react.PropTypes.number.isRequired,
	step: _react.PropTypes.number.isRequired,
	type: _react.PropTypes.string.isRequired
};

Ruler.defaultProps = {
	length: 0
};

var RulerSteps = (0, _pureRenderDecorator2.default)(_class2 = function (_Component2) {
	(0, _inherits3.default)(RulerSteps, _Component2);

	function RulerSteps() {
		(0, _classCallCheck3.default)(this, RulerSteps);
		return (0, _possibleConstructorReturn3.default)(this, (RulerSteps.__proto__ || (0, _getPrototypeOf2.default)(RulerSteps)).apply(this, arguments));
	}

	(0, _createClass3.default)(RulerSteps, [{
		key: 'render',
		value: function render() {
			var props = this.props;

			var steps = getSteps(props.length, props.step);
			var spacerProperty = props.type === 'horizontal' ? 'marginLeft' : 'marginTop';
			var orderProperty = props.type === 'horizontal' ? 'height' : 'width';
			var sizingProperty = props.type === 'horizontal' ? 'width' : 'height';

			return _react2.default.createElement(
				'ul',
				{ className: 'pattern-ruler__steps' },
				steps.map(function (step, index) {
					var _ref;

					var orderDimension = ['15px', '10px', '5px'][step.order - 1];
					var spacer = index > 0 ? props.step - 1 : 0;

					return _react2.default.createElement(
						'li',
						{
							key: index,
							className: 'pattern-ruler__step pattern-ruler__step--' + step.order,
							style: (_ref = {}, (0, _defineProperty3.default)(_ref, spacerProperty, spacer + 'px'), (0, _defineProperty3.default)(_ref, sizingProperty, '1px'), (0, _defineProperty3.default)(_ref, orderProperty, orderDimension), _ref)
						},
						typeof step.label !== 'undefined' && _react2.default.createElement(
							'span',
							{ className: 'pattern-ruler__label' },
							step.label
						)
					);
				})
			);
		}
	}]);
	return RulerSteps;
}(_react.Component)) || _class2;

RulerSteps.propTypes = {
	length: _react.PropTypes.number.isRequired,
	step: _react.PropTypes.number.isRequired,
	type: _react.PropTypes.string.isRequired
};

function getSteps(length, step) {
	return Array(Math.round(length / step)).fill(true).map(function (_, index) {
		return index;
	}).map(function (count) {
		var label = count % 10 === 0 ? count * step : null;
		var matches = [10, 5];
		var match = matches.find(function (n) {
			return count % n === 0;
		});
		var order = match ? matches.indexOf(match) + 1 : 3;
		return { label: label, order: order };
	});
}
module.exports = exports['default'];

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"autobind-decorator":"autobind-decorator","babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/defineProperty":22,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"pure-render-decorator":"pure-render-decorator","react":"react"}],459:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _class2, _temp;

// import PatternLoader from './pattern-loader';


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _pureRenderDecorator = require('pure-render-decorator');

var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _lodash = require('lodash');

require('isomorphic-fetch');

var _pattern = require('../../containers/pattern');

var _pattern2 = _interopRequireDefault(_pattern);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PatternSection = (0, _pureRenderDecorator2.default)(_class = (0, _autobindDecorator2.default)(_class = (_temp = _class2 = function (_React$Component) {
	(0, _inherits3.default)(PatternSection, _React$Component);

	function PatternSection() {
		(0, _classCallCheck3.default)(this, PatternSection);
		return (0, _possibleConstructorReturn3.default)(this, (PatternSection.__proto__ || (0, _getPrototypeOf2.default)(PatternSection)).apply(this, arguments));
	}

	(0, _createClass3.default)(PatternSection, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var _props = this.props;
			var id = _props.id;
			var base = _props.base;
			var environment = _props.environment;

			this.props.onDataRequest(id, { environment: environment }, { loading: true, base: base });
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			var next = (0, _lodash.pick)(nextProps, ['id', 'environment']);
			var current = (0, _lodash.pick)(this.props, ['id', 'environment']);
			var query = { environment: next.environment };
			var options = { loading: next.id !== current.id, base: nextProps.base };
			if (nextProps.type === 'pattern' && !(0, _lodash.isEqual)(next, current)) {
				this.props.onDataRequest(next.id, query, options);
			}
		}
	}, {
		key: 'handleDataRequest',
		value: function handleDataRequest(id, query, options) {
			this.props.onDataRequest(id, query, options);
		}
	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'section',
				{ className: 'pattern-section' },
				_react2.default.createElement(_pattern2.default, {
					location: this.props.location
				})
			);
		}
	}]);
	return PatternSection;
}(_react2.default.Component), _class2.propTypes = {
	base: _react.PropTypes.string.isRequired,
	environment: _react.PropTypes.string.isRequired,
	id: _react.PropTypes.string.isRequired,
	location: _react.PropTypes.object.isRequired,
	onDataRequest: _react.PropTypes.func.isRequired
}, _class2.defaultProps = {
	environment: 'index',
	onDataRequest: function onDataRequest() {}
}, _temp)) || _class) || _class;

exports.default = PatternSection;
module.exports = exports['default'];

},{"../../containers/pattern":471,"autobind-decorator":"autobind-decorator","babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"isomorphic-fetch":"isomorphic-fetch","lodash":"lodash","pure-render-decorator":"pure-render-decorator","react":"react"}],460:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _md = require('md5');

var _md2 = _interopRequireDefault(_md);

var _patternControl = require('./pattern-control');

var _patternControl2 = _interopRequireDefault(_patternControl);

var _patternCode = require('./pattern-code');

var _patternCode2 = _interopRequireDefault(_patternCode);

var _patternDocumentation = require('./pattern-documentation');

var _patternDocumentation2 = _interopRequireDefault(_patternDocumentation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = PatternSources;


function PatternSources(props) {
	var sources = props.sources;

	return _react2.default.createElement(
		'div',
		{ className: 'pattern-sources' },
		sources.map(function (source) {
			return _react2.default.createElement(PatternSource, {
				active: source.active,
				update: source.update,
				base: props.base,
				concern: source.concern,
				concerns: source.concerns,
				environment: props.environment,
				extname: source.extname,
				id: source.id,
				shortid: source.shortid,
				key: source.shortid,
				language: source.language,
				loading: source.loading,
				location: props.location,
				name: source.name,
				onConcernChange: props.onConcernChange,
				onFileRequest: props.onFileRequest,
				onTypeChange: props.onTypeChange,
				source: source.source,
				type: source.type,
				types: source.types
			});
		})
	);
}

PatternSources.propTypes = {
	base: _react.PropTypes.string.isRequired,
	environment: _react.PropTypes.string.isRequired,
	location: _react.PropTypes.shape({
		pathname: _react.PropTypes.string.isRequired,
		query: _react.PropTypes.object.isRequired
	}).isRequired,
	onConcernChange: _react.PropTypes.func.isRequired,
	onFileRequest: _react.PropTypes.func.isRequired,
	onTypeChange: _react.PropTypes.func.isRequired,
	sources: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		active: _react.PropTypes.bool.isRequired,
		concern: _react.PropTypes.string.isRequired,
		id: _react.PropTypes.string.isRequired,
		language: _react.PropTypes.string.isRequired,
		name: _react.PropTypes.string.isRequired,
		source: _react.PropTypes.string.isRequired,
		type: _react.PropTypes.string.isRequired
	}))
};

var PatternSource = (0, _autobindDecorator2.default)(_class = (_temp = _class2 = function (_Component) {
	(0, _inherits3.default)(PatternSource, _Component);

	function PatternSource() {
		(0, _classCallCheck3.default)(this, PatternSource);
		return (0, _possibleConstructorReturn3.default)(this, (PatternSource.__proto__ || (0, _getPrototypeOf2.default)(PatternSource)).apply(this, arguments));
	}

	(0, _createClass3.default)(PatternSource, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var props = this.props;

			if (props.update) {
				props.onFileRequest({
					id: props.id,
					shortid: props.shortid,
					environment: props.environment,
					type: props.type,
					base: props.base
				});
			}
		}
	}, {
		key: 'componentWillUpdate',
		value: function componentWillUpdate(next) {
			if (next.update) {
				next.onFileRequest({
					id: this.props.id,
					shortid: this.props.shortid,
					environment: this.props.environment,
					type: this.props.type,
					base: this.props.base
				});
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var props = this.props;

			var className = (0, _classnames2.default)('pattern-source', {
				'pattern-source--loading': props.loading
			});
			var verb = props.active ? 'Close' : 'View';
			var title = verb + ' ' + props.concern + props.extname;
			return _react2.default.createElement(
				'div',
				{ className: className },
				_react2.default.createElement(_patternControl2.default, {
					active: props.active,
					base: props.base,
					disabled: props.loading,
					expand: true,
					key: props.id,
					location: props.location,
					name: props.name,
					shortid: props.id,
					title: title
				}),
				props.active && props.language === 'md' && _react2.default.createElement(_patternDocumentation2.default, {
					base: props.base,
					name: props.name,
					source: props.source
				}),
				props.active && props.language !== 'md' && _react2.default.createElement(_patternCode2.default, {
					base: props.base,
					concern: props.concern,
					concerns: props.concerns,
					copy: true,
					extname: props.extname,
					format: props.language,
					highlight: true,
					id: (0, _md2.default)([props.id, props.source].join(':')),
					name: props.name,
					onConcernChange: props.onConcernChange,
					onTypeChange: props.onTypeChange,
					source: props.source,
					type: props.type,
					types: props.types
				})
			);
		}
	}]);
	return PatternSource;
}(_react.Component), _class2.propTypes = {
	active: _react.PropTypes.bool.isRequired,
	base: _react.PropTypes.string.isRequired,
	concern: _react.PropTypes.string.isRequired,
	concerns: _react.PropTypes.arrayOf(_react.PropTypes.string).isRequired,
	environment: _react.PropTypes.string.isRequired,
	id: _react.PropTypes.string.isRequired,
	shortid: _react.PropTypes.string.isRequired,
	loading: _react.PropTypes.bool,
	location: _react.PropTypes.shape({
		pathname: _react.PropTypes.string.isRequired,
		query: _react.PropTypes.object.isRequired
	}).isRequired,
	name: _react.PropTypes.string.isRequired,
	onFileRequest: _react.PropTypes.func.isRequired,
	language: _react.PropTypes.string.isRequired,
	source: _react.PropTypes.string.isRequired,
	type: _react.PropTypes.string.isRequired,
	types: _react.PropTypes.arrayOf(_react.PropTypes.string).isRequired,
	title: _react.PropTypes.string,
	update: _react.PropTypes.bool.isRequired
}, _temp)) || _class;

module.exports = exports['default'];

},{"./pattern-code":451,"./pattern-control":452,"./pattern-documentation":455,"autobind-decorator":"autobind-decorator","babel-runtime/core-js/object/get-prototype-of":12,"babel-runtime/helpers/classCallCheck":20,"babel-runtime/helpers/createClass":21,"babel-runtime/helpers/inherits":24,"babel-runtime/helpers/possibleConstructorReturn":26,"classnames":"classnames","md5":"md5","react":"react"}],461:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon = require('../common/icon');

var _icon2 = _interopRequireDefault(_icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = PatternToolCodeToogle;


function PatternToolCodeToogle(props) {
	var className = (0, _classnames2.default)('pattern-control pattern-tool pattern-tool-code-toggle', { active: props.active });

	var to = {
		pathname: props.location.pathname,
		query: (0, _extends3.default)({}, props.location.query, {
			'source-expanded': !props.active,
			'source': null
		})
	};

	return _react2.default.createElement(
		_reactRouter.Link,
		{
			to: to,
			className: className,
			title: props.title
		},
		_react2.default.createElement(_icon2.default, {
			base: props.base,
			symbol: 'code',
			description: 'Code'
		})
	);
}
module.exports = exports['default'];

},{"../common/icon":424,"babel-runtime/helpers/extends":23,"classnames":"classnames","react":"react","react-router":"react-router"}],462:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon = require('../common/icon');

var _icon2 = _interopRequireDefault(_icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = PatternToolEnvSelect;


var name = 'pattern-tool pattern-environment-selection';

function PatternToolEnvSelect(props) {
	var envs = props.environments;
	var env = props.environment;

	var selected = envs.filter(function (item) {
		return item.id === env;
	})[0] || {};
	var className = (0, _classnames2.default)(name, {
		'pattern-environment-selection--disabled': props.disabled
	});

	var title = getTitle(selected, envs);

	return _react2.default.createElement(
		'label',
		{ className: className },
		_react2.default.createElement(
			'span',
			{ className: 'pattern-environment-selection__label' },
			'Environment'
		),
		_react2.default.createElement(
			'span',
			{ className: 'pattern-environment-selection__value' },
			selected.name
		),
		_react2.default.createElement(
			'select',
			{
				className: 'pattern-environment-selection__native',
				disabled: props.disabled,
				value: env,
				onChange: props.onChange,
				title: title
			},
			envs.map(function (env) {
				return _react2.default.createElement(
					'option',
					{
						key: env.id,
						value: env.id
					},
					env.name
				);
			})
		),
		_react2.default.createElement(_icon2.default, {
			base: props.base,
			className: 'pattern-environment-selection__arrow',
			symbol: 'arrow-right'
		})
	);
}

PatternToolEnvSelect.propTypes = {
	base: _react.PropTypes.string.isRequired,
	disabled: _react.PropTypes.bool,
	environment: _react.PropTypes.string.isRequired,
	environments: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		name: _react.PropTypes.string.isRequired,
		id: _react.PropTypes.string.isRequired
	})).isRequired,
	onChange: _react.PropTypes.func.isRequired
};

PatternToolEnvSelect.defaultProps = {
	onChange: function onChange() {}
};

function getTitle() {
	var selected = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	var envs = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

	_assert2.default.equal(typeof selected === 'undefined' ? 'undefined' : (0, _typeof3.default)(selected), 'object', 'selected must be an object');
	_assert2.default.ok(Array.isArray(envs), 'envs must be an array');
	var other = envs.filter(function (e) {
		return e.id !== selected.id;
	});

	var lead = other[0];

	if (!lead) {
		return null;
	}

	var head = other.slice(0, other.length - 1);
	var tail = other[other.length - 1];

	var environments = tail ? head.map(function (e) {
		return '"' + e.name + '"';
	}).join(', ') + ' or "' + tail.name + '"' : lead.name;

	return 'Change currently active environment "' + selected.name + '" to ' + environments;
}
module.exports = exports['default'];

},{"../common/icon":424,"assert":2,"babel-runtime/helpers/typeof":29,"classnames":"classnames","react":"react"}],463:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _icon = require('../common/icon');

var _icon2 = _interopRequireDefault(_icon);

var _patternControl = require('./pattern-control');

var _patternControl2 = _interopRequireDefault(_patternControl);

var _patternDependencies = require('./pattern-dependencies');

var _patternDependencies2 = _interopRequireDefault(_patternDependencies);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = PatternToolRelations;


function PatternToolRelations(props) {
	var relationCount = props.dependencies.length + props.dependents.length;
	var title = 'Browse relations of ' + props.id + ' to ' + relationCount + ' other patterns';
	return _react2.default.createElement(
		'div',
		{ className: 'pattern-tool pattern-tool--relations' },
		_react2.default.createElement(
			_patternControl2.default,
			{
				active: props.active,
				base: props.base,
				location: props.location,
				shortid: 'relations',
				id: 'relations',
				name: 'relations',
				title: title
			},
			_react2.default.createElement(_icon2.default, {
				base: props.base,
				symbol: 'dependencies',
				description: 'Relations'
			})
		),
		props.active && _react2.default.createElement(
			'div',
			{ className: 'pattern-code pattern-code--max' },
			_react2.default.createElement(
				'div',
				{ className: 'pattern-code__toolbar' },
				_react2.default.createElement(
					'div',
					{ className: 'pattern-code__name' },
					'Relations'
				)
			),
			_react2.default.createElement(
				'div',
				{ className: 'pattern-code__content' },
				_react2.default.createElement(_patternDependencies2.default, {
					base: props.base,
					dependencies: props.dependencies,
					dependents: props.dependents,
					id: props.id,
					name: props.name,
					location: props.location
				})
			)
		)
	);
}

PatternToolRelations.propTypes = {
	active: _react.PropTypes.bool.isRequired,
	base: _react.PropTypes.string.isRequired,
	dependencies: _react.PropTypes.array.isRequired,
	dependents: _react.PropTypes.array.isRequired,
	id: _react.PropTypes.string.isRequired,
	location: _react.PropTypes.shape({
		pathname: _react.PropTypes.string.isRequired,
		query: _react.PropTypes.object.isRequired
	}).isRequired,
	name: _react.PropTypes.string.isRequired
};
module.exports = exports['default'];

},{"../common/icon":424,"./pattern-control":452,"./pattern-dependencies":454,"react":"react"}],464:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _patternSources = require('./pattern-sources');

var _patternSources2 = _interopRequireDefault(_patternSources);

var _patternTools = require('./pattern-tools');

var _patternTools2 = _interopRequireDefault(_patternTools);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = PatternToolbar;


function PatternToolbar(props) {
	var className = (0, _classnames2.default)('pattern-toolbar', {
		'pattern-toolbar--expanded': props.expanded
	});

	return _react2.default.createElement(
		'div',
		{ className: className },
		_react2.default.createElement(_patternSources2.default, {
			base: props.base,
			environment: props.environment,
			location: props.location,
			onConcernChange: props.onConcernChange,
			onFileRequest: props.onFileRequest,
			onTypeChange: props.onTypeChange,
			sources: props.code
		}),
		_react2.default.createElement(_patternTools2.default, {
			activeSource: props.activeSource,
			base: props.base,
			dependencies: props.dependencies,
			dependents: props.dependents,
			environment: props.environment,
			environments: props.environments,
			expanded: props.expanded,
			hasCode: props.code.length > 0,
			id: props.id,
			name: props.name,
			location: props.location,
			onEnvironmentChange: props.onEnvironmentChange
		})
	);
}

PatternToolbar.propTypes = {
	activeSource: _react.PropTypes.string.isRequired,
	base: _react.PropTypes.string.isRequired,
	code: _react.PropTypes.arrayOf(_react.PropTypes.object).isRequired,
	dependencies: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		id: _react.PropTypes.string.isRequired,
		localName: _react.PropTypes.string.isRequired,
		name: _react.PropTypes.string.isRequired,
		version: _react.PropTypes.string.isRequired
	})).isRequired,
	dependents: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		id: _react.PropTypes.string.isRequired,
		name: _react.PropTypes.string.isRequired,
		version: _react.PropTypes.string.isRequired
	})).isRequired,
	environment: _react.PropTypes.string.isRequired,
	environments: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		id: _react.PropTypes.string.isRequired,
		name: _react.PropTypes.string.isRequired
	})).isRequired,
	expanded: _react.PropTypes.bool.isRequired,
	id: _react.PropTypes.string.isRequired,
	location: _react.PropTypes.shape({
		pathname: _react.PropTypes.string.isRequired,
		query: _react.PropTypes.object.isRequired
	}).isRequired,
	name: _react.PropTypes.string.isRequired,
	onConcernChange: _react.PropTypes.func.isRequired,
	onEnvironmentChange: _react.PropTypes.func.isRequired,
	onFileRequest: _react.PropTypes.func.isRequired,
	onTypeChange: _react.PropTypes.func.isRequired
};
module.exports = exports['default'];

},{"./pattern-sources":460,"./pattern-tools":465,"classnames":"classnames","react":"react"}],465:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _patternToolCodeToggle = require('./pattern-tool-code-toggle');

var _patternToolCodeToggle2 = _interopRequireDefault(_patternToolCodeToggle);

var _patternToolEnvironmentSelection = require('./pattern-tool-environment-selection');

var _patternToolEnvironmentSelection2 = _interopRequireDefault(_patternToolEnvironmentSelection);

var _patternToolRelations = require('./pattern-tool-relations');

var _patternToolRelations2 = _interopRequireDefault(_patternToolRelations);

var _urlQuery = require('../../utils/url-query');

var _urlQuery2 = _interopRequireDefault(_urlQuery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = PatternTools;


function PatternTools(props) {
	var hasEnvironments = props.environments.length > 1;
	var activeId = _urlQuery2.default.parse(props.activeSource).pathname;
	var active = activeId === 'relations';

	return _react2.default.createElement(
		'div',
		{ className: 'pattern-tools' },
		props.hasCode && _react2.default.createElement(_patternToolCodeToggle2.default, {
			active: props.expanded,
			base: props.base,
			location: props.location
		}),
		hasEnvironments && _react2.default.createElement(_patternToolEnvironmentSelection2.default, {
			base: props.base,
			disabled: !hasEnvironments,
			environment: props.environment,
			environments: props.environments,
			onChange: props.onEnvironmentChange
		}),
		_react2.default.createElement(_patternToolRelations2.default, {
			active: active,
			base: props.base,
			dependencies: props.dependencies,
			dependents: props.dependents,
			id: props.id,
			location: props.location,
			name: props.name
		})
	);
}

PatternTools.propTypes = {
	activeSource: _react.PropTypes.string.isRequired,
	base: _react.PropTypes.string.isRequired,
	dependencies: _react.PropTypes.array.isRequired,
	dependents: _react.PropTypes.array.isRequired,
	environment: _react.PropTypes.string.isRequired,
	environments: _react.PropTypes.array.isRequired,
	expanded: _react.PropTypes.bool.isRequired,
	hasCode: _react.PropTypes.bool.isRequired,
	id: _react.PropTypes.string.isRequired,
	location: _react.PropTypes.shape({
		pathname: _react.PropTypes.string.isRequired,
		query: _react.PropTypes.object.isRequired
	}),
	name: _react.PropTypes.string.isRequired,
	onEnvironmentChange: _react.PropTypes.func.isRequired
};
module.exports = exports['default'];

},{"../../utils/url-query":510,"./pattern-tool-code-toggle":461,"./pattern-tool-environment-selection":462,"./pattern-tool-relations":463,"react":"react"}],466:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactRedux = require('react-redux');

var _redux = require('redux');

var _application = require('../components/application');

var _application2 = _interopRequireDefault(_application);

var _actions = require('../actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _reactRedux.connect)(mapProps, mapDispatch)(_application2.default);


function mapProps(state, own) {
	return {
		activePattern: state.id,
		base: state.base,
		description: selectDescription(state),
		depth: state.depth,
		expanded: state.expanded,
		hierarchy: state.config.hierarchy,
		issue: state.issue,
		lightbox: state.lightbox,
		menuEnabled: state.menuEnabled,
		navigation: state.search ? state.searchMatches : state.navigation,
		pathname: own.location.pathname,
		query: own.location.query,
		search: own.location.query.search,
		startBase: state.startBase,
		styles: state.styles,
		theme: state.theme,
		themeLoading: selectThemeLoading(state),
		title: state.config.title || state.schema.name,
		version: selectVersion(state)
	};
}

function mapDispatch(dispatch) {
	return (0, _redux.bindActionCreators)({
		onResize: _actions.windowResize,
		onSearch: _actions.search,
		onThemeLoaded: _actions.themeLoaded,
		onThemeChange: _actions.toggleTheme,
		requestSearchBlur: function requestSearchBlur() {
			return (0, _actions.toggleSearchFocus)(false);
		}
	}, dispatch);
}

function selectDescription(state) {
	return selectSchema(state).description || '';
}

function selectVersion(state) {
	return selectSchema(state).version || '';
}

function selectSchema(state) {
	return state.schema || {};
}

function selectThemeLoading(state) {
	return state.styles.length > 1;
}
module.exports = exports['default'];

},{"../actions":385,"../components/application":410,"react-redux":"react-redux","redux":"redux"}],467:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _console = require('../components/content/console');

var _console2 = _interopRequireDefault(_console);

var _actions = require('../actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _reactRedux.connect)(mapProps, mapDispatch)(_console2.default);


function mapProps(state) {
	return {
		base: state.base,
		location: state.routing.locationBeforeTransitions,
		state: (0, _stringify2.default)(state, null, '  '),
		theme: state.theme
	};
}

function mapDispatch(dispatch) {
	return (0, _redux.bindActionCreators)({
		onApplyState: _actions.applyState,
		onClose: function onClose() {
			return (0, _actions.toggleConsole)(false);
		}
	}, dispatch);
}
module.exports = exports['default'];

},{"../actions":385,"../components/content/console":435,"babel-runtime/core-js/json/stringify":6,"react-redux":"react-redux","redux":"redux"}],468:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _actions = require('../actions');

var _content = require('../components/content');

var _content2 = _interopRequireDefault(_content);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _reactRedux.connect)(mapState, mapDispatch)(_content2.default);


function mapState(state) {
	var base = state.base;
	var config = state.config;
	var navigation = state.navigation;
	var pattern = state.pattern;
	var messages = state.messages;
	var time = state.time;

	return { base: base, config: config, navigation: navigation, pattern: pattern, messages: messages, time: time };
}

function mapDispatch(dispatch) {
	return (0, _redux.bindActionCreators)({
		onDismiss: _actions.dismissMessage,
		onLoad: _actions.loadPattern,
		onRetry: _actions.loadPattern
	}, dispatch);
}
module.exports = exports['default'];

},{"../actions":385,"../components/content":437,"react-redux":"react-redux","redux":"redux"}],469:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactRedux = require('react-redux');

var _home = require('../components/content/home');

var _home2 = _interopRequireDefault(_home);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _reactRedux.connect)(function (state) {
	return { readme: state.schema.readme, base: state.base };
})(_home2.default);
module.exports = exports['default'];

},{"../components/content/home":436,"react-redux":"react-redux"}],470:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.mapDispatch = mapDispatch;

var _redux = require('redux');

var _reactRedux = require('react-redux');

var _markdown = require('../components/common/markdown');

var _markdown2 = _interopRequireDefault(_markdown);

var _actions = require('../actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function mapProps(state) {
	var location = state.routing.locationBeforeTransitions;
	return {
		base: state.base,
		hash: location.hash,
		pathname: location.pathname,
		query: location.query
	};
}

function mapDispatch(dispatch) {
	return (0, _redux.bindActionCreators)({ scrollTo: _actions.scrollTo }, dispatch);
}

exports.default = (0, _reactRedux.connect)(mapProps, mapDispatch)(_markdown2.default);

},{"../actions":385,"../components/common/markdown":426,"react-redux":"react-redux","redux":"redux"}],471:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _reactRedux = require('react-redux');

var _redux = require('redux');

var _shortid = require('shortid');

var _shortid2 = _interopRequireDefault(_shortid);

var _urlQuery = require('../utils/url-query');

var _urlQuery2 = _interopRequireDefault(_urlQuery);

var _navigate = require('../utils/navigate');

var _navigate2 = _interopRequireDefault(_navigate);

var _pattern = require('../components/pattern');

var _pattern2 = _interopRequireDefault(_pattern);

var _actions = require('../actions');

var _patternDemoError = require('../actions/pattern-demo-error');

var _patternDemoError2 = _interopRequireDefault(_patternDemoError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _reactRedux.connect)(mapState, mapDispatch)(_pattern2.default);


function mapState(state) {
	return {
		activeSource: state.sourceId || '',
		automount: selectAutomount(state),
		base: state.base,
		breadcrumbs: selectBreadCrumbs(state),
		code: selectCode(state),
		rulerX: selectRulerXFraction(state),
		rulerY: selectRulerYFraction(state),
		rulerLengthX: selectRulerLengthX(state),
		rulerLengthY: selectRulerLengthY(state),
		demoContentHeight: selectDemoContentHeight(state),
		demoContentWidth: selectDemoContentWidth(state),
		demoHeight: selectHeight(state),
		demoWidth: selectWidth(state),
		dependencies: selectDependencies(state),
		dependents: selectDependents(state),
		display: selectDisplay(state),
		environment: state.environment,
		environments: selectEnvironments(state),
		errored: selectPatternErrored(state),
		flag: selectFlag(state),
		id: selectId(state),
		loading: selectLoading(state),
		location: selectLocation(state),
		name: selectName(state),
		onDemoReady: selectOnDemoReloaded(state),
		opacity: state.opacity,
		reloadedTime: selectReloadedTime(state),
		reloadTime: selectReloadTime(state),
		rulers: state.rulers,
		sourceExpanded: state.sourceExpanded,
		tags: selectTags(state),
		version: selectVersion(state)
	};
}

function mapDispatch(dispatch) {
	return (0, _redux.bindActionCreators)({
		onConcernChange: _actions.changeConcern,
		onDemoError: _patternDemoError2.default,
		onDemoReady: function onDemoReady() {
			return (0, _actions.loadPatternDemo)(false);
		},
		onDemoContentResize: _actions.demoContentResize,
		onDemoScroll: _actions.scrollDemo,
		onEnvironmentChange: _actions.changeEnvironment,
		onFileRequest: _actions.loadPatternFile,
		reload: _actions.loadPattern,
		resize: _actions.resizeDemo,
		onTypeChange: _actions.changeType
	}, dispatch);
}

function selectWidth(state) {
	var dim = state.demoDimensions[state.id] || {};
	return isNaN(dim.x) ? selectWindowWidth(state) / 2 : dim.x;
}

function selectHeight(state) {
	var dim = state.demoDimensions[state.id] || {};
	return isNaN(dim.y) ? selectWindowHeight(state) / 2 : dim.y;
}

function selectDemoContentWidth(state) {
	var dim = state.demoContentDimensions[state.id] || {};
	return dim.width || 0;
}

function selectDemoContentHeight(state) {
	var dim = state.demoContentDimensions[state.id] || {};
	return dim.height || 0;
}

function selectRulerXFraction(state) {
	var length = selectRulerLengthX(state);
	var scrollX = state.scrollDemoX.x;
	return scrollX / (length / 100);
}

function selectRulerYFraction(state) {
	var length = selectRulerLengthY(state);
	var scrollY = state.scrollDemoY.y;
	return scrollY / (length / 100);
}

function selectRulerLengthX(state) {
	var width = selectDemoContentWidth(state);
	var windowWidth = selectWindowWidth(state);
	return width * 2 + Math.abs(windowWidth - width);
}

function selectRulerLengthY(state) {
	var height = selectDemoContentHeight(state);
	var windowHeight = selectWindowHeight(state);
	return height * 2 + Math.abs(windowHeight - height);
}

function selectWindowWidth(state) {
	return (state.window || {}).width || 0;
}

function selectWindowHeight(state) {
	return (state.window || {}).height || 0;
}

function selectBreadCrumbs(state) {
	var fragments = selectId(state).split('/');
	var location = selectLocation(state);

	if (fragments.length < 2) {
		return [];
	}

	return fragments.map(function (fragment, index) {
		var partial = fragments.slice(0, index + 1).join('/');
		return {
			id: partial,
			name: fragment,
			navigateable: index < fragments.length - 1,
			target: {
				pathname: state.base + 'pattern/' + partial,
				query: location.query
			}
		};
	});
}

function selectPattern(state) {
	var cached = (0, _navigate2.default)(state.id, state.navigation);
	return (0, _lodash.merge)({}, cached, state.pattern);
}

function selectManifest(state) {
	var pattern = selectPattern(state);
	return pattern.manifest || {};
}

function selectManifestOptions(state) {
	var manifest = selectManifest(state);
	return manifest.options || {};
}

function selectReactMarkup(state) {
	var options = selectManifestOptions(state);
	return options['react-to-markup'] || {};
}

function selectReactMarkupOptions(state) {
	var markup = selectReactMarkup(state);
	return markup.opts || {};
}

function selectAutomount(state) {
	var opts = selectReactMarkupOptions(state);
	return 'automount' in opts ? opts.automount : false;
}

function getManifestSelector(name, defaultValue) {
	return function (state) {
		var manifest = selectManifest(state);
		var value = manifest[name];
		return typeof value === 'undefined' ? defaultValue : value;
	};
}

function selectId(state) {
	return state.id || selectPattern(state).id;
}

function selectName(state) {
	var pattern = selectPattern(state);
	var name = getManifestSelector('name')(state);
	var displayName = getManifestSelector('displayName')(state);
	return displayName || name || pattern.id || '';
}

function selectEnvironments(state) {
	var environments = selectPattern(state).environments || [];
	return environments.map(function (env) {
		return {
			id: env.name,
			name: env.displayName || env.name
		};
	});
}

function selectFlag(state) {
	return getManifestSelector('flag', '')(state);
}

function selectTags(state) {
	return getManifestSelector('tags', [])(state);
}

function selectVersion(state) {
	return getManifestSelector('version', '')(state);
}

function selectDisplay(state) {
	return getManifestSelector('display', true)(state);
}

function selectDependentPatterns(state) {
	return selectPattern(state).dependents || {};
}

function selectDependents(state) {
	return (0, _values2.default)(selectDependentPatterns(state)).filter(function (pattern) {
		return pattern.display;
	}).reduce(function (registry, pattern) {
		var navPattern = (0, _navigate2.default)(pattern.id, state.navigation) || { manifest: {} };
		var patternEntries = (0, _entries2.default)(navPattern.manifest.patterns || {});
		var localNames = patternEntries.filter(function (entry) {
			return entry[1] === state.id;
		}).map(function (entry) {
			return entry[0];
		});

		var amend = localNames.map(function (localName) {
			return {
				id: pattern.id,
				name: pattern.displayName || pattern.name,
				localName: localName,
				version: pattern.version
			};
		});

		return [].concat((0, _toConsumableArray3.default)(registry), (0, _toConsumableArray3.default)(amend));
	}, []);
}

function selectDependencies(state) {
	var rootPattern = selectPattern(state);
	return (0, _entries2.default)(rootPattern.dependencies || {}).filter(function (entry) {
		return entry[0] !== 'Pattern';
	}).filter(function (entry) {
		return entry[1].manifest.display;
	}).map(function (entry) {
		var _entry = (0, _slicedToArray3.default)(entry, 2);

		var localName = _entry[0];
		var pattern = _entry[1];

		var navPattern = (0, _navigate2.default)(pattern.id, state.navigation) || { manifest: {} };

		return {
			id: pattern.id,
			name: navPattern.manifest.displayName || navPattern.manifest.name,
			localName: localName,
			version: navPattern.manifest.version
		};
	});
}

function selectLoading(state) {
	var pattern = selectPattern(state);
	return [pattern.dataLoading, pattern.demoLoading, pattern.sourceLoading].some(Boolean);
}

function selectReloadTime(state) {
	var pattern = selectPattern(state);
	return pattern.reloadTime || null;
}

function selectReloadedTime(state) {
	var pattern = selectPattern(state);
	return pattern.reloadedTime || null;
}

function selectLocation(state) {
	return state.routing.locationBeforeTransitions;
}

function selectOnDemoReloaded(state) {
	var pattern = selectPattern(state);
	return pattern.onDemoReloaded || _lodash.noop;
}

function selectPatternErrors(state) {
	return selectPattern(state).errors || [];
}

function selectPatternErrored(state) {
	var pattern = selectPattern(state);
	return [pattern.dataErrored, pattern.demoErrored, pattern.sourceErrored].some(Boolean);
}

function selectCode(state) {
	var pattern = selectPattern(state);
	var sources = pattern.sources || {};
	var files = pattern.files || [];
	var errors = selectPatternErrors(state);

	var formats = (0, _lodash.uniqBy)(files.reduce(function (registry, file) {
		return [].concat((0, _toConsumableArray3.default)(registry), [{
			id: [pattern.id, file.type].join('/'),
			displayName: file.displayName,
			inExtname: _path2.default.extname(file.path),
			outExtname: '.' + file.out,
			type: file.type,
			in: file.in,
			out: file.out
		}]);
	}, []), 'id');

	return formats.map(function (format) {
		var formatFiles = files.filter(function (file) {
			return file.type === format.type;
		});
		var concerns = formatFiles.map(function (file) {
			return file.concern;
		});

		var hasDemo = concerns.includes('demo');
		var defaultConcern = hasDemo ? 'demo' : 'index';
		var parsed = _urlQuery2.default.parse(state.sourceId || '');

		var passedConcern = _path2.default.basename(parsed.pathname, _path2.default.extname(parsed.pathname)) || defaultConcern;

		var isApplicable = concerns.includes(passedConcern);

		var concern = isApplicable ? passedConcern : defaultConcern;

		var sourceType = format.type === 'documentation' ? 'source' : state.sourceType;
		var language = sourceType === 'source' ? format.in : format.out;
		var extname = format.inExtname;
		var pathname = [pattern.id, '' + concern + extname].join('/');
		var types = hasDemo && concern === 'index' ? ['source'] : ['source', 'transformed'];
		var type = hasDemo && concern === 'index' ? 'source' : sourceType;

		var id = _urlQuery2.default.format({
			pathname: pathname,
			query: {
				type: type,
				environment: state.environment
			}
		});

		var source = sources[id];
		var active = state.sourceId === id;

		var fileErrors = errors.filter(function (error) {
			return error.payload ? error.payload.id === id : error.patternFile === id;
		});

		var update = active && !source && !pattern.sourceLoading && !fileErrors.length;

		return {
			active: active,
			update: update,
			extname: extname,
			concern: concern,
			concerns: concerns,
			id: id,
			shortid: (0, _shortid2.default)(id),
			language: language,
			name: format.displayName,
			source: source || '',
			type: type,
			types: types
		};
	});
}
module.exports = exports['default'];

},{"../actions":385,"../actions/pattern-demo-error":394,"../components/pattern":450,"../utils/navigate":508,"../utils/url-query":510,"babel-runtime/core-js/object/entries":10,"babel-runtime/core-js/object/values":15,"babel-runtime/helpers/slicedToArray":27,"babel-runtime/helpers/toConsumableArray":28,"lodash":"lodash","path":206,"react-redux":"react-redux","redux":"redux","shortid":324}],472:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _reactRedux = require('react-redux');

var _problem = require('../components/content/problem');

var _problem2 = _interopRequireDefault(_problem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _reactRedux.connect)(mapProps)(_problem2.default);


function mapProps(state) {
	return {
		base: state.base,
		state: (0, _stringify2.default)(state, null, '  '),
		theme: state.theme,
		version: state.schema.appVersion,
		serverVersion: state.schema.serverVersion,
		clientVersion: state.schema.clientVersion,
		location: state.routing.locationBeforeTransitions,
		nodeVersion: state.schema.nodeVersion,
		npmVersion: state.schema.npmVersion,
		osName: state.schema.osName,
		osVersion: state.schema.osVersion,
		browserName: state.schema.clientRuntimeName,
		browserVersion: state.schema.clientRuntimeVersion,
		runtimeName: state.schema.serverRuntimeName,
		runtimeVersion: state.schema.serverRuntimeVersion,
		clientOsName: state.schema.clientOsName,
		clientOsVersion: state.schema.clientOsVersion,
		serverOsName: state.schema.serverOsName,
		serverOsVersion: state.schema.serverOsVersion
	};
}
module.exports = exports['default'];

},{"../components/content/problem":438,"babel-runtime/core-js/json/stringify":6,"react-redux":"react-redux"}],473:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactRedux = require('react-redux');

var _shortcuts = require('../components/content/shortcuts');

var _shortcuts2 = _interopRequireDefault(_shortcuts);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _reactRedux.connect)(mapProps)(_shortcuts2.default);


function mapProps(state) {
	return {
		base: state.base,
		location: state.routing.locationBeforeTransitions
	};
}
module.exports = exports['default'];

},{"../components/content/shortcuts":439,"react-redux":"react-redux"}],474:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

exports.default = function (data, el) {
	var store = (0, _store2.default)(_reactRouter.browserHistory, data);
	var history = (0, _reactRouterRedux.syncHistoryWithStore)(_reactRouter.browserHistory, store);
	var router = _react2.default.createElement(
		_reactRedux.Provider,
		{ store: store },
		_react2.default.createElement(
			_reactRouter.Router,
			{ history: history },
			(0, _routes2.default)(store)
		)
	);

	return (0, _reactDom.render)(router, el);
};

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactRouter = require('react-router');

var _reactRedux = require('react-redux');

var _reactRouterRedux = require('react-router-redux');

var _routes = require('./routes');

var _routes2 = _interopRequireDefault(_routes);

var _store = require('./store');

var _store2 = _interopRequireDefault(_store);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = exports['default'];

},{"./routes":475,"./store":476,"react":"react","react-dom":"react-dom","react-redux":"react-redux","react-router":"react-router","react-router-redux":"react-router-redux"}],475:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

exports.default = function (store) {
	var state = store.getState();
	return _react2.default.createElement(
		_reactRouter.Route,
		{ path: state.base, component: _application2.default },
		_react2.default.createElement(_reactRouter.IndexRoute, { component: _home2.default }),
		_react2.default.createElement(_reactRouter.Route, { path: 'pattern/*', component: _content2.default })
	);
};

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _application = require('../containers/application');

var _application2 = _interopRequireDefault(_application);

var _content = require('../containers/content');

var _content2 = _interopRequireDefault(_content);

var _home = require('../containers/home');

var _home2 = _interopRequireDefault(_home);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = exports['default'];

},{"../containers/application":466,"../containers/content":468,"../containers/home":469,"react":"react","react-router":"react-router"}],476:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.default = configureStore;

var _redux = require('redux');

var _reactRouterRedux = require('react-router-redux');

var _reduxThunk = require('redux-thunk');

var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

var _topologicallyCombineReducers = require('topologically-combine-reducers');

var _topologicallyCombineReducers2 = _interopRequireDefault(_topologicallyCombineReducers);

var _reduxPromise = require('redux-promise');

var _reduxPromise2 = _interopRequireDefault(_reduxPromise);

var _reducers = require('../reducers');

var _reducers2 = _interopRequireDefault(_reducers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function configureStore(history, initial) {
	var reducer = hydrateable((0, _topologicallyCombineReducers2.default)((0, _extends3.default)({ routing: _reactRouterRedux.routerReducer }, _reducers2.default), _reducers.dependencies));

	var middlewares = [_reduxThunk2.default, _reduxPromise2.default, /* logger(),*/(0, _reactRouterRedux.routerMiddleware)(history)];

	var middleware = _redux.applyMiddleware.apply(undefined, middlewares);
	var store = (0, _redux.createStore)(reducer, initial, (0, _redux.compose)(middleware));

	return store;
}
// import logger from 'redux-logger';

function hydrateable(reducer) {
	return function (state, action) {
		switch (action.type) {
			case '@@APPLY_STATE':
				return reducer(action.payload, action);
			default:
				return reducer(state, action);
		}
	};
}
module.exports = exports['default'];

},{"../reducers":485,"babel-runtime/helpers/extends":23,"react-router-redux":"react-router-redux","redux":"redux","redux-promise":"redux-promise","redux-thunk":"redux-thunk","topologically-combine-reducers":338}],477:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _handleActions;

var _reduxActions = require('redux-actions');

var _markBlock = require('../actions/mark-block');

var _markBlock2 = _interopRequireDefault(_markBlock);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultValue = null;

var markBlockHandler = function markBlockHandler(state, _ref) {
	var payload = _ref.payload;
	var active = payload.active;
	var id = payload.id;


	if (active) {
		return id;
	}

	return defaultValue;
};

var locationChangeHandler = function locationChangeHandler() {
	return defaultValue;
};

exports.default = (0, _reduxActions.handleActions)((_handleActions = {}, (0, _defineProperty3.default)(_handleActions, _markBlock2.default, markBlockHandler), (0, _defineProperty3.default)(_handleActions, '@@router/LOCATION_CHANGE', locationChangeHandler), _handleActions), defaultValue);
module.exports = exports['default'];

},{"../actions/mark-block":390,"babel-runtime/helpers/defineProperty":22,"redux-actions":"redux-actions"}],478:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.getBase = getBase;

var _reduxActions = require('redux-actions');

var _depth = require('./depth');

function getBase(pathname) {
	var depth = (0, _depth.getDepth)(pathname);
	return depth > 0 ? '/' + pathname.split('/').filter(Boolean).slice(0, depth).join('/') + '/' : '/';
}

exports.default = (0, _reduxActions.handleAction)('@@router/LOCATION_CHANGE', {
	next: function next(_, _ref) {
		var pathname = _ref.payload.pathname;

		return getBase(pathname);
	}
}, '/');

},{"./depth":481,"redux-actions":"redux-actions"}],479:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

var _lodash = require('lodash');

var _actions = require('../actions');

var _handleDependentActions = require('../actions/handle-dependent-actions');

var _handleDependentActions2 = _interopRequireDefault(_handleDependentActions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultValue = {};

exports.default = (0, _handleDependentActions2.default)((0, _defineProperty3.default)({}, _actions.demoContentResize, function (state, _ref, _ref2) {
	var payload = _ref.payload;
	var pattern = _ref2.pattern;

	var previous = state[pattern.id];
	var next = { width: payload.width, height: payload.height };
	if (!(0, _lodash.isEqual)(previous, next)) {
		return (0, _extends4.default)({}, state, (0, _defineProperty3.default)({}, pattern.id, next));
	}
	return state;
}), { defaultValue: defaultValue, dependencies: ['pattern'] });
module.exports = exports['default'];

},{"../actions":385,"../actions/handle-dependent-actions":384,"babel-runtime/helpers/defineProperty":22,"babel-runtime/helpers/extends":23,"lodash":"lodash"}],480:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

var _getIdByPathname = require('../utils/get-id-by-pathname');

var _getIdByPathname2 = _interopRequireDefault(_getIdByPathname);

var _handleDependentActions = require('../actions/handle-dependent-actions');

var _handleDependentActions2 = _interopRequireDefault(_handleDependentActions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _handleDependentActions2.default)({
	'@@router/LOCATION_CHANGE': function routerLOCATION_CHANGE(state, action, _ref) {
		var base = _ref.base;

		var id = (0, _getIdByPathname2.default)(action.payload.pathname, base) || null;
		var x = Math.max(100, Number(action.payload.query.width));
		var y = Math.max(100, Number(action.payload.query.height));

		var previous = state[id] || {};

		if (previous.x !== x || previous.y !== y) {
			return (0, _extends4.default)({}, state, (0, _defineProperty3.default)({}, id, (0, _extends4.default)({}, state[id], {
				x: x,
				y: y
			})));
		}
		return state;
	}
}, { defaultValue: {}, dependencies: ['base'] });
module.exports = exports['default'];

},{"../actions/handle-dependent-actions":384,"../utils/get-id-by-pathname":507,"babel-runtime/helpers/defineProperty":22,"babel-runtime/helpers/extends":23}],481:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.getDepth = getDepth;

var _reduxActions = require('redux-actions');

function getDepth(pathname) {
	var fragments = pathname.split('/').filter(Boolean);
	var fragmentIndex = fragments.indexOf('pattern');

	var index = fragmentIndex === -1 ? fragments.length : fragmentIndex;

	return fragments.slice(0, index).filter(Boolean).length;
}

exports.default = (0, _reduxActions.handleAction)('@@router/LOCATION_CHANGE', {
	next: function next(_, _ref) {
		var pathname = _ref.payload.pathname;

		return getDepth(pathname);
	}
}, '.');

},{"redux-actions":"redux-actions"}],482:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reduxActions = require('redux-actions');

var _urlQuery = require('../utils/url-query');

var _urlQuery2 = _interopRequireDefault(_urlQuery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultValue = 'index';

function getEnvironment(pathname) {
	return _urlQuery2.default.parse(pathname).query.environment || defaultValue;
}

function onEnvironmentLocationChange(_, action) {
	return getEnvironment(action.payload.pathname);
}

exports.default = (0, _reduxActions.handleActions)({
	'@@router/LOCATION_CHANGE': onEnvironmentLocationChange
}, defaultValue);
module.exports = exports['default'];

},{"../utils/url-query":510,"redux-actions":"redux-actions"}],483:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reduxActions = require('redux-actions');

var defaultValue = true;

function onExpandedLocationChange(_, action) {
	return action.payload.query.expanded !== 'false';
}

exports.default = (0, _reduxActions.handleActions)({
	'@@router/LOCATION_CHANGE': onExpandedLocationChange
}, defaultValue);
module.exports = exports['default'];

},{"redux-actions":"redux-actions"}],484:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _getIdByPathname = require('../utils/get-id-by-pathname');

var _getIdByPathname2 = _interopRequireDefault(_getIdByPathname);

var _handleDependentActions = require('../actions/handle-dependent-actions');

var _handleDependentActions2 = _interopRequireDefault(_handleDependentActions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function handler(_, _ref, _ref2) {
	var payload = _ref.payload;
	var base = _ref2.base;

	return (0, _getIdByPathname2.default)(payload.pathname, base) || null;
}

exports.default = (0, _handleDependentActions2.default)({
	'@@router/LOCATION_CHANGE': handler
}, {
	dependencies: ['base']
});
module.exports = exports['default'];

},{"../actions/handle-dependent-actions":384,"../utils/get-id-by-pathname":507}],485:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.dependencies = undefined;

var _activeBlock = require('./active-block');

var _activeBlock2 = _interopRequireDefault(_activeBlock);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _depth = require('./depth');

var _depth2 = _interopRequireDefault(_depth);

var _demoContentDimensions = require('./demo-content-dimensions');

var _demoContentDimensions2 = _interopRequireDefault(_demoContentDimensions);

var _demoDimensions = require('./demo-dimensions');

var _demoDimensions2 = _interopRequireDefault(_demoDimensions);

var _environment = require('./environment');

var _environment2 = _interopRequireDefault(_environment);

var _expanded = require('./expanded');

var _expanded2 = _interopRequireDefault(_expanded);

var _id = require('./id');

var _id2 = _interopRequireDefault(_id);

var _issue = require('./issue');

var _issue2 = _interopRequireDefault(_issue);

var _lightbox = require('./lightbox');

var _lightbox2 = _interopRequireDefault(_lightbox);

var _menuEnabled = require('./menu-enabled');

var _menuEnabled2 = _interopRequireDefault(_menuEnabled);

var _messages = require('./messages');

var _messages2 = _interopRequireDefault(_messages);

var _navigation = require('./navigation');

var _navigation2 = _interopRequireDefault(_navigation);

var _opacity = require('./opacity');

var _opacity2 = _interopRequireDefault(_opacity);

var _pattern = require('./pattern');

var _pattern2 = _interopRequireDefault(_pattern);

var _rulers = require('./rulers');

var _rulers2 = _interopRequireDefault(_rulers);

var _search = require('./search');

var _search2 = _interopRequireDefault(_search);

var _searchMatches = require('./search-matches');

var _searchMatches2 = _interopRequireDefault(_searchMatches);

var _scrollDemoX = require('./scroll-demo-x');

var _scrollDemoX2 = _interopRequireDefault(_scrollDemoX);

var _scrollDemoY = require('./scroll-demo-y');

var _scrollDemoY2 = _interopRequireDefault(_scrollDemoY);

var _sourceExpanded = require('./source-expanded');

var _sourceExpanded2 = _interopRequireDefault(_sourceExpanded);

var _sourceId = require('./source-id');

var _sourceId2 = _interopRequireDefault(_sourceId);

var _sourceType = require('./source-type');

var _sourceType2 = _interopRequireDefault(_sourceType);

var _styles = require('./styles');

var _styles2 = _interopRequireDefault(_styles);

var _theme = require('./theme');

var _theme2 = _interopRequireDefault(_theme);

var _window = require('./window');

var _window2 = _interopRequireDefault(_window);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ident = function ident() {
	var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	return state;
};
var getDependencies = function getDependencies() {
	var reducer = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	return reducer.dependencies || [];
};

exports.default = {
	activeBlock: _activeBlock2.default,
	base: _base2.default,
	config: ident,
	demoContentDimensions: _demoContentDimensions2.default,
	demoDimensions: _demoDimensions2.default,
	depth: _depth2.default,
	environment: _environment2.default,
	expanded: _expanded2.default,
	id: _id2.default,
	issue: _issue2.default,
	lightbox: _lightbox2.default,
	menuEnabled: _menuEnabled2.default,
	messages: _messages2.default,
	navigation: _navigation2.default,
	opacity: _opacity2.default,
	pattern: _pattern2.default,
	rulers: _rulers2.default,
	schema: ident,
	scrollDemoX: _scrollDemoX2.default,
	scrollDemoY: _scrollDemoY2.default,
	search: _search2.default,
	searchMatches: _searchMatches2.default,
	sourceExpanded: _sourceExpanded2.default,
	sourceId: _sourceId2.default,
	sourceType: _sourceType2.default,
	startBase: ident,
	styles: _styles2.default,
	theme: _theme2.default,
	window: _window2.default
};
var dependencies = exports.dependencies = {
	pattern: getDependencies(_pattern2.default),
	searchMatches: getDependencies(_searchMatches2.default),
	styles: getDependencies(_styles2.default),
	scrollDemoY: getDependencies(_scrollDemoY2.default),
	scrollDemoX: getDependencies(_scrollDemoX2.default)
};

},{"./active-block":477,"./base":478,"./demo-content-dimensions":479,"./demo-dimensions":480,"./depth":481,"./environment":482,"./expanded":483,"./id":484,"./issue":486,"./lightbox":487,"./menu-enabled":488,"./messages":489,"./navigation":490,"./opacity":491,"./pattern":492,"./rulers":493,"./scroll-demo-x":494,"./scroll-demo-y":495,"./search":498,"./search-matches":497,"./source-expanded":499,"./source-id":500,"./source-type":501,"./styles":502,"./theme":503,"./window":504}],486:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reduxActions = require('redux-actions');

var defaultValue = false;

function onIssueLocationChange(_, action) {
	return action.payload.query.issue === 'true';
}

exports.default = (0, _reduxActions.handleActions)({
	'@@router/LOCATION_CHANGE': onIssueLocationChange
}, defaultValue);
module.exports = exports['default'];

},{"redux-actions":"redux-actions"}],487:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reduxActions = require('redux-actions');

var defaultValue = '';

function onLightboxLocationChange(_, action) {
	return action.payload.query.lightbox;
}

exports.default = (0, _reduxActions.handleActions)({
	'@@router/LOCATION_CHANGE': onLightboxLocationChange
}, defaultValue);
module.exports = exports['default'];

},{"redux-actions":"redux-actions"}],488:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reduxActions = require('redux-actions');

var defaultValue = false;

var menuEnabledlocationChangeHandler = function menuEnabledlocationChangeHandler(_, _ref) {
	var payload = _ref.payload;

	return payload.query['menu-enabled'] === 'true';
};

exports.default = (0, _reduxActions.handleActions)({
	'@@router/LOCATION_CHANGE': menuEnabledlocationChangeHandler
}, defaultValue);
module.exports = exports['default'];

},{"redux-actions":"redux-actions"}],489:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _stripAnsi = require('strip-ansi');

var _stripAnsi2 = _interopRequireDefault(_stripAnsi);

var _md = require('md5');

var _md2 = _interopRequireDefault(_md);

var _reduxActions = require('redux-actions');

var _actions = require('../actions');

var _promiseThunkAction = require('../actions/promise-thunk-action');

var _composeReducers = require('../utils/compose-reducers');

var _composeReducers2 = _interopRequireDefault(_composeReducers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultValue = [];

function createMessage(error) {
	var seed = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];

	error.cwd = '/Users/marneb/projects/patternplate/patternplate/patterns/';
	var lines = error.message.split('\n');
	return {
		type: 'error',
		id: (0, _md2.default)([seed].concat((0, _toConsumableArray3.default)(lines)).join('-')),
		subject: lines[0],
		body: (0, _stripAnsi2.default)(lines.slice(1, lines.length).join('\n')),
		stack: (0, _stripAnsi2.default)(error.stack),
		pattern: error.pattern,
		retry: Boolean(error.pattern),
		file: error.cwd && error.file ? _path2.default.relative(error.cwd, error.file).slice(-25) : null
	};
}

exports.default = (0, _composeReducers2.default)((0, _promiseThunkAction.handlePromiseThunkAction)(_actions.loadPatternData, {
	success: function success(state, _ref) {
		var payload = _ref.payload;

		return state.filter(function (message) {
			return !message.pattern || message.pattern === payload.id;
		});
	},
	throws: function throws(state, _ref2) {
		var error = _ref2.payload;

		var message = createMessage(error, 1);
		return [message].concat((0, _toConsumableArray3.default)(state.slice(0, 2)));
	}
}, { defaultValue: defaultValue }), (0, _promiseThunkAction.handlePromiseThunkAction)(_actions.loadPatternFile, {
	throws: function throws(state, _ref3) {
		var error = _ref3.payload;

		var message = createMessage(error, 1);
		return [message].concat((0, _toConsumableArray3.default)(state.slice(0, 2)));
	}
}), (0, _reduxActions.handleAction)(_actions.dismissMessage, function (state, _ref4) {
	var id = _ref4.payload;

	return state.filter(function (message) {
		return message.id !== id;
	});
}, { defaultValue: defaultValue }), (0, _reduxActions.handleAction)(_actions.dismissAllMessages, function () {
	return defaultValue;
}, { defaultValue: defaultValue }), (0, _reduxActions.handleAction)('PATTERN_DEMO_ERROR', function (state, _ref5) {
	var error = _ref5.payload;

	var message = createMessage(error, 1);
	return [message].concat((0, _toConsumableArray3.default)(state.slice(0, 2)));
}));
module.exports = exports['default'];

},{"../actions":385,"../actions/promise-thunk-action":395,"../utils/compose-reducers":506,"babel-runtime/helpers/toConsumableArray":28,"md5":"md5","path":206,"redux-actions":"redux-actions","strip-ansi":"strip-ansi"}],490:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _actions = require('../actions');

var _promiseThunkAction = require('../actions/promise-thunk-action');

var _navigate = require('../utils/navigate');

var _navigate2 = _interopRequireDefault(_navigate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var handlePatternLoad = (0, _promiseThunkAction.handlePromiseThunkAction)(_actions.loadPatternData, {
	success: function success(state, _ref) {
		var payload = _ref.payload;

		var match = (0, _navigate2.default)(payload.id, state);
		if (match) {
			var _ret = function () {
				var fragments = payload.id.split('/');

				var entities = fragments.map(function (fragment, index) {
					return (0, _navigate2.default)(fragments.slice(0, index + 1).join('/'), state);
				});

				var entityPath = entities.reduce(function (registry, entity) {
					var id = _path2.default.basename(entity.id);
					var amend = entity.type === 'folder' ? [id, 'children'] : [id];
					return [].concat((0, _toConsumableArray3.default)(registry), amend);
				}, []).join('.');

				var data = (0, _lodash.merge)({}, match, {
					dependencies: payload.dependencies,
					dependents: payload.dependents,
					display: payload.display,
					environments: payload.environments,
					files: payload.files,
					id: payload.id,
					manifest: {
						displayName: payload.manifest.displayName,
						flag: payload.manifest.flag,
						tags: payload.manifest.tags,
						name: payload.manifest.name,
						version: payload.manifest.version
					}
				});
				var envelope = (0, _lodash.zipObjectDeep)([entityPath], [data]);
				return {
					v: (0, _lodash.merge)({}, state, envelope)
				};
			}();

			if ((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === "object") return _ret.v;
		}
		return state;
	}
}, {});

exports.default = handlePatternLoad;
module.exports = exports['default'];

},{"../actions":385,"../actions/promise-thunk-action":395,"../utils/navigate":508,"babel-runtime/helpers/toConsumableArray":28,"babel-runtime/helpers/typeof":29,"lodash":"lodash","path":206}],491:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reduxActions = require('redux-actions');

var defaultValue = true;

function onOpacityLocationChange(_, action) {
	return action.payload.query.opacity !== 'false';
}

exports.default = (0, _reduxActions.handleActions)({
	'@@router/LOCATION_CHANGE': onOpacityLocationChange
}, defaultValue);
module.exports = exports['default'];

},{"redux-actions":"redux-actions"}],492:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

var _reduxActions = require('redux-actions');

var _actions = require('../actions');

var _promiseThunkAction = require('../actions/promise-thunk-action');

var _composeReducers = require('../utils/compose-reducers');

var _composeReducers2 = _interopRequireDefault(_composeReducers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var handlePatternLoad = (0, _promiseThunkAction.handlePromiseThunkAction)(_actions.loadPatternData, {
	start: function start(state) {
		return {
			errors: state.errors,
			dataErrored: false,
			demoErrored: false,
			sourceErrored: false,
			dataLoading: true,
			demoLoading: Boolean(state.id),
			fileLoading: Boolean(state.sourceId),
			reloadTime: state.reloadTime,
			reloadedTime: state.reloadedTime,
			sources: state.sources
		};
	},
	success: function success(state, _ref, _ref2) {
		var payload = _ref.payload;
		var id = _ref2.id;

		var sources = state ? state.sources : {};
		var errors = state ? state.errors || [] : [];

		if (id !== payload.id) {
			return state;
		}

		return (0, _extends4.default)({}, state, {
			id: payload.id,
			dependencies: payload.dependencies,
			environments: payload.environments,
			dataErrored: false,
			dataLoading: false,
			files: payload.files,
			manifest: payload.manifest,
			sources: sources,
			errors: errors
		});
	},
	throws: function throws(state, _ref3) {
		var payload = _ref3.payload;

		return {
			dataLoading: false,
			errors: [].concat((0, _toConsumableArray3.default)(state.errors), [{ file: null, id: state.id, payload: payload }]),
			dataErrored: true
		};
	}
}, {
	defaultValue: {},
	dependencies: ['id']
});

var handleSourceLoad = (0, _promiseThunkAction.handlePromiseThunkAction)(_actions.loadPatternFile, {
	start: function start(state) {
		return (0, _extends4.default)({}, state, {
			sourceLoading: true,
			sourceErrored: false
		});
	},
	success: function success(state, _ref4) {
		var payload = _ref4.payload;

		return (0, _extends4.default)({}, state, {
			sourceLoading: false,
			sourceErrored: false,
			sources: (0, _extends4.default)({}, state.sources, (0, _defineProperty3.default)({}, payload.id, payload.source))
		});
	},
	throws: function throws(state, _ref5) {
		var error = _ref5.payload;

		return (0, _extends4.default)({}, state, {
			sourceLoading: false,
			sourceErrored: true,
			errors: [].concat((0, _toConsumableArray3.default)(state.errors), [{ id: state.id, payload: error.payload }])
		});
	}
});

var handleLoadPatternDemo = (0, _reduxActions.handleAction)(_actions.loadPatternDemo, function (state, _ref6) {
	var loading = _ref6.payload;

	return (0, _extends4.default)({}, state, {
		demoErrored: false,
		demoLoading: loading,
		reloadTime: loading ? Date.now() : state.reloadTime
	});
});

var reducers = (0, _composeReducers2.default)(handlePatternLoad, handleSourceLoad, handleLoadPatternDemo);

exports.default = reducers;
module.exports = exports['default'];

},{"../actions":385,"../actions/promise-thunk-action":395,"../utils/compose-reducers":506,"babel-runtime/helpers/defineProperty":22,"babel-runtime/helpers/extends":23,"babel-runtime/helpers/toConsumableArray":28,"redux-actions":"redux-actions"}],493:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reduxActions = require('redux-actions');

var defaultValue = false;

function onRulersLocationChange(_, action) {
	return action.payload.query.rulers === 'true';
}

exports.default = (0, _reduxActions.handleActions)({
	'@@router/LOCATION_CHANGE': onRulersLocationChange
}, defaultValue);
module.exports = exports['default'];

},{"redux-actions":"redux-actions"}],494:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _handleDependentActions = require('../actions/handle-dependent-actions');

var _handleDependentActions2 = _interopRequireDefault(_handleDependentActions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _handleDependentActions2.default)({
	'@@router/LOCATION_CHANGE': function routerLOCATION_CHANGE(state, action, _ref) {
		var pattern = _ref.pattern;

		return { x: 0, pattern: pattern };
	},
	'SCROLL_DEMO_X': function SCROLL_DEMO_X(state, _ref2) {
		var payload = _ref2.payload;

		return (0, _extends3.default)({}, state, { x: payload });
	}
}, { defaultValue: { x: 0 }, dependencies: ['pattern'] });
module.exports = exports['default'];

},{"../actions/handle-dependent-actions":384,"babel-runtime/helpers/extends":23}],495:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _handleDependentActions = require('../actions/handle-dependent-actions');

var _handleDependentActions2 = _interopRequireDefault(_handleDependentActions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _handleDependentActions2.default)({
	'@@router/LOCATION_CHANGE': function routerLOCATION_CHANGE(state, action, _ref) {
		var pattern = _ref.pattern;

		return { y: 0, pattern: pattern };
	},
	'SCROLL_DEMO_Y': function SCROLL_DEMO_Y(state, _ref2) {
		var payload = _ref2.payload;

		return (0, _extends3.default)({}, state, { y: payload });
	}
}, { defaultValue: { y: 0 }, dependencies: ['pattern'] });
module.exports = exports['default'];

},{"../actions/handle-dependent-actions":384,"babel-runtime/helpers/extends":23}],496:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

exports.searchFolder = searchFolder;
exports.matchPattern = matchPattern;
exports.createStems = createStems;
exports.createTokens = createTokens;
exports.getPatterns = getPatterns;
exports.filterPatterns = filterPatterns;
exports.isToken = isToken;
exports.isStem = isStem;
exports.isTagToken = isTagToken;
exports.isFlagToken = isFlagToken;
exports.isDependsToken = isDependsToken;
exports.isProvidesToken = isProvidesToken;
exports.getTokenValues = getTokenValues;

var _lodash = require('lodash');

var _navigate = require('../../utils/navigate');

var _navigate2 = _interopRequireDefault(_navigate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function searchFolder(search, navigation) {
	var merge = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	if (!search) {
		return;
	}

	var cut = search.slice(0, search.length - 1);
	var match = (0, _navigate2.default)(cut, navigation);

	if (!match || match && !match.type === 'folder') {
		return;
	}

	return rewrap(cut, match, merge);
}

function rewrap(id, data, merge) {
	var fragments = id.split('/').filter(Boolean);
	var stack = [];

	return fragments.reduce(function (registry, fragment, index) {
		var sub = stack.length > 0 ? (0, _navigate2.default)(stack.join('/'), registry) : registry;
		sub[fragment] = fragments.length - 1 === index ? (0, _extends4.default)({}, data, merge) : (0, _extends4.default)({}, merge);
		stack.push(fragment);
		return registry;
	}, {});
}

function matchPattern(pattern) {
	var criteria = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	if ((0, _keys2.default)(criteria).length === 0) {
		return true;
	}

	return (0, _entries2.default)(criteria).every(function (item) {
		var _item = (0, _slicedToArray3.default)(item, 2);

		var name = _item[0];
		var values = _item[1];


		if (values.length === 0) {
			return true;
		}

		if (name === 'tags') {
			var _ret = function () {
				var tags = pattern.manifest.tags || [];
				return {
					v: values.some(function (tag) {
						return tags.includes(tag);
					})
				};
			}();

			if ((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === "object") return _ret.v;
		} else if (name === 'flags') {
			var _ret2 = function () {
				var flag = pattern.manifest.flag || '';
				return {
					v: values.some(function (valueFlag) {
						return valueFlag === flag;
					})
				};
			}();

			if ((typeof _ret2 === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret2)) === "object") return _ret2.v;
		} else if (name === 'depends') {
			var _ret3 = function () {
				var dependencies = (0, _keys2.default)(pattern.manifest.patterns || {});
				return {
					v: values.some(function (dependency) {
						return dependencies.includes(dependency);
					})
				};
			}();

			if ((typeof _ret3 === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret3)) === "object") return _ret3.v;
		} else if (name === 'provides') {
			var _ret4 = function () {
				var dependents = (0, _keys2.default)(pattern.manifest.dependentPatterns || {});
				return {
					v: values.some(function (dependent) {
						return dependents.includes(dependent);
					})
				};
			}();

			if ((typeof _ret4 === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret4)) === "object") return _ret4.v;
		}

		return true;
	});
}

function createStems(search) {
	return search.split(' ').filter(isStem).filter(Boolean);
}

function createTokens(search) {
	var fragments = search.split(' ');
	var tokens = fragments.filter(isToken);
	var tags = (0, _lodash.flatten)(tokens.filter(isTagToken).map(getTokenValues));
	var flags = (0, _lodash.flatten)(tokens.filter(isFlagToken).map(getTokenValues));
	var depends = (0, _lodash.flatten)(tokens.filter(isDependsToken).map(getTokenValues));
	var provides = (0, _lodash.flatten)(tokens.filter(isProvidesToken).map(getTokenValues));

	return {
		tags: tags, flags: flags, depends: depends, provides: provides
	};
}

function getPatterns(haystack) {
	var criteria = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	return (0, _values2.default)(haystack).reduce(function (registry, item) {
		if (item.type === 'pattern') {
			return matchPattern(item, criteria) ? [].concat((0, _toConsumableArray3.default)(registry), [item]) : registry;
		} else if (item.type === 'folder') {
			return [].concat((0, _toConsumableArray3.default)(registry), (0, _toConsumableArray3.default)(getPatterns(item.children, criteria)));
		}
		return registry;
	}, []);
}

function filterPatterns(patterns, ids) {
	return getPatterns(patterns).filter(function (_ref) {
		var id = _ref.id;
		return ids.includes(id);
	}).reduce(function (registry, item) {
		var fragments = item.id.split('/');
		var key = fragments[fragments.length - 1];
		return (0, _extends4.default)({}, registry, (0, _defineProperty3.default)({}, key, item));
	}, {});
}

var tokenKeys = ['tag', 'flag', 'depends', 'provides'];

function matchesToken(key, token) {
	return token.startsWith(key + ':');
}

function isToken(token) {
	return tokenKeys.some(function (tokenKey) {
		return matchesToken(tokenKey, token);
	});
}

function isStem(token) {
	return !isToken(token);
}

function isTagToken(token) {
	return matchesToken('tag', token);
}

function isFlagToken(token) {
	return matchesToken('flag', token);
}

function isDependsToken(token) {
	return matchesToken('depends', token);
}

function isProvidesToken(token) {
	return matchesToken('provides', token);
}

function getTokenValues(token) {
	return token.split(':').slice(1).join('.').split(',').filter(Boolean).map(function (item) {
		return item.trim();
	});
}

},{"../../utils/navigate":508,"babel-runtime/core-js/object/entries":10,"babel-runtime/core-js/object/keys":13,"babel-runtime/core-js/object/values":15,"babel-runtime/helpers/defineProperty":22,"babel-runtime/helpers/extends":23,"babel-runtime/helpers/slicedToArray":27,"babel-runtime/helpers/toConsumableArray":28,"babel-runtime/helpers/typeof":29,"lodash":"lodash"}],497:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _fuse = require('fuse.js');

var _fuse2 = _interopRequireDefault(_fuse);

var _helpers = require('./helpers');

var helpers = _interopRequireWildcard(_helpers);

var _handleDependentActions = require('../../actions/handle-dependent-actions');

var _handleDependentActions2 = _interopRequireDefault(_handleDependentActions);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultValue = [];
var dependencies = ['expanded', 'navigation'];

var searchMatchReducer = (0, _handleDependentActions2.default)({
	'@@router/LOCATION_CHANGE': locationChangeHandler
}, { defaultValue: defaultValue, dependencies: dependencies });

exports.default = searchMatchReducer;


function locationChangeHandler(state, action, dependencies) {
	var navigation = dependencies.navigation;
	var expanded = dependencies.expanded;
	var _action$payload$query = action.payload.query.search;
	var search = _action$payload$query === undefined ? '' : _action$payload$query;


	if (!expanded) {
		return navigation;
	}

	// Check for a matching folder first
	// e.g. atoms/ => atoms
	/* const folder = helpers.searchFolder(search, navigation, {expanded: true});
 	if (folder) {
 	return folder;
 } */

	var stems = helpers.createStems(search);
	var tokens = helpers.createTokens(search);
	var patterns = helpers.getPatterns(navigation, tokens);

	var ids = stems.length > 0 ? createFuse(patterns, stems).search(stems.join(' ')) : patterns.map(function (pattern) {
		return pattern.id;
	});

	// Boil down to single pattern if a fully qualified id has been entered

	var _ids$filter = ids.filter(function (id) {
		return id === search;
	});

	var _ids$filter2 = (0, _slicedToArray3.default)(_ids$filter, 1);

	var direct = _ids$filter2[0];

	var matches = direct ? [direct] : ids;

	return helpers.filterPatterns(navigation, matches);
}

function createFuse(patterns) {
	return new _fuse2.default(patterns, {
		id: 'id',
		threshold: 0.3,
		keys: ['id', 'manifest.name', 'manifest.displayName', 'manifest.tags', 'manifest.flag']
	});
}
module.exports = exports['default'];

},{"../../actions/handle-dependent-actions":384,"./helpers":496,"babel-runtime/helpers/slicedToArray":27,"fuse.js":"fuse.js"}],498:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reduxActions = require('redux-actions');

var defaultValue = '';

function onSearchLocationChange(_, action) {
	return action.payload.query.search;
}

exports.default = (0, _reduxActions.handleActions)({
	'@@router/LOCATION_CHANGE': onSearchLocationChange
}, defaultValue);
module.exports = exports['default'];

},{"redux-actions":"redux-actions"}],499:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reduxActions = require('redux-actions');

var defaultValue = false;

var locationChangeHandler = function locationChangeHandler(_, _ref) {
	var payload = _ref.payload;

	return payload.query['source-expanded'] === 'true';
};

exports.default = (0, _reduxActions.handleActions)({
	'@@router/LOCATION_CHANGE': locationChangeHandler
}, defaultValue);
module.exports = exports['default'];

},{"redux-actions":"redux-actions"}],500:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _handleDependentActions = require('../actions/handle-dependent-actions');

var _handleDependentActions2 = _interopRequireDefault(_handleDependentActions);

var _urlQuery = require('../utils/url-query');

var _urlQuery2 = _interopRequireDefault(_urlQuery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultValue = null;

function handler(_, _ref, _ref2) {
	var payload = _ref.payload;
	var environment = _ref2.environment;

	if (payload.query.source) {
		var parsed = _urlQuery2.default.parse(payload.query.source);
		return _urlQuery2.default.format((0, _extends3.default)({}, parsed, {
			query: (0, _extends3.default)({}, parsed.query, {
				environment: environment
			})
		}));
	}
	return defaultValue;
}

exports.default = (0, _handleDependentActions2.default)({
	'@@router/LOCATION_CHANGE': handler
}, {
	dependencies: ['environment']
});
module.exports = exports['default'];

},{"../actions/handle-dependent-actions":384,"../utils/url-query":510,"babel-runtime/helpers/extends":23}],501:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reduxActions = require('redux-actions');

var _urlQuery = require('../utils/url-query');

var _urlQuery2 = _interopRequireDefault(_urlQuery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultValue = 'source';

function handler(state, _ref) {
	var payload = _ref.payload;

	if (!payload.query.source) {
		return state;
	}

	var parsed = _urlQuery2.default.parse(payload.query.source || '');
	return parsed.query.type || defaultValue;
}

exports.default = (0, _reduxActions.handleAction)('@@router/LOCATION_CHANGE', handler, defaultValue);
module.exports = exports['default'];

},{"../utils/url-query":510,"redux-actions":"redux-actions"}],502:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _handleDependentActions = require('../actions/handle-dependent-actions');

var _handleDependentActions2 = _interopRequireDefault(_handleDependentActions);

var _themeLoaded = require('../actions/theme-loaded');

var _themeLoaded2 = _interopRequireDefault(_themeLoaded);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultValue = [];
var dependencies = ['theme'];

var stylesReducer = (0, _handleDependentActions2.default)((0, _defineProperty3.default)({
	'@@router/LOCATION_CHANGE': onLocationChange
}, _themeLoaded2.default, onThemeLoaded), { defaultValue: defaultValue, dependencies: dependencies });

exports.default = stylesReducer;


function onLocationChange(state, _, _ref) {
	var theme = _ref.theme;

	if (theme === state[state.length - 1]) {
		return state;
	}

	return [].concat((0, _toConsumableArray3.default)(state), [theme]);
}

function onThemeLoaded(state, action) {
	return [action.payload];
}
module.exports = exports['default'];

},{"../actions/handle-dependent-actions":384,"../actions/theme-loaded":400,"babel-runtime/helpers/defineProperty":22,"babel-runtime/helpers/toConsumableArray":28}],503:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reduxActions = require('redux-actions');

var defaultValue = 'light';

var locationChangeHandler = function locationChangeHandler(_, _ref) {
	var payload = _ref.payload;

	return payload.query.theme || defaultValue;
};

exports.default = (0, _reduxActions.handleActions)({
	'@@router/LOCATION_CHANGE': locationChangeHandler
}, defaultValue);
module.exports = exports['default'];

},{"redux-actions":"redux-actions"}],504:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _lodash = require('lodash');

var _reduxActions = require('redux-actions');

var _actions = require('../actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultValue = {
	height: 0,
	width: 0
};

exports.default = (0, _reduxActions.handleActions)((0, _defineProperty3.default)({}, _actions.windowResize, onWindowResize), defaultValue);


function onWindowResize(state, _ref) {
	var payload = _ref.payload;

	var next = { width: payload.width, height: payload.height };
	if (!(0, _lodash.isEqual)(next, state)) {
		return next;
	}
	return state;
}
module.exports = exports['default'];

},{"../actions":385,"babel-runtime/helpers/defineProperty":22,"lodash":"lodash","redux-actions":"redux-actions"}],505:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

exports.getPatterns = getPatterns;
exports.default = getAugmentedChildren;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function hierarchyCompare(a, b) {
	return a.order === b.order ? a.displayName.localeCompare(b.displayName) : a.order > b.order;
}

function augmentFolderData(hierarchy) {
	// extract displayName and order from hierarchy config for the folder
	return function (folder) {
		var splits = folder.id.split('/');
		var key = splits[splits.length - 1];

		var defaultHierarchyEntry = {
			order: -1,
			displayName: key,
			icon: 'folder',
			iconActive: 'folder-open'
		};

		var hierarchyEntry = hierarchy[folder.id];

		return (0, _assign2.default)({}, folder, defaultHierarchyEntry, hierarchyEntry);
	};
}

function augmentPatternData() {
	return function (pattern) {
		return (0, _extends3.default)({}, pattern, {
			displayName: pattern.manifest.displayName || pattern.manifest.name
		});
	};
}

function getPatterns(data, hierarchy) {
	return (0, _values2.default)(data).reduce(function (pool, item) {
		var amend = item.type === 'pattern' ? [item] : [];
		return [].concat((0, _toConsumableArray3.default)(pool), amend, (0, _toConsumableArray3.default)(getPatterns(item.children || {}, hierarchy)));
	}, []);
}

function getAugmentedChildren(data, hierarchy) {
	var folders = (0, _values2.default)(data).filter(function (item) {
		return item.type === 'folder';
	}).map(augmentFolderData(hierarchy)).sort(hierarchyCompare);

	var patterns = (0, _values2.default)(data).filter(function (item) {
		return item.type === 'pattern';
	}).map(augmentPatternData(hierarchy)).sort(hierarchyCompare);

	return {
		folders: folders,
		patterns: patterns
	};
}

},{"babel-runtime/core-js/object/assign":7,"babel-runtime/core-js/object/values":15,"babel-runtime/helpers/extends":23,"babel-runtime/helpers/toConsumableArray":28}],506:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

exports.default = composeReducers;

var _lodash = require('lodash');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function composeReducers() {
	for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		args[_key] = arguments[_key];
	}

	var required = args.reduce(function (registry, arg) {
		var amend = arg.dependencies || [];
		return [].concat((0, _toConsumableArray3.default)(registry), (0, _toConsumableArray3.default)(amend));
	}, []);

	var reducer = function reducer(state, action, dependencies) {
		return args.reduce(function (state, arg) {
			return arg(state, action, (0, _lodash.pick)(dependencies, arg.dependencies || []));
		}, state);
	};

	reducer.dependencies = required;
	return reducer;
}
module.exports = exports['default'];

},{"babel-runtime/helpers/toConsumableArray":28,"lodash":"lodash"}],507:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = getIdByPathname;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _urlQuery = require('./url-query');

var _urlQuery2 = _interopRequireDefault(_urlQuery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getIdByPathname(pathname) {
	var base = arguments.length <= 1 || arguments[1] === undefined ? '/' : arguments[1];

	var parsed = _urlQuery2.default.parse(pathname);
	return _path2.default.relative(base + 'pattern', parsed.pathname);
}
module.exports = exports['default'];

},{"./url-query":510,"path":206}],508:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

exports.default = navigate;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function navigate(id, navigation) {
	var scope = navigation;
	var fragments = id.split('/');

	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;

	try {
		for (var _iterator = (0, _getIterator3.default)(fragments), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
			var fragment = _step.value;

			if (scope && fragment in scope) {
				scope = scope[fragment];
				continue;
			}

			if (scope && scope.children && fragment in scope.children) {
				scope = scope.children[fragment];
				continue;
			}

			return null;
		}
	} catch (err) {
		_didIteratorError = true;
		_iteratorError = err;
	} finally {
		try {
			if (!_iteratorNormalCompletion && _iterator.return) {
				_iterator.return();
			}
		} finally {
			if (_didIteratorError) {
				throw _iteratorError;
			}
		}
	}

	return scope;
}
module.exports = exports['default'];

},{"babel-runtime/core-js/get-iterator":4}],509:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _lodash = require('lodash');

function unwrap(fn, path) {
	return function (e) {
		return fn((0, _lodash.get)(e, path));
	};
}

exports.default = (0, _lodash.memoize)(unwrap);
module.exports = exports['default'];

},{"lodash":"lodash"}],510:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

exports.format = format;
exports.parse = parse;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function has(token) {
	return function (item) {
		return item.includes(token);
	};
}

function div(token) {
	return function (item) {
		return item.split(token).slice(0, 2);
	};
}

function not(fn) {
	return function () {
		return !fn.apply(undefined, arguments);
	};
}

function sanitize(input) {
	return input.split('/').filter(Boolean).join('/');
}

function shove(input) {
	var index = input.length - 1;
	if (input[index] === '/') {
		return input.slice(0, index);
	}
	return input;
}

function format() {
	var parsed = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	var query = (0, _entries2.default)(parsed.query || {}).reduce(function (result, entry) {
		return [].concat((0, _toConsumableArray3.default)(result), [entry.join('--')]);
	}, []);

	var extension = _path2.default.extname(parsed.pathname || '');

	var before = extension ? _path2.default.dirname(parsed.pathname) : shove(parsed.pathname);
	var after = extension ? _path2.default.basename(parsed.pathname) : '';

	return [before].concat((0, _toConsumableArray3.default)(query), [after]).filter(Boolean).join('/');
}

function parse() {
	var urlPath = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

	var parsed = _url2.default.parse(urlPath);
	var raw = parsed.pathname || '';

	var pathname = raw.split('/').filter(not(has('--'))).join('/');

	var query = raw.split('/').filter(has('--')).map(div('--')).reduce(function (registry, entry) {
		var _entry = (0, _slicedToArray3.default)(entry, 2);

		var key = _entry[0];
		var value = _entry[1];

		registry[key] = value;
		return registry;
	}, {});

	return {
		pathname: pathname,
		query: query
	};
}

exports.default = { parse: parse, format: format };

},{"babel-runtime/core-js/object/entries":10,"babel-runtime/helpers/slicedToArray":27,"babel-runtime/helpers/toConsumableArray":28,"path":206,"url":"url"}],511:[function(require,module,exports){
(function (global){
'use strict';

require('dom4');

require('web-animations-js');

var _platform = require('platform');

var _platform2 = _interopRequireDefault(_platform);

var _lodash = require('lodash');

var _client = require('../../application/react-routes/client');

var _client2 = _interopRequireDefault(_client);

var _actions = require('../../application/actions');

var actions = _interopRequireWildcard(_actions);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _global = global;
var document = _global.document;
var location = _global.location;


main();

function main() {
	var vault = document.query('[data-application-state]');
	var slot = document.query('[data-application]');
	var data = getData(vault);

	// For static builds, purge the app mount point before
	// attaching to avoid react warning
	if (data.startPathname !== location.pathname) {
		empty(slot);
	}

	bind((0, _client2.default)(data, slot));
}

function bind(app) {
	var dispatch = app.store.dispatch;


	global.addEventListener('keydown', function (e) {
		var ctrl = e.ctrlKey;
		var code = e.data ? e.data.keyCode : e.keyCode;

		if (ctrl && code === 67) {
			// ctrl+c
			dispatch(actions.toggleConsole());
		}

		if (ctrl && code === 68) {
			// ctrl+d
			dispatch(actions.openDocumentation());
		}

		if (ctrl && code === 69) {
			// ctrl+e
			dispatch(actions.toggleExpandMenu());
		}

		if (ctrl && code === 70) {
			// ctrl+f
			dispatch(actions.openFullscreen());
		}

		if (ctrl && code === 73) {
			// ctrl+i
			dispatch(actions.toggleIssue());
		}

		if (ctrl && code === 79) {
			// ctrl+o
			dispatch(actions.toggleOpacity());
		}

		if (ctrl && code === 75) {
			// ctrl+k
			dispatch(actions.toggleKeyboardShortcuts());
		}

		if (ctrl && code === 76) {
			// ctrl+l
			dispatch(actions.toggleRulers());
		}

		if (ctrl && code === 82) {
			// ctrl+r
			dispatch(actions.loadPattern());
		}

		if (ctrl && code === 32) {
			// ctrl+space
			dispatch(actions.toggleSearchFocus());
		}

		if (ctrl && code === 84) {
			// ctrl+t
			dispatch(actions.toggleTheme());
		}

		if (code === 27) {
			// esc
			dispatch(actions.closeAllTheThings());
		}
	});
}

function getData(vault) {
	var platformData = getPlatformData();
	var windowData = getWindowData();
	var vaultData = JSON.parse(vault.textContent);
	return (0, _lodash.merge)({}, vaultData, windowData, { schema: platformData });
}

function getPlatformData() {
	return {
		clientRuntimeName: _platform2.default.name,
		clientRuntimeVersion: _platform2.default.version,
		clientOsName: _platform2.default.os.name,
		clientOsVersion: _platform2.default.os.version
	};
}

function getWindowData() {
	return {
		window: {
			width: global.innerWidth,
			height: global.innerHeight
		}
	};
}

function empty(el) {
	while (el.lastChild) {
		el.lastChild.remove();
	}
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../application/actions":385,"../../application/react-routes/client":474,"dom4":159,"lodash":"lodash","platform":207,"web-animations-js":371}]},{},[511])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
